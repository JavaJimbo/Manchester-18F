

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Dec 28 17:18:28 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           	psect	mediumconst
    40  007DFE                     __pmediumconst:
    41                           	opt stack 0
    42  007DFE  00                 	db	0
    43  007DFF                     _crc_tab16:
    44                           	opt stack 0
    45  007DFF  0000               	dw	0
    46  007E01  C0C1               	dw	49345
    47  007E03  C181               	dw	49537
    48  007E05  0140               	dw	320
    49  007E07  C301               	dw	49921
    50  007E09  03C0               	dw	960
    51  007E0B  0280               	dw	640
    52  007E0D  C241               	dw	49729
    53  007E0F  C601               	dw	50689
    54  007E11  06C0               	dw	1728
    55  007E13  0780               	dw	1920
    56  007E15  C741               	dw	51009
    57  007E17  0500               	dw	1280
    58  007E19  C5C1               	dw	50625
    59  007E1B  C481               	dw	50305
    60  007E1D  0440               	dw	1088
    61  007E1F  CC01               	dw	52225
    62  007E21  0CC0               	dw	3264
    63  007E23  0D80               	dw	3456
    64  007E25  CD41               	dw	52545
    65  007E27  0F00               	dw	3840
    66  007E29  CFC1               	dw	53185
    67  007E2B  CE81               	dw	52865
    68  007E2D  0E40               	dw	3648
    69  007E2F  0A00               	dw	2560
    70  007E31  CAC1               	dw	51905
    71  007E33  CB81               	dw	52097
    72  007E35  0B40               	dw	2880
    73  007E37  C901               	dw	51457
    74  007E39  09C0               	dw	2496
    75  007E3B  0880               	dw	2176
    76  007E3D  C841               	dw	51265
    77  007E3F  D801               	dw	55297
    78  007E41  18C0               	dw	6336
    79  007E43  1980               	dw	6528
    80  007E45  D941               	dw	55617
    81  007E47  1B00               	dw	6912
    82  007E49  DBC1               	dw	56257
    83  007E4B  DA81               	dw	55937
    84  007E4D  1A40               	dw	6720
    85  007E4F  1E00               	dw	7680
    86  007E51  DEC1               	dw	57025
    87  007E53  DF81               	dw	57217
    88  007E55  1F40               	dw	8000
    89  007E57  DD01               	dw	56577
    90  007E59  1DC0               	dw	7616
    91  007E5B  1C80               	dw	7296
    92  007E5D  DC41               	dw	56385
    93  007E5F  1400               	dw	5120
    94  007E61  D4C1               	dw	54465
    95  007E63  D581               	dw	54657
    96  007E65  1540               	dw	5440
    97  007E67  D701               	dw	55041
    98  007E69  17C0               	dw	6080
    99  007E6B  1680               	dw	5760
   100  007E6D  D641               	dw	54849
   101  007E6F  D201               	dw	53761
   102  007E71  12C0               	dw	4800
   103  007E73  1380               	dw	4992
   104  007E75  D341               	dw	54081
   105  007E77  1100               	dw	4352
   106  007E79  D1C1               	dw	53697
   107  007E7B  D081               	dw	53377
   108  007E7D  1040               	dw	4160
   109  007E7F  F001               	dw	61441
   110  007E81  30C0               	dw	12480
   111  007E83  3180               	dw	12672
   112  007E85  F141               	dw	61761
   113  007E87  3300               	dw	13056
   114  007E89  F3C1               	dw	62401
   115  007E8B  F281               	dw	62081
   116  007E8D  3240               	dw	12864
   117  007E8F  3600               	dw	13824
   118  007E91  F6C1               	dw	63169
   119  007E93  F781               	dw	63361
   120  007E95  3740               	dw	14144
   121  007E97  F501               	dw	62721
   122  007E99  35C0               	dw	13760
   123  007E9B  3480               	dw	13440
   124  007E9D  F441               	dw	62529
   125  007E9F  3C00               	dw	15360
   126  007EA1  FCC1               	dw	64705
   127  007EA3  FD81               	dw	64897
   128  007EA5  3D40               	dw	15680
   129  007EA7  FF01               	dw	65281
   130  007EA9  3FC0               	dw	16320
   131  007EAB  3E80               	dw	16000
   132  007EAD  FE41               	dw	65089
   133  007EAF  FA01               	dw	64001
   134  007EB1  3AC0               	dw	15040
   135  007EB3  3B80               	dw	15232
   136  007EB5  FB41               	dw	64321
   137  007EB7  3900               	dw	14592
   138  007EB9  F9C1               	dw	63937
   139  007EBB  F881               	dw	63617
   140  007EBD  3840               	dw	14400
   141  007EBF  2800               	dw	10240
   142  007EC1  E8C1               	dw	59585
   143  007EC3  E981               	dw	59777
   144  007EC5  2940               	dw	10560
   145  007EC7  EB01               	dw	60161
   146  007EC9  2BC0               	dw	11200
   147  007ECB  2A80               	dw	10880
   148  007ECD  EA41               	dw	59969
   149  007ECF  EE01               	dw	60929
   150  007ED1  2EC0               	dw	11968
   151  007ED3  2F80               	dw	12160
   152  007ED5  EF41               	dw	61249
   153  007ED7  2D00               	dw	11520
   154  007ED9  EDC1               	dw	60865
   155  007EDB  EC81               	dw	60545
   156  007EDD  2C40               	dw	11328
   157  007EDF  E401               	dw	58369
   158  007EE1  24C0               	dw	9408
   159  007EE3  2580               	dw	9600
   160  007EE5  E541               	dw	58689
   161  007EE7  2700               	dw	9984
   162  007EE9  E7C1               	dw	59329
   163  007EEB  E681               	dw	59009
   164  007EED  2640               	dw	9792
   165  007EEF  2200               	dw	8704
   166  007EF1  E2C1               	dw	58049
   167  007EF3  E381               	dw	58241
   168  007EF5  2340               	dw	9024
   169  007EF7  E101               	dw	57601
   170  007EF9  21C0               	dw	8640
   171  007EFB  2080               	dw	8320
   172  007EFD  E041               	dw	57409
   173  007EFF  A001               	dw	40961
   174  007F01  60C0               	dw	24768
   175  007F03  6180               	dw	24960
   176  007F05  A141               	dw	41281
   177  007F07  6300               	dw	25344
   178  007F09  A3C1               	dw	41921
   179  007F0B  A281               	dw	41601
   180  007F0D  6240               	dw	25152
   181  007F0F  6600               	dw	26112
   182  007F11  A6C1               	dw	42689
   183  007F13  A781               	dw	42881
   184  007F15  6740               	dw	26432
   185  007F17  A501               	dw	42241
   186  007F19  65C0               	dw	26048
   187  007F1B  6480               	dw	25728
   188  007F1D  A441               	dw	42049
   189  007F1F  6C00               	dw	27648
   190  007F21  ACC1               	dw	44225
   191  007F23  AD81               	dw	44417
   192  007F25  6D40               	dw	27968
   193  007F27  AF01               	dw	44801
   194  007F29  6FC0               	dw	28608
   195  007F2B  6E80               	dw	28288
   196  007F2D  AE41               	dw	44609
   197  007F2F  AA01               	dw	43521
   198  007F31  6AC0               	dw	27328
   199  007F33  6B80               	dw	27520
   200  007F35  AB41               	dw	43841
   201  007F37  6900               	dw	26880
   202  007F39  A9C1               	dw	43457
   203  007F3B  A881               	dw	43137
   204  007F3D  6840               	dw	26688
   205  007F3F  7800               	dw	30720
   206  007F41  B8C1               	dw	47297
   207  007F43  B981               	dw	47489
   208  007F45  7940               	dw	31040
   209  007F47  BB01               	dw	47873
   210  007F49  7BC0               	dw	31680
   211  007F4B  7A80               	dw	31360
   212  007F4D  BA41               	dw	47681
   213  007F4F  BE01               	dw	48641
   214  007F51  7EC0               	dw	32448
   215  007F53  7F80               	dw	32640
   216  007F55  BF41               	dw	48961
   217  007F57  7D00               	dw	32000
   218  007F59  BDC1               	dw	48577
   219  007F5B  BC81               	dw	48257
   220  007F5D  7C40               	dw	31808
   221  007F5F  B401               	dw	46081
   222  007F61  74C0               	dw	29888
   223  007F63  7580               	dw	30080
   224  007F65  B541               	dw	46401
   225  007F67  7700               	dw	30464
   226  007F69  B7C1               	dw	47041
   227  007F6B  B681               	dw	46721
   228  007F6D  7640               	dw	30272
   229  007F6F  7200               	dw	29184
   230  007F71  B2C1               	dw	45761
   231  007F73  B381               	dw	45953
   232  007F75  7340               	dw	29504
   233  007F77  B101               	dw	45313
   234  007F79  71C0               	dw	29120
   235  007F7B  7080               	dw	28800
   236  007F7D  B041               	dw	45121
   237  007F7F  5000               	dw	20480
   238  007F81  90C1               	dw	37057
   239  007F83  9181               	dw	37249
   240  007F85  5140               	dw	20800
   241  007F87  9301               	dw	37633
   242  007F89  53C0               	dw	21440
   243  007F8B  5280               	dw	21120
   244  007F8D  9241               	dw	37441
   245  007F8F  9601               	dw	38401
   246  007F91  56C0               	dw	22208
   247  007F93  5780               	dw	22400
   248  007F95  9741               	dw	38721
   249  007F97  5500               	dw	21760
   250  007F99  95C1               	dw	38337
   251  007F9B  9481               	dw	38017
   252  007F9D  5440               	dw	21568
   253  007F9F  9C01               	dw	39937
   254  007FA1  5CC0               	dw	23744
   255  007FA3  5D80               	dw	23936
   256  007FA5  9D41               	dw	40257
   257  007FA7  5F00               	dw	24320
   258  007FA9  9FC1               	dw	40897
   259  007FAB  9E81               	dw	40577
   260  007FAD  5E40               	dw	24128
   261  007FAF  5A00               	dw	23040
   262  007FB1  9AC1               	dw	39617
   263  007FB3  9B81               	dw	39809
   264  007FB5  5B40               	dw	23360
   265  007FB7  9901               	dw	39169
   266  007FB9  59C0               	dw	22976
   267  007FBB  5880               	dw	22656
   268  007FBD  9841               	dw	38977
   269  007FBF  8801               	dw	34817
   270  007FC1  48C0               	dw	18624
   271  007FC3  4980               	dw	18816
   272  007FC5  8941               	dw	35137
   273  007FC7  4B00               	dw	19200
   274  007FC9  8BC1               	dw	35777
   275  007FCB  8A81               	dw	35457
   276  007FCD  4A40               	dw	19008
   277  007FCF  4E00               	dw	19968
   278  007FD1  8EC1               	dw	36545
   279  007FD3  8F81               	dw	36737
   280  007FD5  4F40               	dw	20288
   281  007FD7  8D01               	dw	36097
   282  007FD9  4DC0               	dw	19904
   283  007FDB  4C80               	dw	19584
   284  007FDD  8C41               	dw	35905
   285  007FDF  4400               	dw	17408
   286  007FE1  84C1               	dw	33985
   287  007FE3  8581               	dw	34177
   288  007FE5  4540               	dw	17728
   289  007FE7  8701               	dw	34561
   290  007FE9  47C0               	dw	18368
   291  007FEB  4680               	dw	18048
   292  007FED  8641               	dw	34369
   293  007FEF  8201               	dw	33281
   294  007FF1  42C0               	dw	17088
   295  007FF3  4380               	dw	17280
   296  007FF5  8341               	dw	33601
   297  007FF7  4100               	dw	16640
   298  007FF9  81C1               	dw	33217
   299  007FFB  8081               	dw	32897
   300  007FFD  4040               	dw	16448
   301  007FFF                     __end_of_crc_tab16:
   302                           	opt stack 0
   303  0000                     _ADCON0	set	4034
   304  0000                     _ADCON1	set	4033
   305  0000                     _INTCON	set	4082
   306  0000                     _INTCON2	set	4081
   307  0000                     _INTCON2bits	set	4081
   308  0000                     _INTCONbits	set	4082
   309  0000                     _LATAbits	set	3977
   310  0000                     _PIR1bits	set	3998
   311  0000                     _PORTAbits	set	3968
   312  0000                     _PORTB	set	3969
   313  0000                     _PORTBbits	set	3969
   314  0000                     _SSPADD	set	4040
   315  0000                     _SSPBUF	set	4041
   316  0000                     _SSPCON1	set	4038
   317  0000                     _SSPCON1bits	set	4038
   318  0000                     _SSPCON2bits	set	4037
   319  0000                     _SSPSTAT	set	4039
   320  0000                     _TRISA	set	3986
   321  0000                     _TRISB	set	3987
   322  0000                     _TRISC	set	3988
   323  0000                     _TXSTAbits	set	4012
   324                           
   325                           ; #config settings
   326  007FFF  00                 	db	0	; dummy byte at the end
   327  0000                     
   328                           	psect	cinit
   329  00099C                     __pcinit:
   330                           	opt stack 0
   331  00099C                     start_initialization:
   332                           	opt stack 0
   333  00099C                     __initialization:
   334                           	opt stack 0
   335                           
   336                           ; Clear objects allocated to BIGRAM (1024 bytes)
   337  00099C  EE01  F080         	lfsr	0,__pbssBIGRAM
   338  0009A0  EE14 F000          	lfsr	1,1024
   339  0009A4                     clear_0:
   340  0009A4  6AEE               	clrf	postinc0,c
   341  0009A6  50E5               	movf	postdec1,w,c
   342  0009A8  50E1               	movf	fsr1l,w,c
   343  0009AA  E1FC               	bnz	clear_0
   344  0009AC  50E2               	movf	fsr1h,w,c
   345  0009AE  E1FA               	bnz	clear_0
   346                           
   347                           ; Clear objects allocated to BANK1 (128 bytes)
   348  0009B0  EE01  F000         	lfsr	0,__pbssBANK1
   349  0009B4  0E80               	movlw	128
   350  0009B6                     clear_1:
   351  0009B6  6AEE               	clrf	postinc0,c
   352  0009B8  06E8               	decf	wreg,f,c
   353  0009BA  E1FD               	bnz	clear_1
   354                           
   355                           ; Clear objects allocated to BANK0 (64 bytes)
   356  0009BC  EE00  F080         	lfsr	0,__pbssBANK0
   357  0009C0  0E40               	movlw	64
   358  0009C2                     clear_2:
   359  0009C2  6AEE               	clrf	postinc0,c
   360  0009C4  06E8               	decf	wreg,f,c
   361  0009C6  E1FD               	bnz	clear_2
   362                           
   363                           ; Clear objects allocated to COMRAM (6 bytes)
   364  0009C8  6A40               	clrf	(__pbssCOMRAM+5)& (0+255),c
   365  0009CA  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   366  0009CC  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   367  0009CE  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   368  0009D0  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   369  0009D2  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   370  0009D4                     end_of_initialization:
   371                           	opt stack 0
   372  0009D4                     __end_of__initialization:
   373                           	opt stack 0
   374  0009D4  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   375  0009D6  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   376  0009D8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   377  0009DA  6EF8               	movwf	tblptru,c
   378  0009DC  0100               	movlb	0
   379  0009DE  EF7A  F001         	goto	_main	;jump to C main() function
   380                           tblptru	equ	0xFF8
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1h	equ	0xFE2
   385                           fsr1l	equ	0xFE1
   386                           
   387                           	psect	bssCOMRAM
   388  00003B                     __pbssCOMRAM:
   389                           	opt stack 0
   390  00003B                     initMMA8452@F2758:
   391                           	opt stack 0
   392  00003B                     	ds	4
   393  00003F                     _PORTBreg:
   394                           	opt stack 0
   395  00003F                     	ds	1
   396  000040                     _pushFlag:
   397                           	opt stack 0
   398  000040                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  000080                     __pbssBANK0:
   408                           	opt stack 0
   409  000080                     _commandBuffer:
   410                           	opt stack 0
   411  000080                     	ds	64
   412                           tblptru	equ	0xFF8
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           postdec1	equ	0xFE5
   416                           fsr1h	equ	0xFE2
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	bssBANK1
   420  000100                     __pbssBANK1:
   421                           	opt stack 0
   422  000100                     _testBuffer:
   423                           	opt stack 0
   424  000100                     	ds	128
   425                           tblptru	equ	0xFF8
   426                           postinc0	equ	0xFEE
   427                           wreg	equ	0xFE8
   428                           postdec1	equ	0xFE5
   429                           fsr1h	equ	0xFE2
   430                           fsr1l	equ	0xFE1
   431                           
   432                           	psect	bssBIGRAM
   433  000180                     __pbssBIGRAM:
   434                           	opt stack 0
   435  000180                     _arrDataPacket:
   436                           	opt stack 0
   437  000180                     	ds	1024
   438                           tblptru	equ	0xFF8
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1h	equ	0xFE2
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	cstackCOMRAM
   446  000001                     __pcstackCOMRAM:
   447                           	opt stack 0
   448  000001                     ??_isr:
   449  000001                     
   450                           ; 1 bytes @ 0x0
   451  000001                     	ds	14
   452  00000F                     ?_getTwosComplement:
   453                           	opt stack 0
   454  00000F                     ?_createDataPacket:
   455                           	opt stack 0
   456  00000F                     ?_update_crc_16:
   457                           	opt stack 0
   458  00000F                     getTwosComplement@LSBbyte:
   459                           	opt stack 0
   460  00000F                     i2c_SendByte@byte:
   461                           	opt stack 0
   462  00000F                     i2c_GetAcknowledge@ack:
   463                           	opt stack 0
   464  00000F                     i2c_ReadByte@byte:
   465                           	opt stack 0
   466  00000F                     i2c_SendAcknowledge@status:
   467                           	opt stack 0
   468  00000F                     xmitBreak@numStartPulses:
   469                           	opt stack 0
   470  00000F                     createDataPacket@ptrData:
   471                           	opt stack 0
   472  00000F                     DelayMs@count:
   473                           	opt stack 0
   474  00000F                     update_crc_16@crc:
   475                           	opt stack 0
   476  00000F                     xmitPacket@numBytes:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0xE
   480  00000F                     	ds	1
   481  000010                     i2c_SendControlByte@direction:
   482                           	opt stack 0
   483  000010                     xmitBreak@delayTime:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0xF
   487  000010                     	ds	1
   488  000011                     ??_getTwosComplement:
   489  000011                     DelayMs@i:
   490                           	opt stack 0
   491  000011                     update_crc_16@nextVal:
   492                           	opt stack 0
   493  000011                     i2c_SendControlByte@controlByte:
   494                           	opt stack 0
   495  000011                     xmitBreak@delayLoop:
   496                           	opt stack 0
   497  000011                     createDataPacket@numDataBytes:
   498                           	opt stack 0
   499  000011                     xmitPacket@ptrDelay:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x10
   503  000011                     	ds	1
   504  000012                     ??_update_crc_16:
   505  000012                     DelayMs@downCount:
   506                           	opt stack 0
   507  000012                     i2c_SendControlByte@outByte:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x11
   511  000012                     	ds	1
   512  000013                     sendREADcommand@deviceID:
   513                           	opt stack 0
   514  000013                     setRegister@deviceREGISTER:
   515                           	opt stack 0
   516  000013                     writeByteToRegister@deviceREGISTER:
   517                           	opt stack 0
   518  000013                     createDataPacket@ptrPacket:
   519                           	opt stack 0
   520  000013                     xmitPacket@index:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x12
   524  000013                     	ds	1
   525  000014                     setRegister@deviceID:
   526                           	opt stack 0
   527  000014                     writeByteToRegister@dataByte:
   528                           	opt stack 0
   529  000014                     getTwosComplement@MSBbyte:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x13
   533  000014                     	ds	1
   534  000015                     createDataPacket@previousDataBit:
   535                           	opt stack 0
   536  000015                     writeByteToRegister@deviceID:
   537                           	opt stack 0
   538  000015                     readRegisters@deviceREGISTER:
   539                           	opt stack 0
   540  000015                     xmitPacket@delayTime:
   541                           	opt stack 0
   542  000015                     getTwosComplement@value:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x14
   546  000015                     	ds	1
   547  000016                     readRegisters@numRegisters:
   548                           	opt stack 0
   549  000016                     xmitPacket@delayLoop:
   550                           	opt stack 0
   551  000016                     createDataPacket@dataIndex:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x15
   555  000016                     	ds	1
   556  000017                     readRegisters@registerPtr:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x16
   560  000017                     	ds	1
   561  000018                     createDataPacket@dataBit:
   562                           	opt stack 0
   563  000018                     update_crc_16@tmp:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x17
   567  000018                     	ds	1
   568  000019                     ??_readRegisters:
   569  000019                     createDataPacket@i:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x18
   573  000019                     	ds	1
   574  00001A                     createDataPacket@byteMask:
   575                           	opt stack 0
   576  00001A                     update_crc_16@shortVal:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x19
   580  00001A                     	ds	1
   581  00001B                     createDataPacket@state:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x1A
   585  00001B                     	ds	1
   586  00001C                     ?_CRCcalculate:
   587                           	opt stack 0
   588  00001C                     createDataPacket@packetIndex:
   589                           	opt stack 0
   590  00001C                     CRCcalculate@message:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x1B
   594  00001C                     	ds	2
   595  00001E                     CRCcalculate@nBytes:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x1D
   599  00001E                     	ds	1
   600  00001F                     readRegisters@deviceID:
   601                           	opt stack 0
   602  00001F                     CRCcalculate@CRCresult:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x1E
   606  00001F                     	ds	1
   607  000020                     readRegisters@i:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1F
   611  000020                     	ds	1
   612  000021                     CRCcalculate@i:
   613                           	opt stack 0
   614  000021                     initMMA8452@accelData:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x20
   618  000021                     	ds	4
   619  000025                     initMMA8452@commandByte:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x24
   623  000025                     	ds	1
   624  000026                     main@initResult:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x25
   628  000026                     	ds	1
   629  000027                     main@numBytesToSend:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x26
   633  000027                     	ds	2
   634  000029                     main@accelerometerBuffer:
   635                           	opt stack 0
   636                           
   637                           ; 6 bytes @ 0x28
   638  000029                     	ds	6
   639  00002F                     main@rawVectx:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x2E
   643  00002F                     	ds	2
   644  000031                     main@rawVecty:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x30
   648  000031                     	ds	2
   649  000033                     main@rawVectz:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x32
   653  000033                     	ds	2
   654  000035                     main@sysModRegister:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x34
   658  000035                     	ds	1
   659  000036                     main@motionDetection:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x35
   663  000036                     	ds	1
   664  000037                     main@interruptSource:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x36
   668  000037                     	ds	1
   669  000038                     main@convert:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x37
   673  000038                     	ds	2
   674  00003A                     main@i:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x39
   678  00003A                     	ds	1
   679                           tblptru	equ	0xFF8
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postdec1	equ	0xFE5
   683                           fsr1h	equ	0xFE2
   684                           fsr1l	equ	0xFE1
   685                           
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 70 in file "../main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  acceleromete    6   40[COMRAM] unsigned char [6]
   696 ;;  convert         2   55[COMRAM] struct .
   697 ;;  rawVectz        2   50[COMRAM] short 
   698 ;;  rawVecty        2   48[COMRAM] short 
   699 ;;  rawVectx        2   46[COMRAM] short 
   700 ;;  numBytesToSe    2   38[COMRAM] unsigned short 
   701 ;;  i               1   57[COMRAM] unsigned char 
   702 ;;  interruptSou    1   54[COMRAM] unsigned char 
   703 ;;  motionDetect    1   53[COMRAM] unsigned char 
   704 ;;  sysModRegist    1   52[COMRAM] unsigned char 
   705 ;;  initResult      1   37[COMRAM] unsigned char 
   706 ;;  j               1    0        unsigned char 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   716 ;;      Params:         0       0       0       0       0       0       0
   717 ;;      Locals:        21       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0
   719 ;;      Totals:        21       0       0       0       0       0       0
   720 ;;Total ram usage:       21 bytes
   721 ;; Hardware stack levels required when called:    6
   722 ;; This function calls:
   723 ;;		_CRCcalculate
   724 ;;		_DelayMs
   725 ;;		_createDataPacket
   726 ;;		_getTwosComplement
   727 ;;		_init
   728 ;;		_initMMA8452
   729 ;;		_initialize_I2C
   730 ;;		_readRegisters
   731 ;;		_xmitBreak
   732 ;;		_xmitPacket
   733 ;; This function is called by:
   734 ;;		Startup code after reset
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text0
   739  0002F4                     __ptext0:
   740                           	opt stack 0
   741  0002F4                     _main:
   742                           	opt stack 25
   743                           
   744                           ;main.c: 71: unsigned short numBytesToSend;
   745                           ;main.c: 72: unsigned char i, j;
   746                           ;main.c: 73: unsigned char accelerometerBuffer[6];
   747                           ;main.c: 75: unsigned char motionDetection = 0;
   748                           
   749                           ;incstack = 0
   750  0002F4  0E00               	movlw	0
   751  0002F6  6E36               	movwf	main@motionDetection,c
   752                           
   753                           ;main.c: 76: unsigned char sysModRegister = 0;
   754  0002F8  0E00               	movlw	0
   755  0002FA  6E35               	movwf	main@sysModRegister,c
   756                           
   757                           ;main.c: 77: unsigned char interruptSource = 0;
   758  0002FC  0E00               	movlw	0
   759  0002FE  6E37               	movwf	main@interruptSource,c
   760                           
   761                           ;main.c: 78: short rawVectx, rawVecty, rawVectz;
   762                           ;main.c: 79: unsigned char initResult = 0;
   763  000300  0E00               	movlw	0
   764  000302  6E26               	movwf	main@initResult,c
   765                           
   766                           ;main.c: 82: union {
   767                           ;main.c: 83: unsigned char byte[2];
   768                           ;main.c: 84: unsigned short integer;
   769                           ;main.c: 85: } convert;
   770                           ;main.c: 87: init();
   771  000304  EC27  F005         	call	_init	;wreg free
   772                           
   773                           ;main.c: 88: initialize_I2C();
   774  000308  EC50  F005         	call	_initialize_I2C	;wreg free
   775                           
   776                           ;main.c: 89: initResult = initMMA8452();
   777  00030C  EC4B  F000         	call	_initMMA8452	;wreg free
   778  000310  6E26               	movwf	main@initResult,c
   779  000312                     l2136:
   780                           
   781                           ;main.c: 93: readRegisters(0x1D, 0x0C, 1, &interruptSource);
   782  000312  0E0C               	movlw	12
   783  000314  6E15               	movwf	readRegisters@deviceREGISTER,c
   784  000316  0E01               	movlw	1
   785  000318  6E16               	movwf	readRegisters@numRegisters,c
   786  00031A  0E37               	movlw	low main@interruptSource
   787  00031C  6E17               	movwf	readRegisters@registerPtr,c
   788  00031E  0E00               	movlw	high main@interruptSource
   789  000320  6E18               	movwf	readRegisters@registerPtr+1,c
   790  000322  0E1D               	movlw	29
   791  000324  ECDC  F003         	call	_readRegisters
   792                           
   793                           ;main.c: 94: if (interruptSource){
   794  000328  5037               	movf	main@interruptSource,w,c
   795  00032A  B4D8               	btfsc	status,2,c
   796  00032C  D016               	goto	l2140
   797                           
   798                           ;main.c: 95: readRegisters(0x1D, 0x0B, 1, &sysModRegister);
   799  00032E  0E0B               	movlw	11
   800  000330  6E15               	movwf	readRegisters@deviceREGISTER,c
   801  000332  0E01               	movlw	1
   802  000334  6E16               	movwf	readRegisters@numRegisters,c
   803  000336  0E35               	movlw	low main@sysModRegister
   804  000338  6E17               	movwf	readRegisters@registerPtr,c
   805  00033A  0E00               	movlw	high main@sysModRegister
   806  00033C  6E18               	movwf	readRegisters@registerPtr+1,c
   807  00033E  0E1D               	movlw	29
   808  000340  ECDC  F003         	call	_readRegisters
   809                           
   810                           ;main.c: 96: readRegisters(0x1D, 0x16, 1, &motionDetection);
   811  000344  0E16               	movlw	22
   812  000346  6E15               	movwf	readRegisters@deviceREGISTER,c
   813  000348  0E01               	movlw	1
   814  00034A  6E16               	movwf	readRegisters@numRegisters,c
   815  00034C  0E36               	movlw	low main@motionDetection
   816  00034E  6E17               	movwf	readRegisters@registerPtr,c
   817  000350  0E00               	movlw	high main@motionDetection
   818  000352  6E18               	movwf	readRegisters@registerPtr+1,c
   819  000354  0E1D               	movlw	29
   820  000356  ECDC  F003         	call	_readRegisters
   821  00035A                     l2140:
   822                           
   823                           ;main.c: 97: }
   824                           ;main.c: 98: } while (interruptSource != 0);
   825  00035A  5037               	movf	main@interruptSource,w,c
   826  00035C  A4D8               	btfss	status,2,c
   827  00035E  D7D9               	goto	l2136
   828                           
   829                           ;main.c: 100: PORTAbits.RA1 = 0;
   830  000360  9280               	bcf	3968,1,c	;volatile
   831                           
   832                           ;main.c: 101: LATAbits.LATA0 = 0;
   833  000362  9089               	bcf	3977,0,c	;volatile
   834  000364  0003               	sleep		;# 
   835                           
   836                           ;main.c: 104: readRegisters(0x1D, 0x01, 6, accelerometerBuffer);
   837  000366  0E01               	movlw	1
   838  000368  6E15               	movwf	readRegisters@deviceREGISTER,c
   839  00036A  0E06               	movlw	6
   840  00036C  6E16               	movwf	readRegisters@numRegisters,c
   841  00036E  0E29               	movlw	low main@accelerometerBuffer
   842  000370  6E17               	movwf	readRegisters@registerPtr,c
   843  000372  0E00               	movlw	high main@accelerometerBuffer
   844  000374  6E18               	movwf	readRegisters@registerPtr+1,c
   845  000376  0E1D               	movlw	29
   846  000378  ECDC  F003         	call	_readRegisters
   847                           
   848                           ;main.c: 105: rawVectx = getTwosComplement(accelerometerBuffer[0], accelerometerBuffer[1
      +                          ]);
   849  00037C  C02A  F00F         	movff	main@accelerometerBuffer+1,getTwosComplement@LSBbyte
   850  000380  5029               	movf	main@accelerometerBuffer,w,c
   851  000382  EC57  F004         	call	_getTwosComplement
   852  000386  C00F  F02F         	movff	?_getTwosComplement,main@rawVectx
   853  00038A  C010  F030         	movff	?_getTwosComplement+1,main@rawVectx+1
   854                           
   855                           ;main.c: 106: rawVectz = getTwosComplement(accelerometerBuffer[2], accelerometerBuffer[3
      +                          ]);
   856  00038E  C02C  F00F         	movff	main@accelerometerBuffer+3,getTwosComplement@LSBbyte
   857  000392  502B               	movf	main@accelerometerBuffer+2,w,c
   858  000394  EC57  F004         	call	_getTwosComplement
   859  000398  C00F  F033         	movff	?_getTwosComplement,main@rawVectz
   860  00039C  C010  F034         	movff	?_getTwosComplement+1,main@rawVectz+1
   861                           
   862                           ;main.c: 107: rawVecty = getTwosComplement(accelerometerBuffer[4], accelerometerBuffer[5
      +                          ]);
   863  0003A0  C02E  F00F         	movff	main@accelerometerBuffer+5,getTwosComplement@LSBbyte
   864  0003A4  502D               	movf	main@accelerometerBuffer+4,w,c
   865  0003A6  EC57  F004         	call	_getTwosComplement
   866  0003AA  C00F  F031         	movff	?_getTwosComplement,main@rawVecty
   867  0003AE  C010  F032         	movff	?_getTwosComplement+1,main@rawVecty+1
   868                           
   869                           ;main.c: 110: i = 0;
   870  0003B2  0E00               	movlw	0
   871  0003B4  6E3A               	movwf	main@i,c
   872                           
   873                           ;main.c: 111: commandBuffer[i++] = 7;
   874  0003B6  503A               	movf	main@i,w,c
   875  0003B8  0D01               	mullw	1
   876  0003BA  0E80               	movlw	low _commandBuffer
   877  0003BC  24F3               	addwf	prodl,w,c
   878  0003BE  6ED9               	movwf	fsr2l,c
   879  0003C0  0E00               	movlw	high _commandBuffer
   880  0003C2  20F4               	addwfc	prodh,w,c
   881  0003C4  6EDA               	movwf	fsr2h,c
   882  0003C6  0E07               	movlw	7
   883  0003C8  6EDF               	movwf	indf2,c
   884  0003CA  2A3A               	incf	main@i,f,c
   885                           
   886                           ;main.c: 113: commandBuffer[i++] = motionDetection;
   887  0003CC  503A               	movf	main@i,w,c
   888  0003CE  0D01               	mullw	1
   889  0003D0  0E80               	movlw	low _commandBuffer
   890  0003D2  24F3               	addwf	prodl,w,c
   891  0003D4  6ED9               	movwf	fsr2l,c
   892  0003D6  0E00               	movlw	high _commandBuffer
   893  0003D8  20F4               	addwfc	prodh,w,c
   894  0003DA  6EDA               	movwf	fsr2h,c
   895  0003DC  C036  FFDF         	movff	main@motionDetection,indf2
   896  0003E0  2A3A               	incf	main@i,f,c
   897                           
   898                           ;main.c: 114: motionDetection = 0x00;
   899  0003E2  0E00               	movlw	0
   900  0003E4  6E36               	movwf	main@motionDetection,c
   901                           
   902                           ;main.c: 116: convert.integer = rawVectx;
   903  0003E6  C02F  F038         	movff	main@rawVectx,main@convert
   904  0003EA  C030  F039         	movff	main@rawVectx+1,main@convert+1
   905                           
   906                           ;main.c: 117: commandBuffer[i++] = convert.byte[0];
   907  0003EE  503A               	movf	main@i,w,c
   908  0003F0  0D01               	mullw	1
   909  0003F2  0E80               	movlw	low _commandBuffer
   910  0003F4  24F3               	addwf	prodl,w,c
   911  0003F6  6ED9               	movwf	fsr2l,c
   912  0003F8  0E00               	movlw	high _commandBuffer
   913  0003FA  20F4               	addwfc	prodh,w,c
   914  0003FC  6EDA               	movwf	fsr2h,c
   915  0003FE  C038  FFDF         	movff	main@convert,indf2
   916  000402  2A3A               	incf	main@i,f,c
   917                           
   918                           ;main.c: 118: commandBuffer[i++] = convert.byte[1];
   919  000404  503A               	movf	main@i,w,c
   920  000406  0D01               	mullw	1
   921  000408  0E80               	movlw	low _commandBuffer
   922  00040A  24F3               	addwf	prodl,w,c
   923  00040C  6ED9               	movwf	fsr2l,c
   924  00040E  0E00               	movlw	high _commandBuffer
   925  000410  20F4               	addwfc	prodh,w,c
   926  000412  6EDA               	movwf	fsr2h,c
   927  000414  C039  FFDF         	movff	main@convert+1,indf2
   928  000418  2A3A               	incf	main@i,f,c
   929                           
   930                           ;main.c: 120: convert.integer = rawVectz;
   931  00041A  C033  F038         	movff	main@rawVectz,main@convert
   932  00041E  C034  F039         	movff	main@rawVectz+1,main@convert+1
   933                           
   934                           ;main.c: 121: commandBuffer[i++] = convert.byte[0];
   935  000422  503A               	movf	main@i,w,c
   936  000424  0D01               	mullw	1
   937  000426  0E80               	movlw	low _commandBuffer
   938  000428  24F3               	addwf	prodl,w,c
   939  00042A  6ED9               	movwf	fsr2l,c
   940  00042C  0E00               	movlw	high _commandBuffer
   941  00042E  20F4               	addwfc	prodh,w,c
   942  000430  6EDA               	movwf	fsr2h,c
   943  000432  C038  FFDF         	movff	main@convert,indf2
   944  000436  2A3A               	incf	main@i,f,c
   945                           
   946                           ;main.c: 122: commandBuffer[i++] = convert.byte[1];
   947  000438  503A               	movf	main@i,w,c
   948  00043A  0D01               	mullw	1
   949  00043C  0E80               	movlw	low _commandBuffer
   950  00043E  24F3               	addwf	prodl,w,c
   951  000440  6ED9               	movwf	fsr2l,c
   952  000442  0E00               	movlw	high _commandBuffer
   953  000444  20F4               	addwfc	prodh,w,c
   954  000446  6EDA               	movwf	fsr2h,c
   955  000448  C039  FFDF         	movff	main@convert+1,indf2
   956  00044C  2A3A               	incf	main@i,f,c
   957                           
   958                           ;main.c: 124: convert.integer = rawVecty;
   959  00044E  C031  F038         	movff	main@rawVecty,main@convert
   960  000452  C032  F039         	movff	main@rawVecty+1,main@convert+1
   961                           
   962                           ;main.c: 125: commandBuffer[i++] = convert.byte[0];
   963  000456  503A               	movf	main@i,w,c
   964  000458  0D01               	mullw	1
   965  00045A  0E80               	movlw	low _commandBuffer
   966  00045C  24F3               	addwf	prodl,w,c
   967  00045E  6ED9               	movwf	fsr2l,c
   968  000460  0E00               	movlw	high _commandBuffer
   969  000462  20F4               	addwfc	prodh,w,c
   970  000464  6EDA               	movwf	fsr2h,c
   971  000466  C038  FFDF         	movff	main@convert,indf2
   972  00046A  2A3A               	incf	main@i,f,c
   973                           
   974                           ;main.c: 126: commandBuffer[i++] = convert.byte[1];
   975  00046C  503A               	movf	main@i,w,c
   976  00046E  0D01               	mullw	1
   977  000470  0E80               	movlw	low _commandBuffer
   978  000472  24F3               	addwf	prodl,w,c
   979  000474  6ED9               	movwf	fsr2l,c
   980  000476  0E00               	movlw	high _commandBuffer
   981  000478  20F4               	addwfc	prodh,w,c
   982  00047A  6EDA               	movwf	fsr2h,c
   983  00047C  C039  FFDF         	movff	main@convert+1,indf2
   984  000480  2A3A               	incf	main@i,f,c
   985                           
   986                           ;main.c: 128: convert.integer = CRCcalculate(&commandBuffer[1], 7);
   987  000482  0E81               	movlw	low (_commandBuffer+1)
   988  000484  6E1C               	movwf	CRCcalculate@message,c
   989  000486  0E00               	movlw	high (_commandBuffer+1)
   990  000488  6E1D               	movwf	CRCcalculate@message+1,c
   991  00048A  0E07               	movlw	7
   992  00048C  6E1E               	movwf	CRCcalculate@nBytes,c
   993  00048E  ECA9  F004         	call	_CRCcalculate	;wreg free
   994  000492  C01C  F038         	movff	?_CRCcalculate,main@convert
   995  000496  C01D  F039         	movff	?_CRCcalculate+1,main@convert+1
   996                           
   997                           ;main.c: 129: commandBuffer[i++] = convert.byte[0];
   998  00049A  503A               	movf	main@i,w,c
   999  00049C  0D01               	mullw	1
  1000  00049E  0E80               	movlw	low _commandBuffer
  1001  0004A0  24F3               	addwf	prodl,w,c
  1002  0004A2  6ED9               	movwf	fsr2l,c
  1003  0004A4  0E00               	movlw	high _commandBuffer
  1004  0004A6  20F4               	addwfc	prodh,w,c
  1005  0004A8  6EDA               	movwf	fsr2h,c
  1006  0004AA  C038  FFDF         	movff	main@convert,indf2
  1007  0004AE  2A3A               	incf	main@i,f,c
  1008                           
  1009                           ;main.c: 130: commandBuffer[i++] = convert.byte[1];
  1010  0004B0  503A               	movf	main@i,w,c
  1011  0004B2  0D01               	mullw	1
  1012  0004B4  0E80               	movlw	low _commandBuffer
  1013  0004B6  24F3               	addwf	prodl,w,c
  1014  0004B8  6ED9               	movwf	fsr2l,c
  1015  0004BA  0E00               	movlw	high _commandBuffer
  1016  0004BC  20F4               	addwfc	prodh,w,c
  1017  0004BE  6EDA               	movwf	fsr2h,c
  1018  0004C0  C039  FFDF         	movff	main@convert+1,indf2
  1019  0004C4  2A3A               	incf	main@i,f,c
  1020                           
  1021                           ;main.c: 132: numBytesToSend = createDataPacket(commandBuffer, i, arrDataPacket);
  1022  0004C6  0E80               	movlw	low _commandBuffer
  1023  0004C8  6E0F               	movwf	createDataPacket@ptrData,c
  1024  0004CA  0E00               	movlw	high _commandBuffer
  1025  0004CC  6E10               	movwf	createDataPacket@ptrData+1,c
  1026  0004CE  C03A  F011         	movff	main@i,createDataPacket@numDataBytes
  1027  0004D2  6A12               	clrf	createDataPacket@numDataBytes+1,c
  1028  0004D4  0E80               	movlw	low _arrDataPacket
  1029  0004D6  6E13               	movwf	createDataPacket@ptrPacket,c
  1030  0004D8  0E01               	movlw	high _arrDataPacket
  1031  0004DA  6E14               	movwf	createDataPacket@ptrPacket+1,c
  1032  0004DC  EC9B  F002         	call	_createDataPacket	;wreg free
  1033  0004E0  C00F  F027         	movff	?_createDataPacket,main@numBytesToSend
  1034  0004E4  C010  F028         	movff	?_createDataPacket+1,main@numBytesToSend+1
  1035                           
  1036                           ;main.c: 134: PORTBbits.RB5 = 1;
  1037  0004E8  8A81               	bsf	3969,5,c	;volatile
  1038                           
  1039                           ;main.c: 135: PORTAbits.RA1 = 1;
  1040  0004EA  8280               	bsf	3968,1,c	;volatile
  1041                           
  1042                           ;main.c: 136: xmitBreak();
  1043  0004EC  EC37  F003         	call	_xmitBreak	;wreg free
  1044                           
  1045                           ;main.c: 137: xmitPacket(numBytesToSend, arrDataPacket);
  1046  0004F0  C027  F00F         	movff	main@numBytesToSend,xmitPacket@numBytes
  1047  0004F4  C028  F010         	movff	main@numBytesToSend+1,xmitPacket@numBytes+1
  1048  0004F8  0E80               	movlw	low _arrDataPacket
  1049  0004FA  6E11               	movwf	xmitPacket@ptrDelay,c
  1050  0004FC  0E01               	movlw	high _arrDataPacket
  1051  0004FE  6E12               	movwf	xmitPacket@ptrDelay+1,c
  1052  000500  EC8B  F003         	call	_xmitPacket	;wreg free
  1053                           
  1054                           ;main.c: 138: PORTAbits.RA1 = 0;
  1055  000504  9280               	bcf	3968,1,c	;volatile
  1056                           
  1057                           ;main.c: 139: LATAbits.LATA0 = 0;
  1058  000506  9089               	bcf	3977,0,c	;volatile
  1059                           
  1060                           ;main.c: 140: PORTBbits.RB5 = 0;
  1061  000508  9A81               	bcf	3969,5,c	;volatile
  1062                           
  1063                           ;main.c: 142: if (pushFlag){
  1064  00050A  5040               	movf	_pushFlag,w,c
  1065  00050C  B4D8               	btfsc	status,2,c
  1066  00050E  D701               	goto	l2136
  1067  000510                     l2220:
  1068                           
  1069                           ;main.c: 144: DelayMs(20);
  1070  000510  0E00               	movlw	0
  1071  000512  6E10               	movwf	DelayMs@count+1,c
  1072  000514  0E14               	movlw	20
  1073  000516  6E0F               	movwf	DelayMs@count,c
  1074  000518  EC0D  F005         	call	_DelayMs	;wreg free
  1075                           
  1076                           ;main.c: 145: } while (!PORTBbits.RB0);
  1077  00051C  A081               	btfss	3969,0,c	;volatile
  1078  00051E  D7F8               	goto	l2220
  1079                           
  1080                           ;main.c: 146: DelayMs(20);
  1081  000520  0E00               	movlw	0
  1082  000522  6E10               	movwf	DelayMs@count+1,c
  1083  000524  0E14               	movlw	20
  1084  000526  6E0F               	movwf	DelayMs@count,c
  1085  000528  EC0D  F005         	call	_DelayMs	;wreg free
  1086  00052C                     l66:
  1087  00052C  A081               	btfss	3969,0,c	;volatile
  1088  00052E  D7FE               	goto	l66
  1089                           
  1090                           ;main.c: 148: pushFlag = 0;
  1091  000530  0E00               	movlw	0
  1092  000532  6E40               	movwf	_pushFlag,c
  1093  000534  D6EE               	goto	l2136
  1094  000536                     __end_of_main:
  1095                           	opt stack 0
  1096                           tblptru	equ	0xFF8
  1097                           prodh	equ	0xFF4
  1098                           prodl	equ	0xFF3
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           fsr1h	equ	0xFE2
  1103                           fsr1l	equ	0xFE1
  1104                           indf2	equ	0xFDF
  1105                           fsr2h	equ	0xFDA
  1106                           fsr2l	equ	0xFD9
  1107                           status	equ	0xFD8
  1108                           
  1109 ;; *************** function _xmitPacket *****************
  1110 ;; Defined at:
  1111 ;;		line 17 in file "../transmitPacket.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  numBytes        2   14[COMRAM] unsigned short 
  1114 ;;  ptrDelay        2   16[COMRAM] PTR unsigned char 
  1115 ;;		 -> arrDataPacket(1024), 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  index           2   18[COMRAM] unsigned short 
  1118 ;;  delayLoop       1   21[COMRAM] unsigned char 
  1119 ;;  delayTime       1   20[COMRAM] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1129 ;;      Params:         4       0       0       0       0       0       0
  1130 ;;      Locals:         4       0       0       0       0       0       0
  1131 ;;      Temps:          0       0       0       0       0       0       0
  1132 ;;      Totals:         8       0       0       0       0       0       0
  1133 ;;Total ram usage:        8 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    1
  1136 ;; This function calls:
  1137 ;;		Nothing
  1138 ;; This function is called by:
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text1
  1144  000716                     __ptext1:
  1145                           	opt stack 0
  1146  000716                     _xmitPacket:
  1147                           	opt stack 29
  1148                           
  1149                           ;transmitPacket.c: 18: unsigned char delayTime, delayLoop;
  1150                           ;transmitPacket.c: 19: unsigned short index;
  1151                           ;transmitPacket.c: 21: LATAbits.LATA0 = 1;
  1152                           
  1153                           ;incstack = 0
  1154  000716  8089               	bsf	3977,0,c	;volatile
  1155                           
  1156                           ;transmitPacket.c: 22: delayLoop = 70;
  1157  000718  0E46               	movlw	70
  1158  00071A  6E16               	movwf	xmitPacket@delayLoop,c
  1159                           
  1160                           ;transmitPacket.c: 23: while (delayLoop) delayLoop--;
  1161  00071C  D001               	goto	l2072
  1162  00071E                     l2070:
  1163  00071E  0616               	decf	xmitPacket@delayLoop,f,c
  1164  000720                     l2072:
  1165  000720  5016               	movf	xmitPacket@delayLoop,w,c
  1166  000722  A4D8               	btfss	status,2,c
  1167  000724  D7FC               	goto	l2070
  1168                           
  1169                           ;transmitPacket.c: 24: LATAbits.LATA0 = 0;
  1170  000726  9089               	bcf	3977,0,c	;volatile
  1171                           
  1172                           ;transmitPacket.c: 26: index = 0;
  1173  000728  0E00               	movlw	0
  1174  00072A  6E14               	movwf	xmitPacket@index+1,c
  1175  00072C  0E00               	movlw	0
  1176  00072E  6E13               	movwf	xmitPacket@index,c
  1177                           
  1178                           ;transmitPacket.c: 27: while (index < numBytes) {
  1179  000730  D025               	goto	l2102
  1180  000732                     l2076:
  1181                           
  1182                           ;transmitPacket.c: 28: delayTime = ptrDelay[index];
  1183  000732  5013               	movf	xmitPacket@index,w,c
  1184  000734  2411               	addwf	xmitPacket@ptrDelay,w,c
  1185  000736  6ED9               	movwf	fsr2l,c
  1186  000738  5014               	movf	xmitPacket@index+1,w,c
  1187  00073A  2012               	addwfc	xmitPacket@ptrDelay+1,w,c
  1188  00073C  6EDA               	movwf	fsr2h,c
  1189  00073E  50DF               	movf	indf2,w,c
  1190  000740  6E15               	movwf	xmitPacket@delayTime,c
  1191                           
  1192                           ;transmitPacket.c: 30: if (delayTime == 0) {
  1193  000742  5015               	movf	xmitPacket@delayTime,w,c
  1194  000744  A4D8               	btfss	status,2,c
  1195  000746  D003               	goto	l2084
  1196                           
  1197                           ;transmitPacket.c: 31: LATAbits.LATA0 = 1;
  1198  000748  8089               	bsf	3977,0,c	;volatile
  1199                           
  1200                           ;transmitPacket.c: 32: delayLoop = 70;
  1201  00074A  0E46               	movlw	70
  1202  00074C  D00C               	goto	L2
  1203  00074E                     l2084:
  1204  00074E  0E02               	movlw	2
  1205  000750  1815               	xorwf	xmitPacket@delayTime,w,c
  1206  000752  A4D8               	btfss	status,2,c
  1207  000754  D003               	goto	l2090
  1208                           
  1209                           ;transmitPacket.c: 34: LATAbits.LATA0 = 1;
  1210  000756  8089               	bsf	3977,0,c	;volatile
  1211                           
  1212                           ;transmitPacket.c: 35: delayLoop = 233;
  1213  000758  0EE9               	movlw	233
  1214  00075A  D005               	goto	L2
  1215  00075C                     l2090:
  1216  00075C  0415               	decf	xmitPacket@delayTime,w,c
  1217  00075E  A4D8               	btfss	status,2,c
  1218  000760  D004               	goto	l265
  1219                           
  1220                           ;transmitPacket.c: 37: LATAbits.LATA0 = 0;
  1221  000762  9089               	bcf	3977,0,c	;volatile
  1222                           
  1223                           ;transmitPacket.c: 38: delayLoop = 80;
  1224  000764  0E50               	movlw	80
  1225  000766                     L2:
  1226  000766  6E16               	movwf	xmitPacket@delayLoop,c
  1227                           
  1228                           ;transmitPacket.c: 39: } else {
  1229  000768  D004               	goto	l2098
  1230  00076A                     l265:
  1231                           
  1232                           ;transmitPacket.c: 40: LATAbits.LATA0 = 0;
  1233  00076A  9089               	bcf	3977,0,c	;volatile
  1234                           
  1235                           ;transmitPacket.c: 41: delayLoop = 255;
  1236  00076C  6816               	setf	xmitPacket@delayLoop,c
  1237                           
  1238                           ;transmitPacket.c: 42: }
  1239                           ;transmitPacket.c: 43: while (delayLoop) delayLoop--;
  1240  00076E  D001               	goto	l2098
  1241  000770                     l2096:
  1242  000770  0616               	decf	xmitPacket@delayLoop,f,c
  1243  000772                     l2098:
  1244  000772  5016               	movf	xmitPacket@delayLoop,w,c
  1245  000774  A4D8               	btfss	status,2,c
  1246  000776  D7FC               	goto	l2096
  1247                           
  1248                           ;transmitPacket.c: 44: index++;
  1249  000778  4A13               	infsnz	xmitPacket@index,f,c
  1250  00077A  2A14               	incf	xmitPacket@index+1,f,c
  1251  00077C                     l2102:
  1252  00077C  500F               	movf	xmitPacket@numBytes,w,c
  1253  00077E  5C13               	subwf	xmitPacket@index,w,c
  1254  000780  5010               	movf	xmitPacket@numBytes+1,w,c
  1255  000782  5814               	subwfb	xmitPacket@index+1,w,c
  1256  000784  A0D8               	btfss	status,0,c
  1257  000786  D7D5               	goto	l2076
  1258                           
  1259                           ;transmitPacket.c: 45: }
  1260                           ;transmitPacket.c: 47: if (LATAbits.LATA0) LATAbits.LATA0 = 0;
  1261  000788  A089               	btfss	3977,0,c	;volatile
  1262  00078A  D002               	goto	l271
  1263  00078C  9089               	bcf	3977,0,c	;volatile
  1264  00078E  D001               	goto	l272
  1265  000790                     l271:
  1266                           
  1267                           ;transmitPacket.c: 48: else LATAbits.LATA0 = 1;
  1268  000790  8089               	bsf	3977,0,c	;volatile
  1269  000792                     l272:
  1270                           
  1271                           ;transmitPacket.c: 50: delayLoop = 0xFF;
  1272  000792  6816               	setf	xmitPacket@delayLoop,c
  1273                           
  1274                           ;transmitPacket.c: 51: while (delayLoop) delayLoop--;
  1275  000794  D001               	goto	l2108
  1276  000796                     l2106:
  1277  000796  0616               	decf	xmitPacket@delayLoop,f,c
  1278  000798                     l2108:
  1279  000798  5016               	movf	xmitPacket@delayLoop,w,c
  1280  00079A  A4D8               	btfss	status,2,c
  1281  00079C  D7FC               	goto	l2106
  1282                           
  1283                           ;transmitPacket.c: 53: if (LATAbits.LATA0) LATAbits.LATA0 = 0;
  1284  00079E  A089               	btfss	3977,0,c	;volatile
  1285  0007A0  D002               	goto	l276
  1286  0007A2  9089               	bcf	3977,0,c	;volatile
  1287  0007A4  D001               	goto	l277
  1288  0007A6                     l276:
  1289                           
  1290                           ;transmitPacket.c: 54: else LATAbits.LATA0 = 1;
  1291  0007A6  8089               	bsf	3977,0,c	;volatile
  1292  0007A8                     l277:
  1293                           
  1294                           ;transmitPacket.c: 56: delayLoop = 0xFF;
  1295  0007A8  6816               	setf	xmitPacket@delayLoop,c
  1296                           
  1297                           ;transmitPacket.c: 57: while (delayLoop) delayLoop--;
  1298  0007AA  D001               	goto	l2114
  1299  0007AC                     l2112:
  1300  0007AC  0616               	decf	xmitPacket@delayLoop,f,c
  1301  0007AE                     l2114:
  1302  0007AE  5016               	movf	xmitPacket@delayLoop,w,c
  1303  0007B0  A4D8               	btfss	status,2,c
  1304  0007B2  D7FC               	goto	l2112
  1305                           
  1306                           ;transmitPacket.c: 59: LATAbits.LATA0 = 0;
  1307  0007B4  9089               	bcf	3977,0,c	;volatile
  1308  0007B6  0012               	return		;funcret
  1309  0007B8                     __end_of_xmitPacket:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           prodh	equ	0xFF4
  1313                           prodl	equ	0xFF3
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1h	equ	0xFE2
  1318                           fsr1l	equ	0xFE1
  1319                           indf2	equ	0xFDF
  1320                           fsr2h	equ	0xFDA
  1321                           fsr2l	equ	0xFD9
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _xmitBreak *****************
  1325 ;; Defined at:
  1326 ;;		line 62 in file "../transmitPacket.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;		None
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  delayLoop       1   16[COMRAM] unsigned char 
  1331 ;;  delayTime       1   15[COMRAM] unsigned char 
  1332 ;;  numStartPuls    1   14[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1342 ;;      Params:         0       0       0       0       0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0
  1345 ;;      Totals:         3       0       0       0       0       0       0
  1346 ;;Total ram usage:        3 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    1
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text2
  1357  00066E                     __ptext2:
  1358                           	opt stack 0
  1359  00066E                     _xmitBreak:
  1360                           	opt stack 29
  1361                           
  1362                           ;transmitPacket.c: 63: unsigned char delayTime, delayLoop, numStartPulses;
  1363                           ;transmitPacket.c: 65: numStartPulses = 16;
  1364                           
  1365                           ;incstack = 0
  1366  00066E  0E10               	movlw	16
  1367  000670  6E0F               	movwf	xmitBreak@numStartPulses,c
  1368  000672                     l2002:
  1369                           
  1370                           ;transmitPacket.c: 68: LATAbits.LATA0 = 1;
  1371  000672  8089               	bsf	3977,0,c	;volatile
  1372                           
  1373                           ;transmitPacket.c: 69: delayLoop = 200;
  1374  000674  0EC8               	movlw	200
  1375  000676  6E11               	movwf	xmitBreak@delayLoop,c
  1376                           
  1377                           ;transmitPacket.c: 70: while (delayLoop) delayLoop--;
  1378  000678  D001               	goto	l2006
  1379  00067A                     l2004:
  1380  00067A  0611               	decf	xmitBreak@delayLoop,f,c
  1381  00067C                     l2006:
  1382  00067C  5011               	movf	xmitBreak@delayLoop,w,c
  1383  00067E  A4D8               	btfss	status,2,c
  1384  000680  D7FC               	goto	l2004
  1385                           
  1386                           ;transmitPacket.c: 72: LATAbits.LATA0 = 0;
  1387  000682  9089               	bcf	3977,0,c	;volatile
  1388                           
  1389                           ;transmitPacket.c: 73: delayLoop = 200;
  1390  000684  0EC8               	movlw	200
  1391  000686  6E11               	movwf	xmitBreak@delayLoop,c
  1392                           
  1393                           ;transmitPacket.c: 74: while (delayLoop) delayLoop--;
  1394  000688  D001               	goto	l2012
  1395  00068A                     l2010:
  1396  00068A  0611               	decf	xmitBreak@delayLoop,f,c
  1397  00068C                     l2012:
  1398  00068C  5011               	movf	xmitBreak@delayLoop,w,c
  1399  00068E  A4D8               	btfss	status,2,c
  1400  000690  D7FC               	goto	l2010
  1401                           
  1402                           ;transmitPacket.c: 76: numStartPulses--;
  1403  000692  060F               	decf	xmitBreak@numStartPulses,f,c
  1404                           
  1405                           ;transmitPacket.c: 77: } while (numStartPulses);
  1406  000694  500F               	movf	xmitBreak@numStartPulses,w,c
  1407  000696  A4D8               	btfss	status,2,c
  1408  000698  D7EC               	goto	l2002
  1409                           
  1410                           ;transmitPacket.c: 80: LATAbits.LATA0 = 1;
  1411  00069A  8089               	bsf	3977,0,c	;volatile
  1412                           
  1413                           ;transmitPacket.c: 81: delayTime = 12;
  1414  00069C  0E0C               	movlw	12
  1415  00069E  6E10               	movwf	xmitBreak@delayTime,c
  1416                           
  1417                           ;transmitPacket.c: 82: while (delayTime) {
  1418  0006A0  D008               	goto	l2028
  1419  0006A2                     l2020:
  1420                           
  1421                           ;transmitPacket.c: 83: delayLoop = 74;
  1422  0006A2  0E4A               	movlw	74
  1423  0006A4  6E11               	movwf	xmitBreak@delayLoop,c
  1424                           
  1425                           ;transmitPacket.c: 84: while (delayLoop)delayLoop--;
  1426  0006A6  D001               	goto	l2024
  1427  0006A8                     l2022:
  1428  0006A8  0611               	decf	xmitBreak@delayLoop,f,c
  1429  0006AA                     l2024:
  1430  0006AA  5011               	movf	xmitBreak@delayLoop,w,c
  1431  0006AC  A4D8               	btfss	status,2,c
  1432  0006AE  D7FC               	goto	l2022
  1433                           
  1434                           ;transmitPacket.c: 85: delayTime--;
  1435  0006B0  0610               	decf	xmitBreak@delayTime,f,c
  1436  0006B2                     l2028:
  1437  0006B2  5010               	movf	xmitBreak@delayTime,w,c
  1438  0006B4  A4D8               	btfss	status,2,c
  1439  0006B6  D7F5               	goto	l2020
  1440                           
  1441                           ;transmitPacket.c: 86: }
  1442                           ;transmitPacket.c: 89: LATAbits.LATA0 = 0;
  1443  0006B8  9089               	bcf	3977,0,c	;volatile
  1444                           
  1445                           ;transmitPacket.c: 90: delayTime = 13;
  1446  0006BA  0E0D               	movlw	13
  1447  0006BC  6E10               	movwf	xmitBreak@delayTime,c
  1448                           
  1449                           ;transmitPacket.c: 91: while (delayTime) {
  1450  0006BE  D008               	goto	l2040
  1451  0006C0                     l2032:
  1452                           
  1453                           ;transmitPacket.c: 92: delayLoop = 60;
  1454  0006C0  0E3C               	movlw	60
  1455  0006C2  6E11               	movwf	xmitBreak@delayLoop,c
  1456                           
  1457                           ;transmitPacket.c: 93: while (delayLoop)delayLoop--;
  1458  0006C4  D001               	goto	l2036
  1459  0006C6                     l2034:
  1460  0006C6  0611               	decf	xmitBreak@delayLoop,f,c
  1461  0006C8                     l2036:
  1462  0006C8  5011               	movf	xmitBreak@delayLoop,w,c
  1463  0006CA  A4D8               	btfss	status,2,c
  1464  0006CC  D7FC               	goto	l2034
  1465                           
  1466                           ;transmitPacket.c: 94: delayTime--;
  1467  0006CE  0610               	decf	xmitBreak@delayTime,f,c
  1468  0006D0                     l2040:
  1469  0006D0  5010               	movf	xmitBreak@delayTime,w,c
  1470  0006D2  A4D8               	btfss	status,2,c
  1471  0006D4  D7F5               	goto	l2032
  1472                           
  1473                           ;transmitPacket.c: 95: }
  1474                           ;transmitPacket.c: 98: LATAbits.LATA0 = 1;
  1475  0006D6  8089               	bsf	3977,0,c	;volatile
  1476                           
  1477                           ;transmitPacket.c: 99: delayTime = 5;
  1478  0006D8  0E05               	movlw	5
  1479  0006DA  6E10               	movwf	xmitBreak@delayTime,c
  1480                           
  1481                           ;transmitPacket.c: 100: while (delayTime) {
  1482  0006DC  D008               	goto	l2052
  1483  0006DE                     l2044:
  1484                           
  1485                           ;transmitPacket.c: 101: delayLoop = 74;
  1486  0006DE  0E4A               	movlw	74
  1487  0006E0  6E11               	movwf	xmitBreak@delayLoop,c
  1488                           
  1489                           ;transmitPacket.c: 102: while (delayLoop)delayLoop--;
  1490  0006E2  D001               	goto	l2048
  1491  0006E4                     l2046:
  1492  0006E4  0611               	decf	xmitBreak@delayLoop,f,c
  1493  0006E6                     l2048:
  1494  0006E6  5011               	movf	xmitBreak@delayLoop,w,c
  1495  0006E8  A4D8               	btfss	status,2,c
  1496  0006EA  D7FC               	goto	l2046
  1497                           
  1498                           ;transmitPacket.c: 103: delayTime--;
  1499  0006EC  0610               	decf	xmitBreak@delayTime,f,c
  1500  0006EE                     l2052:
  1501  0006EE  5010               	movf	xmitBreak@delayTime,w,c
  1502  0006F0  A4D8               	btfss	status,2,c
  1503  0006F2  D7F5               	goto	l2044
  1504                           
  1505                           ;transmitPacket.c: 104: }
  1506                           ;transmitPacket.c: 107: LATAbits.LATA0 = 0;
  1507  0006F4  9089               	bcf	3977,0,c	;volatile
  1508                           
  1509                           ;transmitPacket.c: 108: delayTime = 18;
  1510  0006F6  0E12               	movlw	18
  1511  0006F8  6E10               	movwf	xmitBreak@delayTime,c
  1512                           
  1513                           ;transmitPacket.c: 109: while (delayTime) {
  1514  0006FA  D008               	goto	l2064
  1515  0006FC                     l2056:
  1516                           
  1517                           ;transmitPacket.c: 110: delayLoop = 20;
  1518  0006FC  0E14               	movlw	20
  1519  0006FE  6E11               	movwf	xmitBreak@delayLoop,c
  1520                           
  1521                           ;transmitPacket.c: 111: while (delayLoop)delayLoop--;
  1522  000700  D001               	goto	l2060
  1523  000702                     l2058:
  1524  000702  0611               	decf	xmitBreak@delayLoop,f,c
  1525  000704                     l2060:
  1526  000704  5011               	movf	xmitBreak@delayLoop,w,c
  1527  000706  A4D8               	btfss	status,2,c
  1528  000708  D7FC               	goto	l2058
  1529                           
  1530                           ;transmitPacket.c: 112: delayTime--;
  1531  00070A  0610               	decf	xmitBreak@delayTime,f,c
  1532  00070C                     l2064:
  1533  00070C  5010               	movf	xmitBreak@delayTime,w,c
  1534  00070E  A4D8               	btfss	status,2,c
  1535  000710  D7F5               	goto	l2056
  1536                           
  1537                           ;transmitPacket.c: 113: }
  1538                           ;transmitPacket.c: 114: PORTBbits.RB5 = 1;
  1539  000712  8A81               	bsf	3969,5,c	;volatile
  1540  000714  0012               	return		;funcret
  1541  000716                     __end_of_xmitBreak:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           prodh	equ	0xFF4
  1545                           prodl	equ	0xFF3
  1546                           postinc0	equ	0xFEE
  1547                           wreg	equ	0xFE8
  1548                           postdec1	equ	0xFE5
  1549                           fsr1h	equ	0xFE2
  1550                           fsr1l	equ	0xFE1
  1551                           indf2	equ	0xFDF
  1552                           fsr2h	equ	0xFDA
  1553                           fsr2l	equ	0xFD9
  1554                           status	equ	0xFD8
  1555                           
  1556 ;; *************** function _initialize_I2C *****************
  1557 ;; Defined at:
  1558 ;;		line 194 in file "../MMA8452_18F.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;		None
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  1    wreg      void 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1572 ;;      Params:         0       0       0       0       0       0       0
  1573 ;;      Locals:         0       0       0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0       0       0
  1575 ;;      Totals:         0       0       0       0       0       0       0
  1576 ;;Total ram usage:        0 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    1
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_main
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text3
  1587  000AA0                     __ptext3:
  1588                           	opt stack 0
  1589  000AA0                     _initialize_I2C:
  1590                           	opt stack 29
  1591                           
  1592                           ;MMA8452_18F.c: 195: SSPCON1 = 0x00;
  1593                           
  1594                           ;incstack = 0
  1595  000AA0  0E00               	movlw	0
  1596  000AA2  6EC6               	movwf	4038,c	;volatile
  1597                           
  1598                           ;MMA8452_18F.c: 196: SSPCON1bits.SSPEN = 1;
  1599  000AA4  8AC6               	bsf	4038,5,c	;volatile
  1600                           
  1601                           ;MMA8452_18F.c: 197: SSPCON1bits.SSPM3 = 1;
  1602  000AA6  86C6               	bsf	4038,3,c	;volatile
  1603                           
  1604                           ;MMA8452_18F.c: 198: SSPCON1bits.SSPM2 = 0;
  1605  000AA8  94C6               	bcf	4038,2,c	;volatile
  1606                           
  1607                           ;MMA8452_18F.c: 199: SSPCON1bits.SSPM1 = 0;
  1608  000AAA  92C6               	bcf	4038,1,c	;volatile
  1609                           
  1610                           ;MMA8452_18F.c: 200: SSPCON1bits.SSPM0 = 0;
  1611  000AAC  90C6               	bcf	4038,0,c	;volatile
  1612                           
  1613                           ;MMA8452_18F.c: 201: SSPCON1bits.CKP = 1;
  1614  000AAE  88C6               	bsf	4038,4,c	;volatile
  1615                           
  1616                           ;MMA8452_18F.c: 202: SSPADD = 9;
  1617  000AB0  0E09               	movlw	9
  1618  000AB2  6EC8               	movwf	4040,c	;volatile
  1619                           
  1620                           ;MMA8452_18F.c: 203: SSPSTAT = 0;
  1621  000AB4  0E00               	movlw	0
  1622  000AB6  6EC7               	movwf	4039,c	;volatile
  1623  000AB8  0012               	return		;funcret
  1624  000ABA                     __end_of_initialize_I2C:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           prodh	equ	0xFF4
  1628                           prodl	equ	0xFF3
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1h	equ	0xFE2
  1633                           fsr1l	equ	0xFE1
  1634                           indf2	equ	0xFDF
  1635                           fsr2h	equ	0xFDA
  1636                           fsr2l	equ	0xFD9
  1637                           status	equ	0xFD8
  1638                           
  1639 ;; *************** function _initMMA8452 *****************
  1640 ;; Defined at:
  1641 ;;		line 102 in file "../MMA8452_18F.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  accelData       4   32[COMRAM] unsigned char [4]
  1646 ;;  commandByte     1   36[COMRAM] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      unsigned char 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1656 ;;      Params:         0       0       0       0       0       0       0
  1657 ;;      Locals:         5       0       0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0
  1659 ;;      Totals:         5       0       0       0       0       0       0
  1660 ;;Total ram usage:        5 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    5
  1663 ;; This function calls:
  1664 ;;		_readRegisters
  1665 ;;		_writeByteToRegister
  1666 ;; This function is called by:
  1667 ;;		_main
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text4
  1672  000096                     __ptext4:
  1673                           	opt stack 0
  1674  000096                     _initMMA8452:
  1675                           	opt stack 25
  1676                           
  1677                           ;MMA8452_18F.c: 103: unsigned char accelData[4] = {0, 0, 0, 0};
  1678                           
  1679                           ;incstack = 0
  1680  000096  C03B  F021         	movff	initMMA8452@F2758,initMMA8452@accelData
  1681  00009A  C03C  F022         	movff	initMMA8452@F2758+1,initMMA8452@accelData+1
  1682  00009E  C03D  F023         	movff	initMMA8452@F2758+2,initMMA8452@accelData+2
  1683  0000A2  C03E  F024         	movff	initMMA8452@F2758+3,initMMA8452@accelData+3
  1684                           
  1685                           ;MMA8452_18F.c: 104: unsigned char commandByte;
  1686                           ;MMA8452_18F.c: 110: if (!readRegisters(0x1D, 0x2A, 1, accelData)) return (0);
  1687  0000A6  0E2A               	movlw	42
  1688  0000A8  6E15               	movwf	readRegisters@deviceREGISTER,c
  1689  0000AA  0E01               	movlw	1
  1690  0000AC  6E16               	movwf	readRegisters@numRegisters,c
  1691  0000AE  0E21               	movlw	low initMMA8452@accelData
  1692  0000B0  6E17               	movwf	readRegisters@registerPtr,c
  1693  0000B2  0E00               	movlw	high initMMA8452@accelData
  1694  0000B4  6E18               	movwf	readRegisters@registerPtr+1,c
  1695  0000B6  0E1D               	movlw	29
  1696  0000B8  ECDC  F003         	call	_readRegisters
  1697  0000BC  0900               	iorlw	0
  1698  0000BE  A4D8               	btfss	status,2,c
  1699  0000C0  D002               	goto	l184
  1700  0000C2  0E00               	movlw	0
  1701  0000C4  0012               	return	
  1702  0000C6                     l184:
  1703                           
  1704                           ;MMA8452_18F.c: 111: commandByte = accelData[0];
  1705  0000C6  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1706                           
  1707                           ;MMA8452_18F.c: 112: commandByte &= 0xFE;
  1708  0000CA  9025               	bcf	initMMA8452@commandByte,0,c
  1709                           
  1710                           ;MMA8452_18F.c: 113: if (!writeByteToRegister(0x1D, 0x2A, commandByte)) return (0);
  1711  0000CC  0E2A               	movlw	42
  1712  0000CE  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1713  0000D0  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1714  0000D4  0E1D               	movlw	29
  1715  0000D6  EC81  F004         	call	_writeByteToRegister
  1716  0000DA  0900               	iorlw	0
  1717  0000DC  A4D8               	btfss	status,2,c
  1718  0000DE  D002               	goto	l1778
  1719  0000E0  0E00               	movlw	0
  1720  0000E2  0012               	return	
  1721  0000E4                     l1778:
  1722                           
  1723                           ;MMA8452_18F.c: 116: if (!readRegisters(0x1D, 0x2B, 1, accelData)) return (0);
  1724  0000E4  0E2B               	movlw	43
  1725  0000E6  6E15               	movwf	readRegisters@deviceREGISTER,c
  1726  0000E8  0E01               	movlw	1
  1727  0000EA  6E16               	movwf	readRegisters@numRegisters,c
  1728  0000EC  0E21               	movlw	low initMMA8452@accelData
  1729  0000EE  6E17               	movwf	readRegisters@registerPtr,c
  1730  0000F0  0E00               	movlw	high initMMA8452@accelData
  1731  0000F2  6E18               	movwf	readRegisters@registerPtr+1,c
  1732  0000F4  0E1D               	movlw	29
  1733  0000F6  ECDC  F003         	call	_readRegisters
  1734  0000FA  0900               	iorlw	0
  1735  0000FC  A4D8               	btfss	status,2,c
  1736  0000FE  D002               	goto	l187
  1737  000100  0E00               	movlw	0
  1738  000102  0012               	return	
  1739  000104                     l187:
  1740                           
  1741                           ;MMA8452_18F.c: 117: commandByte = accelData[0];
  1742  000104  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1743                           
  1744                           ;MMA8452_18F.c: 118: commandByte | = 0x04;
  1745  000108  8425               	bsf	initMMA8452@commandByte,2,c
  1746                           
  1747                           ;MMA8452_18F.c: 119: if (!writeByteToRegister(0x1D, 0x2B, commandByte)) return (0);
  1748  00010A  0E2B               	movlw	43
  1749  00010C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1750  00010E  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1751  000112  0E1D               	movlw	29
  1752  000114  EC81  F004         	call	_writeByteToRegister
  1753  000118  0900               	iorlw	0
  1754  00011A  A4D8               	btfss	status,2,c
  1755  00011C  D002               	goto	l1792
  1756  00011E  0E00               	movlw	0
  1757  000120  0012               	return	
  1758  000122                     l1792:
  1759                           
  1760                           ;MMA8452_18F.c: 122: if (!readRegisters(0x1D, 0x2A, 1, accelData)) return (0);
  1761  000122  0E2A               	movlw	42
  1762  000124  6E15               	movwf	readRegisters@deviceREGISTER,c
  1763  000126  0E01               	movlw	1
  1764  000128  6E16               	movwf	readRegisters@numRegisters,c
  1765  00012A  0E21               	movlw	low initMMA8452@accelData
  1766  00012C  6E17               	movwf	readRegisters@registerPtr,c
  1767  00012E  0E00               	movlw	high initMMA8452@accelData
  1768  000130  6E18               	movwf	readRegisters@registerPtr+1,c
  1769  000132  0E1D               	movlw	29
  1770  000134  ECDC  F003         	call	_readRegisters
  1771  000138  0900               	iorlw	0
  1772  00013A  A4D8               	btfss	status,2,c
  1773  00013C  D002               	goto	l189
  1774  00013E  0E00               	movlw	0
  1775  000140  0012               	return	
  1776  000142                     l189:
  1777                           
  1778                           ;MMA8452_18F.c: 123: commandByte = accelData[0];
  1779  000142  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1780                           
  1781                           ;MMA8452_18F.c: 124: commandByte &= 0x5E;
  1782  000146  0E5E               	movlw	94
  1783  000148  1625               	andwf	initMMA8452@commandByte,f,c
  1784                           
  1785                           ;MMA8452_18F.c: 126: commandByte |= 0b01011000;
  1786  00014A  0E58               	movlw	88
  1787  00014C  1225               	iorwf	initMMA8452@commandByte,f,c
  1788                           
  1789                           ;MMA8452_18F.c: 127: if (!writeByteToRegister(0x1D, 0x2A, commandByte)) return (0);
  1790  00014E  0E2A               	movlw	42
  1791  000150  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1792  000152  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1793  000156  0E1D               	movlw	29
  1794  000158  EC81  F004         	call	_writeByteToRegister
  1795  00015C  0900               	iorlw	0
  1796  00015E  A4D8               	btfss	status,2,c
  1797  000160  D002               	goto	l1806
  1798  000162  0E00               	movlw	0
  1799  000164  0012               	return	
  1800  000166                     l1806:
  1801                           
  1802                           ;MMA8452_18F.c: 131: if (!readRegisters(0x1D, 0x2B, 1, accelData)) return (0);
  1803  000166  0E2B               	movlw	43
  1804  000168  6E15               	movwf	readRegisters@deviceREGISTER,c
  1805  00016A  0E01               	movlw	1
  1806  00016C  6E16               	movwf	readRegisters@numRegisters,c
  1807  00016E  0E21               	movlw	low initMMA8452@accelData
  1808  000170  6E17               	movwf	readRegisters@registerPtr,c
  1809  000172  0E00               	movlw	high initMMA8452@accelData
  1810  000174  6E18               	movwf	readRegisters@registerPtr+1,c
  1811  000176  0E1D               	movlw	29
  1812  000178  ECDC  F003         	call	_readRegisters
  1813  00017C  0900               	iorlw	0
  1814  00017E  A4D8               	btfss	status,2,c
  1815  000180  D002               	goto	l191
  1816  000182  0E00               	movlw	0
  1817  000184  0012               	return	
  1818  000186                     l191:
  1819                           
  1820                           ;MMA8452_18F.c: 132: commandByte = accelData[0];
  1821  000186  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1822                           
  1823                           ;MMA8452_18F.c: 133: commandByte &= 0xE4;
  1824  00018A  0EE4               	movlw	228
  1825  00018C  1625               	andwf	initMMA8452@commandByte,f,c
  1826                           
  1827                           ;MMA8452_18F.c: 134: commandByte |= 0x1A;
  1828  00018E  0E1A               	movlw	26
  1829  000190  1225               	iorwf	initMMA8452@commandByte,f,c
  1830                           
  1831                           ;MMA8452_18F.c: 135: if (!writeByteToRegister(0x1D, 0x2B, commandByte)) return (0);
  1832  000192  0E2B               	movlw	43
  1833  000194  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1834  000196  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1835  00019A  0E1D               	movlw	29
  1836  00019C  EC81  F004         	call	_writeByteToRegister
  1837  0001A0  0900               	iorlw	0
  1838  0001A2  A4D8               	btfss	status,2,c
  1839  0001A4  D002               	goto	l1820
  1840  0001A6  0E00               	movlw	0
  1841  0001A8  0012               	return	
  1842  0001AA                     l1820:
  1843                           
  1844                           ;MMA8452_18F.c: 138: if (!writeByteToRegister(0x1D, 0x2D, 0x84)) return (0);
  1845  0001AA  0E2D               	movlw	45
  1846  0001AC  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1847  0001AE  0E84               	movlw	132
  1848  0001B0  6E14               	movwf	writeByteToRegister@dataByte,c
  1849  0001B2  0E1D               	movlw	29
  1850  0001B4  EC81  F004         	call	_writeByteToRegister
  1851  0001B8  0900               	iorlw	0
  1852  0001BA  A4D8               	btfss	status,2,c
  1853  0001BC  D002               	goto	l1826
  1854  0001BE  0E00               	movlw	0
  1855  0001C0  0012               	return	
  1856  0001C2                     l1826:
  1857                           
  1858                           ;MMA8452_18F.c: 141: if (!writeByteToRegister(0x1D, 0x2E, 0x04)) return (0);
  1859  0001C2  0E2E               	movlw	46
  1860  0001C4  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1861  0001C6  0E04               	movlw	4
  1862  0001C8  6E14               	movwf	writeByteToRegister@dataByte,c
  1863  0001CA  0E1D               	movlw	29
  1864  0001CC  EC81  F004         	call	_writeByteToRegister
  1865  0001D0  0900               	iorlw	0
  1866  0001D2  A4D8               	btfss	status,2,c
  1867  0001D4  D002               	goto	l1832
  1868  0001D6  0E00               	movlw	0
  1869  0001D8  0012               	return	
  1870  0001DA                     l1832:
  1871                           
  1872                           ;MMA8452_18F.c: 144: if (!writeByteToRegister(0x1D, 0x2C, 0x0A)) return (0);
  1873  0001DA  0E2C               	movlw	44
  1874  0001DC  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1875  0001DE  0E0A               	movlw	10
  1876  0001E0  6E14               	movwf	writeByteToRegister@dataByte,c
  1877  0001E2  0E1D               	movlw	29
  1878  0001E4  EC81  F004         	call	_writeByteToRegister
  1879  0001E8  0900               	iorlw	0
  1880  0001EA  A4D8               	btfss	status,2,c
  1881  0001EC  D002               	goto	l1838
  1882  0001EE  0E00               	movlw	0
  1883  0001F0  0012               	return	
  1884  0001F2                     l1838:
  1885                           
  1886                           ;MMA8452_18F.c: 147: if (!readRegisters(0x1D, 0x0E, 1, accelData)) return (0);
  1887  0001F2  0E0E               	movlw	14
  1888  0001F4  6E15               	movwf	readRegisters@deviceREGISTER,c
  1889  0001F6  0E01               	movlw	1
  1890  0001F8  6E16               	movwf	readRegisters@numRegisters,c
  1891  0001FA  0E21               	movlw	low initMMA8452@accelData
  1892  0001FC  6E17               	movwf	readRegisters@registerPtr,c
  1893  0001FE  0E00               	movlw	high initMMA8452@accelData
  1894  000200  6E18               	movwf	readRegisters@registerPtr+1,c
  1895  000202  0E1D               	movlw	29
  1896  000204  ECDC  F003         	call	_readRegisters
  1897  000208  0900               	iorlw	0
  1898  00020A  A4D8               	btfss	status,2,c
  1899  00020C  D002               	goto	l196
  1900  00020E  0E00               	movlw	0
  1901  000210  0012               	return	
  1902  000212                     l196:
  1903                           
  1904                           ;MMA8452_18F.c: 148: commandByte = accelData[0];
  1905  000212  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1906                           
  1907                           ;MMA8452_18F.c: 149: commandByte &= 0xFC;
  1908  000216  0EFC               	movlw	252
  1909  000218  1625               	andwf	initMMA8452@commandByte,f,c
  1910                           
  1911                           ;MMA8452_18F.c: 150: if (!writeByteToRegister(0x1D, 0x0E, commandByte)) return (0);
  1912  00021A  0E0E               	movlw	14
  1913  00021C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1914  00021E  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1915  000222  0E1D               	movlw	29
  1916  000224  EC81  F004         	call	_writeByteToRegister
  1917  000228  0900               	iorlw	0
  1918  00022A  A4D8               	btfss	status,2,c
  1919  00022C  D002               	goto	l1852
  1920  00022E  0E00               	movlw	0
  1921  000230  0012               	return	
  1922  000232                     l1852:
  1923                           
  1924                           ;MMA8452_18F.c: 152: if (!writeByteToRegister(0x1D, 0x29, 64)) return (0);
  1925  000232  0E29               	movlw	41
  1926  000234  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1927  000236  0E40               	movlw	64
  1928  000238  6E14               	movwf	writeByteToRegister@dataByte,c
  1929  00023A  0E1D               	movlw	29
  1930  00023C  EC81  F004         	call	_writeByteToRegister
  1931  000240  0900               	iorlw	0
  1932  000242  A4D8               	btfss	status,2,c
  1933  000244  D002               	goto	l1858
  1934  000246  0E00               	movlw	0
  1935  000248  0012               	return	
  1936  00024A                     l1858:
  1937                           
  1938                           ;MMA8452_18F.c: 154: if (!writeByteToRegister(0x1D, 0x15, 0xF8)) return (0);
  1939  00024A  0E15               	movlw	21
  1940  00024C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1941  00024E  0EF8               	movlw	248
  1942  000250  6E14               	movwf	writeByteToRegister@dataByte,c
  1943  000252  0E1D               	movlw	29
  1944  000254  EC81  F004         	call	_writeByteToRegister
  1945  000258  0900               	iorlw	0
  1946  00025A  A4D8               	btfss	status,2,c
  1947  00025C  D002               	goto	l1864
  1948  00025E  0E00               	movlw	0
  1949  000260  0012               	return	
  1950  000262                     l1864:
  1951                           
  1952                           ;MMA8452_18F.c: 155: if (!writeByteToRegister(0x1D, 0x17, 0x18)) return (0);
  1953  000262  0E17               	movlw	23
  1954  000264  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1955  000266  0E18               	movlw	24
  1956  000268  6E14               	movwf	writeByteToRegister@dataByte,c
  1957  00026A  0E1D               	movlw	29
  1958  00026C  EC81  F004         	call	_writeByteToRegister
  1959  000270  0900               	iorlw	0
  1960  000272  A4D8               	btfss	status,2,c
  1961  000274  D002               	goto	l1870
  1962  000276  0E00               	movlw	0
  1963  000278  0012               	return	
  1964  00027A                     l1870:
  1965                           
  1966                           ;MMA8452_18F.c: 156: if (!writeByteToRegister(0x1D, 0x18, 0x04)) return (0);
  1967  00027A  0E18               	movlw	24
  1968  00027C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1969  00027E  0E04               	movlw	4
  1970  000280  6E14               	movwf	writeByteToRegister@dataByte,c
  1971  000282  0E1D               	movlw	29
  1972  000284  EC81  F004         	call	_writeByteToRegister
  1973  000288  0900               	iorlw	0
  1974  00028A  A4D8               	btfss	status,2,c
  1975  00028C  D002               	goto	l1876
  1976  00028E  0E00               	movlw	0
  1977  000290  0012               	return	
  1978  000292                     l1876:
  1979                           
  1980                           ;MMA8452_18F.c: 158: if (!readRegisters(0x1D, 0x0C, 1, accelData)) return (0);
  1981  000292  0E0C               	movlw	12
  1982  000294  6E15               	movwf	readRegisters@deviceREGISTER,c
  1983  000296  0E01               	movlw	1
  1984  000298  6E16               	movwf	readRegisters@numRegisters,c
  1985  00029A  0E21               	movlw	low initMMA8452@accelData
  1986  00029C  6E17               	movwf	readRegisters@registerPtr,c
  1987  00029E  0E00               	movlw	high initMMA8452@accelData
  1988  0002A0  6E18               	movwf	readRegisters@registerPtr+1,c
  1989  0002A2  0E1D               	movlw	29
  1990  0002A4  ECDC  F003         	call	_readRegisters
  1991  0002A8  0900               	iorlw	0
  1992  0002AA  A4D8               	btfss	status,2,c
  1993  0002AC  D002               	goto	l1882
  1994  0002AE  0E00               	movlw	0
  1995  0002B0  0012               	return	
  1996  0002B2                     l1882:
  1997                           
  1998                           ;MMA8452_18F.c: 160: if (!readRegisters(0x1D, 0x2A, 1, accelData)) return (0);
  1999  0002B2  0E2A               	movlw	42
  2000  0002B4  6E15               	movwf	readRegisters@deviceREGISTER,c
  2001  0002B6  0E01               	movlw	1
  2002  0002B8  6E16               	movwf	readRegisters@numRegisters,c
  2003  0002BA  0E21               	movlw	low initMMA8452@accelData
  2004  0002BC  6E17               	movwf	readRegisters@registerPtr,c
  2005  0002BE  0E00               	movlw	high initMMA8452@accelData
  2006  0002C0  6E18               	movwf	readRegisters@registerPtr+1,c
  2007  0002C2  0E1D               	movlw	29
  2008  0002C4  ECDC  F003         	call	_readRegisters
  2009  0002C8  0900               	iorlw	0
  2010  0002CA  A4D8               	btfss	status,2,c
  2011  0002CC  D002               	goto	l203
  2012  0002CE  0E00               	movlw	0
  2013  0002D0  0012               	return	
  2014  0002D2                     l203:
  2015                           
  2016                           ;MMA8452_18F.c: 161: commandByte = accelData[0];
  2017  0002D2  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  2018                           
  2019                           ;MMA8452_18F.c: 162: commandByte |= 0x01;
  2020  0002D6  8025               	bsf	initMMA8452@commandByte,0,c
  2021                           
  2022                           ;MMA8452_18F.c: 163: if (!writeByteToRegister(0x1D, 0x2A, commandByte)) return (0);
  2023  0002D8  0E2A               	movlw	42
  2024  0002DA  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  2025  0002DC  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  2026  0002E0  0E1D               	movlw	29
  2027  0002E2  EC81  F004         	call	_writeByteToRegister
  2028  0002E6  0900               	iorlw	0
  2029  0002E8  A4D8               	btfss	status,2,c
  2030  0002EA  D002               	goto	l1896
  2031  0002EC  0E00               	movlw	0
  2032  0002EE  0012               	return	
  2033  0002F0                     l1896:
  2034                           
  2035                           ;MMA8452_18F.c: 165: return (!0);
  2036  0002F0  0E01               	movlw	1
  2037  0002F2  0012               	return	
  2038  0002F4                     __end_of_initMMA8452:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           prodh	equ	0xFF4
  2042                           prodl	equ	0xFF3
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1h	equ	0xFE2
  2047                           fsr1l	equ	0xFE1
  2048                           indf2	equ	0xFDF
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _writeByteToRegister *****************
  2054 ;; Defined at:
  2055 ;;		line 53 in file "../MMA8452_18F.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  deviceID        1    wreg     unsigned char 
  2058 ;;  deviceREGIST    1   18[COMRAM] unsigned char 
  2059 ;;  dataByte        1   19[COMRAM] unsigned char 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  deviceID        1   20[COMRAM] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      unsigned char 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2071 ;;      Params:         2       0       0       0       0       0       0
  2072 ;;      Locals:         1       0       0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0
  2074 ;;      Totals:         3       0       0       0       0       0       0
  2075 ;;Total ram usage:        3 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    3
  2078 ;; This function calls:
  2079 ;;		_i2c_GetAcknowledge
  2080 ;;		_i2c_SendByte
  2081 ;;		_i2c_SendControlByte
  2082 ;;		_i2c_Start
  2083 ;;		_i2c_Stop
  2084 ;; This function is called by:
  2085 ;;		_initMMA8452
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text5
  2090  000902                     __ptext5:
  2091                           	opt stack 0
  2092  000902                     _writeByteToRegister:
  2093                           	opt stack 26
  2094                           
  2095                           ;incstack = 0
  2096                           ;writeByteToRegister@deviceID stored from wreg
  2097  000902  6E15               	movwf	writeByteToRegister@deviceID,c
  2098                           
  2099                           ;MMA8452_18F.c: 55: i2c_Start();
  2100  000904  EC86  F005         	call	_i2c_Start	;wreg free
  2101                           
  2102                           ;MMA8452_18F.c: 58: i2c_SendControlByte(deviceID << 1, 0x00);
  2103  000908  0E00               	movlw	0
  2104  00090A  6E10               	movwf	i2c_SendControlByte@direction,c
  2105  00090C  5015               	movf	writeByteToRegister@deviceID,w,c
  2106  00090E  2415               	addwf	writeByteToRegister@deviceID,w,c
  2107  000910  EC68  F005         	call	_i2c_SendControlByte
  2108                           
  2109                           ;MMA8452_18F.c: 61: if (i2c_GetAcknowledge() == 1) return (0);
  2110  000914  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2111  000918  06E8               	decf	wreg,f,c
  2112  00091A  A4D8               	btfss	status,2,c
  2113  00091C  D002               	goto	l1708
  2114  00091E  0E00               	movlw	0
  2115  000920  0012               	return	
  2116  000922                     l1708:
  2117                           
  2118                           ;MMA8452_18F.c: 64: i2c_SendByte(deviceREGISTER);
  2119  000922  5013               	movf	writeByteToRegister@deviceREGISTER,w,c
  2120  000924  EC70  F005         	call	_i2c_SendByte
  2121                           
  2122                           ;MMA8452_18F.c: 67: if (i2c_GetAcknowledge() == 1) return (0);
  2123  000928  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2124  00092C  06E8               	decf	wreg,f,c
  2125  00092E  A4D8               	btfss	status,2,c
  2126  000930  D002               	goto	l1714
  2127  000932  0E00               	movlw	0
  2128  000934  0012               	return	
  2129  000936                     l1714:
  2130                           
  2131                           ;MMA8452_18F.c: 70: i2c_SendByte(dataByte);
  2132  000936  5014               	movf	writeByteToRegister@dataByte,w,c
  2133  000938  EC70  F005         	call	_i2c_SendByte
  2134                           
  2135                           ;MMA8452_18F.c: 73: if (i2c_GetAcknowledge() == 1) return (0);
  2136  00093C  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2137  000940  06E8               	decf	wreg,f,c
  2138  000942  A4D8               	btfss	status,2,c
  2139  000944  D002               	goto	l1720
  2140  000946  0E00               	movlw	0
  2141  000948  0012               	return	
  2142  00094A                     l1720:
  2143                           
  2144                           ;MMA8452_18F.c: 76: i2c_Stop();
  2145  00094A  EC8B  F005         	call	_i2c_Stop	;wreg free
  2146                           
  2147                           ;MMA8452_18F.c: 78: return (!0);
  2148  00094E  0E01               	movlw	1
  2149  000950  0012               	return	
  2150  000952                     __end_of_writeByteToRegister:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           prodh	equ	0xFF4
  2154                           prodl	equ	0xFF3
  2155                           postinc0	equ	0xFEE
  2156                           wreg	equ	0xFE8
  2157                           postdec1	equ	0xFE5
  2158                           fsr1h	equ	0xFE2
  2159                           fsr1l	equ	0xFE1
  2160                           indf2	equ	0xFDF
  2161                           fsr2h	equ	0xFDA
  2162                           fsr2l	equ	0xFD9
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _readRegisters *****************
  2166 ;; Defined at:
  2167 ;;		line 82 in file "../MMA8452_18F.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  deviceID        1    wreg     unsigned char 
  2170 ;;  deviceREGIST    1   20[COMRAM] unsigned char 
  2171 ;;  numRegisters    1   21[COMRAM] unsigned char 
  2172 ;;  registerPtr     2   22[COMRAM] PTR unsigned char 
  2173 ;;		 -> initMMA8452@accelData(4), main@accelerometerBuffer(6), main@interruptSource(1), main@sysModRegister(1), 
  2174 ;;		 -> main@motionDetection(1), 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  deviceID        1   30[COMRAM] unsigned char 
  2177 ;;  i               1   31[COMRAM] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      unsigned char 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2187 ;;      Params:         4       0       0       0       0       0       0
  2188 ;;      Locals:         2       0       0       0       0       0       0
  2189 ;;      Temps:          6       0       0       0       0       0       0
  2190 ;;      Totals:        12       0       0       0       0       0       0
  2191 ;;Total ram usage:       12 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    4
  2194 ;; This function calls:
  2195 ;;		_i2c_ReadByte
  2196 ;;		_i2c_SendAcknowledge
  2197 ;;		_i2c_Stop
  2198 ;;		_sendREADcommand
  2199 ;;		_setRegister
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;;		_initMMA8452
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text6
  2207  0007B8                     __ptext6:
  2208                           	opt stack 0
  2209  0007B8                     _readRegisters:
  2210                           	opt stack 26
  2211                           
  2212                           ;incstack = 0
  2213                           ;readRegisters@deviceID stored from wreg
  2214  0007B8  6E1F               	movwf	readRegisters@deviceID,c
  2215                           
  2216                           ;MMA8452_18F.c: 83: unsigned char i;
  2217                           ;MMA8452_18F.c: 85: if (numRegisters >= 64)return (0);
  2218  0007BA  0E3F               	movlw	63
  2219  0007BC  6416               	cpfsgt	readRegisters@numRegisters,c
  2220  0007BE  D002               	goto	l1656
  2221  0007C0  0E00               	movlw	0
  2222  0007C2  0012               	return	
  2223  0007C4                     l1656:
  2224                           
  2225                           ;MMA8452_18F.c: 88: if (!setRegister(deviceID, deviceREGISTER)) return (0);
  2226  0007C4  C015  F013         	movff	readRegisters@deviceREGISTER,setRegister@deviceREGISTER
  2227  0007C8  501F               	movf	readRegisters@deviceID,w,c
  2228  0007CA  ECF1  F004         	call	_setRegister
  2229  0007CE  0900               	iorlw	0
  2230  0007D0  A4D8               	btfss	status,2,c
  2231  0007D2  D002               	goto	l1662
  2232  0007D4  0E00               	movlw	0
  2233  0007D6  0012               	return	
  2234  0007D8                     l1662:
  2235                           
  2236                           ;MMA8452_18F.c: 89: if (!sendREADcommand(deviceID)) return (0);
  2237  0007D8  501F               	movf	readRegisters@deviceID,w,c
  2238  0007DA  EC3E  F005         	call	_sendREADcommand
  2239  0007DE  0900               	iorlw	0
  2240  0007E0  A4D8               	btfss	status,2,c
  2241  0007E2  D002               	goto	l1668
  2242  0007E4  0E00               	movlw	0
  2243  0007E6  0012               	return	
  2244  0007E8                     l1668:
  2245                           
  2246                           ;MMA8452_18F.c: 91: for (i = 0; i < numRegisters; i++) {
  2247  0007E8  0E00               	movlw	0
  2248  0007EA  6E20               	movwf	readRegisters@i,c
  2249  0007EC  D028               	goto	l1680
  2250  0007EE                     l1670:
  2251                           
  2252                           ;MMA8452_18F.c: 92: registerPtr[i] = i2c_ReadByte();
  2253  0007EE  5020               	movf	readRegisters@i,w,c
  2254  0007F0  0D01               	mullw	1
  2255  0007F2  50F3               	movf	prodl,w,c
  2256  0007F4  2417               	addwf	readRegisters@registerPtr,w,c
  2257  0007F6  6ED9               	movwf	fsr2l,c
  2258  0007F8  50F4               	movf	prodh,w,c
  2259  0007FA  2018               	addwfc	readRegisters@registerPtr+1,w,c
  2260  0007FC  6EDA               	movwf	fsr2h,c
  2261  0007FE  EC78  F005         	call	_i2c_ReadByte	;wreg free
  2262  000802  6EDF               	movwf	indf2,c
  2263                           
  2264                           ;MMA8452_18F.c: 93: if (i == numRegisters-1) i2c_SendAcknowledge(0);
  2265  000804  5020               	movf	readRegisters@i,w,c
  2266  000806  6E19               	movwf	??_readRegisters& (0+255),c
  2267  000808  6A1A               	clrf	(??_readRegisters+1)& (0+255),c
  2268  00080A  0EFF               	movlw	255
  2269  00080C  6E1B               	movwf	(??_readRegisters+2)& (0+255),c
  2270  00080E  0EFF               	movlw	255
  2271  000810  6E1C               	movwf	(??_readRegisters+3)& (0+255),c
  2272  000812  5016               	movf	readRegisters@numRegisters,w,c
  2273  000814  6E1D               	movwf	(??_readRegisters+4)& (0+255),c
  2274  000816  6A1E               	clrf	(??_readRegisters+5)& (0+255),c
  2275  000818  501B               	movf	??_readRegisters+2,w,c
  2276  00081A  261D               	addwf	??_readRegisters+4,f,c
  2277  00081C  501C               	movf	??_readRegisters+3,w,c
  2278  00081E  221E               	addwfc	??_readRegisters+5,f,c
  2279  000820  5019               	movf	??_readRegisters,w,c
  2280  000822  181D               	xorwf	??_readRegisters+4,w,c
  2281  000824  E108               	bnz	l1676
  2282  000826  501A               	movf	??_readRegisters+1,w,c
  2283  000828  181E               	xorwf	??_readRegisters+5,w,c
  2284  00082A  A4D8               	btfss	status,2,c
  2285  00082C  D004               	goto	l1676
  2286  00082E  0E00               	movlw	0
  2287  000830  EC5D  F005         	call	_i2c_SendAcknowledge
  2288  000834  D003               	goto	l1678
  2289  000836                     l1676:
  2290                           
  2291                           ;MMA8452_18F.c: 94: else i2c_SendAcknowledge(!0);
  2292  000836  0E01               	movlw	1
  2293  000838  EC5D  F005         	call	_i2c_SendAcknowledge
  2294  00083C                     l1678:
  2295  00083C  2A20               	incf	readRegisters@i,f,c
  2296  00083E                     l1680:
  2297  00083E  5016               	movf	readRegisters@numRegisters,w,c
  2298  000840  5C20               	subwf	readRegisters@i,w,c
  2299  000842  A0D8               	btfss	status,0,c
  2300  000844  D7D4               	goto	l1670
  2301                           
  2302                           ;MMA8452_18F.c: 95: }
  2303                           ;MMA8452_18F.c: 97: i2c_Stop();
  2304  000846  EC8B  F005         	call	_i2c_Stop	;wreg free
  2305                           
  2306                           ;MMA8452_18F.c: 99: return (i);
  2307  00084A  5020               	movf	readRegisters@i,w,c
  2308  00084C  0012               	return	
  2309  00084E                     __end_of_readRegisters:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           postdec1	equ	0xFE5
  2317                           fsr1h	equ	0xFE2
  2318                           fsr1l	equ	0xFE1
  2319                           indf2	equ	0xFDF
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function _setRegister *****************
  2325 ;; Defined at:
  2326 ;;		line 33 in file "../MMA8452_18F.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  deviceID        1    wreg     unsigned char 
  2329 ;;  deviceREGIST    1   18[COMRAM] unsigned char 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  deviceID        1   19[COMRAM] unsigned char 
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  1    wreg      unsigned char 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0, cstack
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2341 ;;      Params:         1       0       0       0       0       0       0
  2342 ;;      Locals:         1       0       0       0       0       0       0
  2343 ;;      Temps:          0       0       0       0       0       0       0
  2344 ;;      Totals:         2       0       0       0       0       0       0
  2345 ;;Total ram usage:        2 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    3
  2348 ;; This function calls:
  2349 ;;		_i2c_GetAcknowledge
  2350 ;;		_i2c_SendByte
  2351 ;;		_i2c_SendControlByte
  2352 ;;		_i2c_Start
  2353 ;; This function is called by:
  2354 ;;		_readRegisters
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text7
  2359  0009E2                     __ptext7:
  2360                           	opt stack 0
  2361  0009E2                     _setRegister:
  2362                           	opt stack 26
  2363                           
  2364                           ;incstack = 0
  2365                           ;setRegister@deviceID stored from wreg
  2366  0009E2  6E14               	movwf	setRegister@deviceID,c
  2367                           
  2368                           ;MMA8452_18F.c: 35: i2c_Start();
  2369  0009E4  EC86  F005         	call	_i2c_Start	;wreg free
  2370                           
  2371                           ;MMA8452_18F.c: 38: i2c_SendControlByte(deviceID << 1, 0x00);
  2372  0009E8  0E00               	movlw	0
  2373  0009EA  6E10               	movwf	i2c_SendControlByte@direction,c
  2374  0009EC  5014               	movf	setRegister@deviceID,w,c
  2375  0009EE  2414               	addwf	setRegister@deviceID,w,c
  2376  0009F0  EC68  F005         	call	_i2c_SendControlByte
  2377                           
  2378                           ;MMA8452_18F.c: 41: if (i2c_GetAcknowledge() == 1) return (0);
  2379  0009F4  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2380  0009F8  06E8               	decf	wreg,f,c
  2381  0009FA  A4D8               	btfss	status,2,c
  2382  0009FC  D002               	goto	l1628
  2383  0009FE  0E00               	movlw	0
  2384  000A00  0012               	return	
  2385  000A02                     l1628:
  2386                           
  2387                           ;MMA8452_18F.c: 44: i2c_SendByte(deviceREGISTER);
  2388  000A02  5013               	movf	setRegister@deviceREGISTER,w,c
  2389  000A04  EC70  F005         	call	_i2c_SendByte
  2390                           
  2391                           ;MMA8452_18F.c: 47: if (i2c_GetAcknowledge() == 1) return (0);
  2392  000A08  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2393  000A0C  06E8               	decf	wreg,f,c
  2394  000A0E  A4D8               	btfss	status,2,c
  2395  000A10  D002               	goto	l1634
  2396  000A12  0E00               	movlw	0
  2397  000A14  0012               	return	
  2398  000A16                     l1634:
  2399                           
  2400                           ;MMA8452_18F.c: 49: return (!0);
  2401  000A16  0E01               	movlw	1
  2402  000A18  0012               	return	
  2403  000A1A                     __end_of_setRegister:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           postinc0	equ	0xFEE
  2409                           wreg	equ	0xFE8
  2410                           postdec1	equ	0xFE5
  2411                           fsr1h	equ	0xFE2
  2412                           fsr1l	equ	0xFE1
  2413                           indf2	equ	0xFDF
  2414                           fsr2h	equ	0xFDA
  2415                           fsr2l	equ	0xFD9
  2416                           status	equ	0xFD8
  2417                           
  2418 ;; *************** function _sendREADcommand *****************
  2419 ;; Defined at:
  2420 ;;		line 19 in file "../MMA8452_18F.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  deviceID        1    wreg     unsigned char 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  deviceID        1   18[COMRAM] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      unsigned char 
  2427 ;; Registers used:
  2428 ;;		wreg, status,2, status,0, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2434 ;;      Params:         0       0       0       0       0       0       0
  2435 ;;      Locals:         1       0       0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0       0       0
  2437 ;;      Totals:         1       0       0       0       0       0       0
  2438 ;;Total ram usage:        1 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    3
  2441 ;; This function calls:
  2442 ;;		_i2c_GetAcknowledge
  2443 ;;		_i2c_SendControlByte
  2444 ;;		_i2c_Start
  2445 ;; This function is called by:
  2446 ;;		_readRegisters
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text8
  2451  000A7C                     __ptext8:
  2452                           	opt stack 0
  2453  000A7C                     _sendREADcommand:
  2454                           	opt stack 26
  2455                           
  2456                           ;incstack = 0
  2457                           ;sendREADcommand@deviceID stored from wreg
  2458  000A7C  6E13               	movwf	sendREADcommand@deviceID,c
  2459                           
  2460                           ;MMA8452_18F.c: 21: i2c_Start();
  2461  000A7E  EC86  F005         	call	_i2c_Start	;wreg free
  2462                           
  2463                           ;MMA8452_18F.c: 24: i2c_SendControlByte(deviceID << 1, 0x01);
  2464  000A82  0E01               	movlw	1
  2465  000A84  6E10               	movwf	i2c_SendControlByte@direction,c
  2466  000A86  5013               	movf	sendREADcommand@deviceID,w,c
  2467  000A88  2413               	addwf	sendREADcommand@deviceID,w,c
  2468  000A8A  EC68  F005         	call	_i2c_SendControlByte
  2469                           
  2470                           ;MMA8452_18F.c: 27: if (i2c_GetAcknowledge() == 1) return (0);
  2471  000A8E  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2472  000A92  06E8               	decf	wreg,f,c
  2473  000A94  A4D8               	btfss	status,2,c
  2474  000A96  D002               	goto	l1614
  2475  000A98  0E00               	movlw	0
  2476  000A9A  0012               	return	
  2477  000A9C                     l1614:
  2478                           
  2479                           ;MMA8452_18F.c: 29: return (!0);
  2480  000A9C  0E01               	movlw	1
  2481  000A9E  0012               	return	
  2482  000AA0                     __end_of_sendREADcommand:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           postinc0	equ	0xFEE
  2488                           wreg	equ	0xFE8
  2489                           postdec1	equ	0xFE5
  2490                           fsr1h	equ	0xFE2
  2491                           fsr1l	equ	0xFE1
  2492                           indf2	equ	0xFDF
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _i2c_Start *****************
  2498 ;; Defined at:
  2499 ;;		line 223 in file "../MMA8452_18F.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		None
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2513 ;;      Params:         0       0       0       0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0
  2516 ;;      Totals:         0       0       0       0       0       0       0
  2517 ;;Total ram usage:        0 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    1
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_sendREADcommand
  2524 ;;		_setRegister
  2525 ;;		_writeByteToRegister
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text9
  2530  000B0C                     __ptext9:
  2531                           	opt stack 0
  2532  000B0C                     _i2c_Start:
  2533                           	opt stack 27
  2534                           
  2535                           ;MMA8452_18F.c: 224: SSPCON2bits.SEN = 1;
  2536                           
  2537                           ;incstack = 0
  2538  000B0C  80C5               	bsf	4037,0,c	;volatile
  2539  000B0E                     l220:
  2540  000B0E  A69E               	btfss	3998,3,c	;volatile
  2541  000B10  D7FE               	goto	l220
  2542                           
  2543                           ;MMA8452_18F.c: 226: PIR1bits.SSPIF = 0;
  2544  000B12  969E               	bcf	3998,3,c	;volatile
  2545  000B14  0012               	return		;funcret
  2546  000B16                     __end_of_i2c_Start:
  2547                           	opt stack 0
  2548                           tblptru	equ	0xFF8
  2549                           prodh	equ	0xFF4
  2550                           prodl	equ	0xFF3
  2551                           postinc0	equ	0xFEE
  2552                           wreg	equ	0xFE8
  2553                           postdec1	equ	0xFE5
  2554                           fsr1h	equ	0xFE2
  2555                           fsr1l	equ	0xFE1
  2556                           indf2	equ	0xFDF
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _i2c_SendControlByte *****************
  2562 ;; Defined at:
  2563 ;;		line 257 in file "../MMA8452_18F.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  controlByte     1    wreg     unsigned char 
  2566 ;;  direction       1   15[COMRAM] unsigned char 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  controlByte     1   16[COMRAM] unsigned char 
  2569 ;;  outByte         1   17[COMRAM] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      unsigned char 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0, cstack
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2579 ;;      Params:         1       0       0       0       0       0       0
  2580 ;;      Locals:         2       0       0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0       0       0
  2582 ;;      Totals:         3       0       0       0       0       0       0
  2583 ;;Total ram usage:        3 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    2
  2586 ;; This function calls:
  2587 ;;		_i2c_SendByte
  2588 ;; This function is called by:
  2589 ;;		_sendREADcommand
  2590 ;;		_setRegister
  2591 ;;		_writeByteToRegister
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text10
  2596  000AD0                     __ptext10:
  2597                           	opt stack 0
  2598  000AD0                     _i2c_SendControlByte:
  2599                           	opt stack 26
  2600                           
  2601                           ;incstack = 0
  2602                           ;i2c_SendControlByte@controlByte stored from wreg
  2603  000AD0  6E11               	movwf	i2c_SendControlByte@controlByte,c
  2604                           
  2605                           ;MMA8452_18F.c: 258: unsigned char outByte;
  2606                           ;MMA8452_18F.c: 260: outByte = controlByte | direction;
  2607  000AD2  5011               	movf	i2c_SendControlByte@controlByte,w,c
  2608  000AD4  1010               	iorwf	i2c_SendControlByte@direction,w,c
  2609  000AD6  6E12               	movwf	i2c_SendControlByte@outByte,c
  2610                           
  2611                           ;MMA8452_18F.c: 261: return i2c_SendByte (outByte);
  2612                           ;	Return value of _i2c_SendControlByte is never used
  2613  000AD8  5012               	movf	i2c_SendControlByte@outByte,w,c
  2614  000ADA  EC70  F005         	call	_i2c_SendByte
  2615  000ADE  0012               	return	
  2616  000AE0                     __end_of_i2c_SendControlByte:
  2617                           	opt stack 0
  2618                           tblptru	equ	0xFF8
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1h	equ	0xFE2
  2625                           fsr1l	equ	0xFE1
  2626                           indf2	equ	0xFDF
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _i2c_SendByte *****************
  2632 ;; Defined at:
  2633 ;;		line 244 in file "../MMA8452_18F.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  byte            1    wreg     unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  byte            1   14[COMRAM] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      unsigned char 
  2640 ;; Registers used:
  2641 ;;		wreg
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2647 ;;      Params:         0       0       0       0       0       0       0
  2648 ;;      Locals:         1       0       0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0
  2650 ;;      Totals:         1       0       0       0       0       0       0
  2651 ;;Total ram usage:        1 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_setRegister
  2658 ;;		_writeByteToRegister
  2659 ;;		_i2c_SendControlByte
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text11
  2664  000AE0                     __ptext11:
  2665                           	opt stack 0
  2666  000AE0                     _i2c_SendByte:
  2667                           	opt stack 26
  2668                           
  2669                           ;incstack = 0
  2670                           ;i2c_SendByte@byte stored from wreg
  2671  000AE0  6E0F               	movwf	i2c_SendByte@byte,c
  2672                           
  2673                           ;MMA8452_18F.c: 246: SSPBUF = byte;
  2674  000AE2  C00F  FFC9         	movff	i2c_SendByte@byte,4041	;volatile
  2675  000AE6                     l226:
  2676  000AE6  A69E               	btfss	3998,3,c	;volatile
  2677  000AE8  D7FE               	goto	l226
  2678                           
  2679                           ;MMA8452_18F.c: 248: PIR1bits.SSPIF = 0;
  2680  000AEA  969E               	bcf	3998,3,c	;volatile
  2681                           
  2682                           ;MMA8452_18F.c: 250: return 0;
  2683  000AEC  0E00               	movlw	0
  2684  000AEE  0012               	return	
  2685  000AF0                     __end_of_i2c_SendByte:
  2686                           	opt stack 0
  2687                           tblptru	equ	0xFF8
  2688                           prodh	equ	0xFF4
  2689                           prodl	equ	0xFF3
  2690                           postinc0	equ	0xFEE
  2691                           wreg	equ	0xFE8
  2692                           postdec1	equ	0xFE5
  2693                           fsr1h	equ	0xFE2
  2694                           fsr1l	equ	0xFE1
  2695                           indf2	equ	0xFDF
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _i2c_GetAcknowledge *****************
  2701 ;; Defined at:
  2702 ;;		line 266 in file "../MMA8452_18F.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  ack             1   14[COMRAM] unsigned char 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      unsigned char 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2716 ;;      Params:         0       0       0       0       0       0       0
  2717 ;;      Locals:         1       0       0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0
  2719 ;;      Totals:         1       0       0       0       0       0       0
  2720 ;;Total ram usage:        1 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    1
  2723 ;; This function calls:
  2724 ;;		Nothing
  2725 ;; This function is called by:
  2726 ;;		_sendREADcommand
  2727 ;;		_setRegister
  2728 ;;		_writeByteToRegister
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text12
  2733  000B00                     __ptext12:
  2734                           	opt stack 0
  2735  000B00                     _i2c_GetAcknowledge:
  2736                           	opt stack 27
  2737                           
  2738                           ;MMA8452_18F.c: 267: unsigned char ack;
  2739                           ;MMA8452_18F.c: 269: ack = SSPCON2bits.ACKSTAT;
  2740                           
  2741                           ;incstack = 0
  2742  000B00  0E00               	movlw	0
  2743  000B02  BCC5               	btfsc	4037,6,c	;volatile
  2744  000B04  0E01               	movlw	1
  2745  000B06  6E0F               	movwf	i2c_GetAcknowledge@ack,c
  2746                           
  2747                           ;MMA8452_18F.c: 271: return ack;
  2748  000B08  500F               	movf	i2c_GetAcknowledge@ack,w,c
  2749  000B0A  0012               	return	
  2750  000B0C                     __end_of_i2c_GetAcknowledge:
  2751                           	opt stack 0
  2752                           tblptru	equ	0xFF8
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1h	equ	0xFE2
  2759                           fsr1l	equ	0xFE1
  2760                           indf2	equ	0xFDF
  2761                           fsr2h	equ	0xFDA
  2762                           fsr2l	equ	0xFD9
  2763                           status	equ	0xFD8
  2764                           
  2765 ;; *************** function _i2c_Stop *****************
  2766 ;; Defined at:
  2767 ;;		line 214 in file "../MMA8452_18F.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;		None
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;		None
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		None
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2781 ;;      Params:         0       0       0       0       0       0       0
  2782 ;;      Locals:         0       0       0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0
  2784 ;;      Totals:         0       0       0       0       0       0       0
  2785 ;;Total ram usage:        0 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_writeByteToRegister
  2792 ;;		_readRegisters
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text13
  2797  000B16                     __ptext13:
  2798                           	opt stack 0
  2799  000B16                     _i2c_Stop:
  2800                           	opt stack 28
  2801                           
  2802                           ;MMA8452_18F.c: 215: SSPCON2bits.PEN = 1;
  2803                           
  2804                           ;incstack = 0
  2805  000B16  84C5               	bsf	4037,2,c	;volatile
  2806  000B18                     l214:
  2807  000B18  A69E               	btfss	3998,3,c	;volatile
  2808  000B1A  D7FE               	goto	l214
  2809                           
  2810                           ;MMA8452_18F.c: 217: PIR1bits.SSPIF = 0;
  2811  000B1C  969E               	bcf	3998,3,c	;volatile
  2812  000B1E  0012               	return		;funcret
  2813  000B20                     __end_of_i2c_Stop:
  2814                           	opt stack 0
  2815                           tblptru	equ	0xFF8
  2816                           prodh	equ	0xFF4
  2817                           prodl	equ	0xFF3
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1h	equ	0xFE2
  2822                           fsr1l	equ	0xFE1
  2823                           indf2	equ	0xFDF
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _i2c_SendAcknowledge *****************
  2829 ;; Defined at:
  2830 ;;		line 293 in file "../MMA8452_18F.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  status          1    wreg     unsigned char 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  status          1   14[COMRAM] unsigned char 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  1    wreg      void 
  2837 ;; Registers used:
  2838 ;;		wreg
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2844 ;;      Params:         0       0       0       0       0       0       0
  2845 ;;      Locals:         1       0       0       0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0
  2847 ;;      Totals:         1       0       0       0       0       0       0
  2848 ;;Total ram usage:        1 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_readRegisters
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text14
  2859  000ABA                     __ptext14:
  2860                           	opt stack 0
  2861  000ABA                     _i2c_SendAcknowledge:
  2862                           	opt stack 28
  2863                           
  2864                           ;incstack = 0
  2865                           ;i2c_SendAcknowledge@status stored from wreg
  2866  000ABA  6E0F               	movwf	i2c_SendAcknowledge@status,c
  2867                           
  2868                           ;MMA8452_18F.c: 294: if ( status & 0x01) {
  2869  000ABC  A00F               	btfss	i2c_SendAcknowledge@status,0,c
  2870  000ABE  D002               	goto	l244
  2871                           
  2872                           ;MMA8452_18F.c: 295: SSPCON2bits.ACKDT = 0;
  2873  000AC0  9AC5               	bcf	4037,5,c	;volatile
  2874                           
  2875                           ;MMA8452_18F.c: 296: }
  2876  000AC2  D001               	goto	l245
  2877  000AC4                     l244:
  2878                           
  2879                           ;MMA8452_18F.c: 297: else {
  2880                           ;MMA8452_18F.c: 298: SSPCON2bits.ACKDT = 1;
  2881  000AC4  8AC5               	bsf	4037,5,c	;volatile
  2882  000AC6                     l245:
  2883                           
  2884                           ;MMA8452_18F.c: 299: }
  2885                           ;MMA8452_18F.c: 300: SSPCON2bits.ACKEN = 1;
  2886  000AC6  88C5               	bsf	4037,4,c	;volatile
  2887  000AC8                     l246:
  2888  000AC8  A69E               	btfss	3998,3,c	;volatile
  2889  000ACA  D7FE               	goto	l246
  2890                           
  2891                           ;MMA8452_18F.c: 302: PIR1bits.SSPIF = 0;
  2892  000ACC  969E               	bcf	3998,3,c	;volatile
  2893  000ACE  0012               	return		;funcret
  2894  000AD0                     __end_of_i2c_SendAcknowledge:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1h	equ	0xFE2
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _i2c_ReadByte *****************
  2910 ;; Defined at:
  2911 ;;		line 276 in file "../MMA8452_18F.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  byte            1   14[COMRAM] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      unsigned char 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2925 ;;      Params:         0       0       0       0       0       0       0
  2926 ;;      Locals:         1       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0
  2928 ;;      Totals:         1       0       0       0       0       0       0
  2929 ;;Total ram usage:        1 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_readRegisters
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text15
  2940  000AF0                     __ptext15:
  2941                           	opt stack 0
  2942  000AF0                     _i2c_ReadByte:
  2943                           	opt stack 28
  2944                           
  2945                           ;MMA8452_18F.c: 277: unsigned char byte;
  2946                           ;MMA8452_18F.c: 279: SSPCON2bits.RCEN = 1;
  2947                           
  2948                           ;incstack = 0
  2949  000AF0  86C5               	bsf	4037,3,c	;volatile
  2950  000AF2                     l238:
  2951  000AF2  A69E               	btfss	3998,3,c	;volatile
  2952  000AF4  D7FE               	goto	l238
  2953                           
  2954                           ;MMA8452_18F.c: 281: PIR1bits.SSPIF = 0;
  2955  000AF6  969E               	bcf	3998,3,c	;volatile
  2956                           
  2957                           ;MMA8452_18F.c: 282: byte = SSPBUF;
  2958  000AF8  CFC9 F00F          	movff	4041,i2c_ReadByte@byte	;volatile
  2959                           
  2960                           ;MMA8452_18F.c: 283: return (int)byte;
  2961  000AFC  500F               	movf	i2c_ReadByte@byte,w,c
  2962  000AFE  0012               	return	
  2963  000B00                     __end_of_i2c_ReadByte:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           prodh	equ	0xFF4
  2967                           prodl	equ	0xFF3
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           postdec1	equ	0xFE5
  2971                           fsr1h	equ	0xFE2
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _init *****************
  2979 ;; Defined at:
  2980 ;;		line 153 in file "../main.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      void 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2994 ;;      Params:         0       0       0       0       0       0       0
  2995 ;;      Locals:         0       0       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0
  2997 ;;      Totals:         0       0       0       0       0       0       0
  2998 ;;Total ram usage:        0 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    1
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text16
  3009  000A4E                     __ptext16:
  3010                           	opt stack 0
  3011  000A4E                     _init:
  3012                           	opt stack 29
  3013                           
  3014                           ;main.c: 154: INTCONbits.GIE = 0;
  3015                           
  3016                           ;incstack = 0
  3017  000A4E  9EF2               	bcf	intcon,7,c	;volatile
  3018                           
  3019                           ;main.c: 156: ADCON0 = 0;
  3020  000A50  0E00               	movlw	0
  3021  000A52  6EC2               	movwf	4034,c	;volatile
  3022                           
  3023                           ;main.c: 157: ADCON1 = 0b00001111;
  3024  000A54  0E0F               	movlw	15
  3025  000A56  6EC1               	movwf	4033,c	;volatile
  3026                           
  3027                           ;main.c: 159: TRISB = 0b11011111;
  3028  000A58  0EDF               	movlw	223
  3029  000A5A  6E93               	movwf	3987,c	;volatile
  3030                           
  3031                           ;main.c: 160: INTCON2bits.RBPU = 0;
  3032  000A5C  9EF1               	bcf	intcon2,7,c	;volatile
  3033                           
  3034                           ;main.c: 161: TRISC = 0b11111111;
  3035  000A5E  6894               	setf	3988,c	;volatile
  3036                           
  3037                           ;main.c: 164: TXSTAbits.TXEN = 0;
  3038  000A60  9AAC               	bcf	4012,5,c	;volatile
  3039                           
  3040                           ;main.c: 165: TRISC = 0b11111111;
  3041  000A62  6894               	setf	3988,c	;volatile
  3042                           
  3043                           ;main.c: 166: TRISA = 0b11111100;
  3044  000A64  0EFC               	movlw	252
  3045  000A66  6E92               	movwf	3986,c	;volatile
  3046                           
  3047                           ;main.c: 198: INTCON = 0x00;
  3048  000A68  0E00               	movlw	0
  3049  000A6A  6EF2               	movwf	intcon,c	;volatile
  3050                           
  3051                           ;main.c: 199: INTCONbits.INT0IE = 1;
  3052  000A6C  88F2               	bsf	intcon,4,c	;volatile
  3053                           
  3054                           ;main.c: 200: INTCONbits.RBIE = 1;
  3055  000A6E  86F2               	bsf	intcon,3,c	;volatile
  3056                           
  3057                           ;main.c: 202: INTCON2 = 0x00;
  3058  000A70  0E00               	movlw	0
  3059  000A72  6EF1               	movwf	intcon2,c	;volatile
  3060                           
  3061                           ;main.c: 203: INTCON2bits.RBPU = 0;
  3062  000A74  9EF1               	bcf	intcon2,7,c	;volatile
  3063                           
  3064                           ;main.c: 204: INTCON2bits.INTEDG0 = 0;
  3065  000A76  9CF1               	bcf	intcon2,6,c	;volatile
  3066                           
  3067                           ;main.c: 205: INTCONbits.GIE = 1;
  3068  000A78  8EF2               	bsf	intcon,7,c	;volatile
  3069  000A7A  0012               	return		;funcret
  3070  000A7C                     __end_of_init:
  3071                           	opt stack 0
  3072                           tblptru	equ	0xFF8
  3073                           prodh	equ	0xFF4
  3074                           prodl	equ	0xFF3
  3075                           intcon	equ	0xFF2
  3076                           intcon2	equ	0xFF1
  3077                           postinc0	equ	0xFEE
  3078                           wreg	equ	0xFE8
  3079                           postdec1	equ	0xFE5
  3080                           fsr1h	equ	0xFE2
  3081                           fsr1l	equ	0xFE1
  3082                           indf2	equ	0xFDF
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _getTwosComplement *****************
  3088 ;; Defined at:
  3089 ;;		line 172 in file "../MMA8452_18F.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  MSBbyte         1    wreg     unsigned char 
  3092 ;;  LSBbyte         1   14[COMRAM] unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  MSBbyte         1   19[COMRAM] unsigned char 
  3095 ;;  value           2   20[COMRAM] short 
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  2   14[COMRAM] short 
  3098 ;; Registers used:
  3099 ;;		wreg, status,2, status,0
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3105 ;;      Params:         2       0       0       0       0       0       0
  3106 ;;      Locals:         3       0       0       0       0       0       0
  3107 ;;      Temps:          3       0       0       0       0       0       0
  3108 ;;      Totals:         8       0       0       0       0       0       0
  3109 ;;Total ram usage:        8 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    1
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_main
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text17
  3120  0008AE                     __ptext17:
  3121                           	opt stack 0
  3122  0008AE                     _getTwosComplement:
  3123                           	opt stack 29
  3124                           
  3125                           ;incstack = 0
  3126                           ;getTwosComplement@MSBbyte stored from wreg
  3127  0008AE  6E14               	movwf	getTwosComplement@MSBbyte,c
  3128                           
  3129                           ;MMA8452_18F.c: 173: short value;
  3130                           ;MMA8452_18F.c: 176: value = MSBbyte;
  3131  0008B0  C014  F015         	movff	getTwosComplement@MSBbyte,getTwosComplement@value
  3132  0008B4  6A16               	clrf	getTwosComplement@value+1,c
  3133                           
  3134                           ;MMA8452_18F.c: 177: value = value << 8;
  3135  0008B6  5015               	movf	getTwosComplement@value,w,c
  3136  0008B8  6E16               	movwf	getTwosComplement@value+1,c
  3137  0008BA  6A15               	clrf	getTwosComplement@value,c
  3138                           
  3139                           ;MMA8452_18F.c: 178: value = value | LSBbyte;
  3140  0008BC  5015               	movf	getTwosComplement@value,w,c
  3141  0008BE  100F               	iorwf	getTwosComplement@LSBbyte,w,c
  3142  0008C0  6E15               	movwf	getTwosComplement@value,c
  3143  0008C2  5016               	movf	getTwosComplement@value+1,w,c
  3144  0008C4  6E16               	movwf	getTwosComplement@value+1,c
  3145                           
  3146                           ;MMA8452_18F.c: 181: value = value >> 4;
  3147  0008C6  C015  F011         	movff	getTwosComplement@value,??_getTwosComplement
  3148  0008CA  C016  F012         	movff	getTwosComplement@value+1,??_getTwosComplement+1
  3149  0008CE  0E04               	movlw	4
  3150  0008D0  6E13               	movwf	(??_getTwosComplement+2)& (0+255),c
  3151  0008D2                     u1205:
  3152  0008D2  3412               	rlcf	??_getTwosComplement+1,w,c
  3153  0008D4  3212               	rrcf	??_getTwosComplement+1,f,c
  3154  0008D6  3211               	rrcf	??_getTwosComplement,f,c
  3155  0008D8  2E13               	decfsz	(??_getTwosComplement+2)& (0+255),f,c
  3156  0008DA  D7FB               	goto	u1205
  3157  0008DC  C011  F015         	movff	??_getTwosComplement,getTwosComplement@value
  3158  0008E0  C012  F016         	movff	??_getTwosComplement+1,getTwosComplement@value+1
  3159                           
  3160                           ;MMA8452_18F.c: 184: if ((MSBbyte & 0x80) != 0) {
  3161  0008E4  AE14               	btfss	getTwosComplement@MSBbyte,7,c
  3162  0008E6  D008               	goto	l1912
  3163                           
  3164                           ;MMA8452_18F.c: 185: value = ~value + 1;
  3165  0008E8  6C15               	negf	getTwosComplement@value,c
  3166  0008EA  1E16               	comf	getTwosComplement@value+1,f,c
  3167  0008EC  B0D8               	btfsc	status,0,c
  3168  0008EE  2A16               	incf	getTwosComplement@value+1,f,c
  3169                           
  3170                           ;MMA8452_18F.c: 186: value = value * -1;
  3171  0008F0  6C15               	negf	getTwosComplement@value,c
  3172  0008F2  1E16               	comf	getTwosComplement@value+1,f,c
  3173  0008F4  B0D8               	btfsc	status,0,c
  3174  0008F6  2A16               	incf	getTwosComplement@value+1,f,c
  3175  0008F8                     l1912:
  3176                           
  3177                           ;MMA8452_18F.c: 187: }
  3178                           ;MMA8452_18F.c: 188: return (value);
  3179  0008F8  C015  F00F         	movff	getTwosComplement@value,?_getTwosComplement
  3180  0008FC  C016  F010         	movff	getTwosComplement@value+1,?_getTwosComplement+1
  3181  000900  0012               	return	
  3182  000902                     __end_of_getTwosComplement:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           prodh	equ	0xFF4
  3186                           prodl	equ	0xFF3
  3187                           intcon	equ	0xFF2
  3188                           intcon2	equ	0xFF1
  3189                           postinc0	equ	0xFEE
  3190                           wreg	equ	0xFE8
  3191                           postdec1	equ	0xFE5
  3192                           fsr1h	equ	0xFE2
  3193                           fsr1l	equ	0xFE1
  3194                           indf2	equ	0xFDF
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           status	equ	0xFD8
  3198                           
  3199 ;; *************** function _createDataPacket *****************
  3200 ;; Defined at:
  3201 ;;		line 223 in file "../main.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  ptrData         2   14[COMRAM] PTR unsigned char 
  3204 ;;		 -> commandBuffer(64), 
  3205 ;;  numDataBytes    2   16[COMRAM] unsigned short 
  3206 ;;  ptrPacket       2   18[COMRAM] PTR unsigned char 
  3207 ;;		 -> arrDataPacket(1024), 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  packetIndex     2   27[COMRAM] unsigned short 
  3210 ;;  dataIndex       2   21[COMRAM] unsigned short 
  3211 ;;  state           1   26[COMRAM] unsigned char 
  3212 ;;  byteMask        1   25[COMRAM] unsigned char 
  3213 ;;  i               1   24[COMRAM] unsigned char 
  3214 ;;  dataBit         1   23[COMRAM] unsigned char 
  3215 ;;  previousData    1   20[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  2   14[COMRAM] unsigned short 
  3218 ;; Registers used:
  3219 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3225 ;;      Params:         6       0       0       0       0       0       0
  3226 ;;      Locals:         9       0       0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0
  3228 ;;      Totals:        15       0       0       0       0       0       0
  3229 ;;Total ram usage:       15 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    1
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text18
  3240  000536                     __ptext18:
  3241                           	opt stack 0
  3242  000536                     _createDataPacket:
  3243                           	opt stack 29
  3244                           
  3245                           ;main.c: 224: unsigned char byteMask, dataBit, previousDataBit, i, state;
  3246                           ;main.c: 225: unsigned short dataIndex, packetIndex;
  3247                           ;main.c: 227: if ( (numDataBytes > 64) || (ptrData == (0)) || (ptrPacket == (0)) )
  3248                           
  3249                           ;incstack = 0
  3250  000536  5012               	movf	createDataPacket@numDataBytes+1,w,c
  3251  000538  E10C               	bnz	l1932
  3252  00053A  0E41               	movlw	65
  3253  00053C  5C11               	subwf	createDataPacket@numDataBytes,w,c
  3254  00053E  B0D8               	btfsc	status,0,c
  3255  000540  D008               	goto	l1932
  3256  000542  500F               	movf	createDataPacket@ptrData,w,c
  3257  000544  1010               	iorwf	createDataPacket@ptrData+1,w,c
  3258  000546  B4D8               	btfsc	status,2,c
  3259  000548  D004               	goto	l1932
  3260  00054A  5013               	movf	createDataPacket@ptrPacket,w,c
  3261  00054C  1014               	iorwf	createDataPacket@ptrPacket+1,w,c
  3262  00054E  A4D8               	btfss	status,2,c
  3263  000550  D005               	goto	l1936
  3264  000552                     l1932:
  3265                           
  3266                           ;main.c: 228: return(0);
  3267  000552  0E00               	movlw	0
  3268  000554  6E10               	movwf	?_createDataPacket+1,c
  3269  000556  0E00               	movlw	0
  3270  000558  6E0F               	movwf	?_createDataPacket,c
  3271  00055A  0012               	return	
  3272  00055C                     l1936:
  3273                           
  3274                           ;main.c: 230: previousDataBit = 0;
  3275  00055C  0E00               	movlw	0
  3276  00055E  6E15               	movwf	createDataPacket@previousDataBit,c
  3277                           
  3278                           ;main.c: 231: state = 0;
  3279  000560  0E00               	movlw	0
  3280  000562  6E1B               	movwf	createDataPacket@state,c
  3281                           
  3282                           ;main.c: 233: packetIndex = dataIndex = 0;
  3283  000564  0E00               	movlw	0
  3284  000566  6E17               	movwf	createDataPacket@dataIndex+1,c
  3285  000568  0E00               	movlw	0
  3286  00056A  6E16               	movwf	createDataPacket@dataIndex,c
  3287  00056C  C016  F01C         	movff	createDataPacket@dataIndex,createDataPacket@packetIndex
  3288  000570  C017  F01D         	movff	createDataPacket@dataIndex+1,createDataPacket@packetIndex+1
  3289                           
  3290                           ;main.c: 234: byteMask = 0x01;
  3291  000574  0E01               	movlw	1
  3292  000576  6E1A               	movwf	createDataPacket@byteMask,c
  3293                           
  3294                           ;main.c: 236: while (dataIndex < numDataBytes){
  3295  000578  D066               	goto	l1990
  3296  00057A                     l1938:
  3297                           
  3298                           ;main.c: 237: byteMask = 0x01;
  3299  00057A  0E01               	movlw	1
  3300  00057C  6E1A               	movwf	createDataPacket@byteMask,c
  3301                           
  3302                           ;main.c: 238: for (i = 0; i < 8; i++) {
  3303  00057E  0E00               	movlw	0
  3304  000580  6E19               	movwf	createDataPacket@i,c
  3305  000582                     l1940:
  3306  000582  0E07               	movlw	7
  3307  000584  6419               	cpfsgt	createDataPacket@i,c
  3308  000586  D001               	goto	l1944
  3309  000588  D05C               	goto	l1988
  3310  00058A                     l1944:
  3311                           
  3312                           ;main.c: 239: if (byteMask & ptrData[dataIndex]) dataBit = 1;
  3313  00058A  5016               	movf	createDataPacket@dataIndex,w,c
  3314  00058C  240F               	addwf	createDataPacket@ptrData,w,c
  3315  00058E  6ED9               	movwf	fsr2l,c
  3316  000590  5017               	movf	createDataPacket@dataIndex+1,w,c
  3317  000592  2010               	addwfc	createDataPacket@ptrData+1,w,c
  3318  000594  6EDA               	movwf	fsr2h,c
  3319  000596  50DF               	movf	indf2,w,c
  3320  000598  141A               	andwf	createDataPacket@byteMask,w,c
  3321  00059A  0900               	iorlw	0
  3322  00059C  B4D8               	btfsc	status,2,c
  3323  00059E  D002               	goto	l1948
  3324  0005A0  0E01               	movlw	1
  3325  0005A2  D001               	goto	L3
  3326  0005A4                     l1948:
  3327                           
  3328                           ;main.c: 240: else dataBit = 0;
  3329  0005A4  0E00               	movlw	0
  3330  0005A6                     L3:
  3331  0005A6  6E18               	movwf	createDataPacket@dataBit,c
  3332                           
  3333                           ;main.c: 244: if (dataBit == previousDataBit){
  3334  0005A8  5015               	movf	createDataPacket@previousDataBit,w,c
  3335  0005AA  1818               	xorwf	createDataPacket@dataBit,w,c
  3336  0005AC  A4D8               	btfss	status,2,c
  3337  0005AE  D027               	goto	l1966
  3338                           
  3339                           ;main.c: 245: if (state == 1){
  3340  0005B0  041B               	decf	createDataPacket@state,w,c
  3341  0005B2  A4D8               	btfss	status,2,c
  3342  0005B4  D012               	goto	l1960
  3343                           
  3344                           ;main.c: 246: ptrPacket[packetIndex++] = 0;
  3345  0005B6  501C               	movf	createDataPacket@packetIndex,w,c
  3346  0005B8  2413               	addwf	createDataPacket@ptrPacket,w,c
  3347  0005BA  6ED9               	movwf	fsr2l,c
  3348  0005BC  501D               	movf	createDataPacket@packetIndex+1,w,c
  3349  0005BE  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3350  0005C0  6EDA               	movwf	fsr2h,c
  3351  0005C2  0E00               	movlw	0
  3352  0005C4  6EDF               	movwf	indf2,c
  3353  0005C6  4A1C               	infsnz	createDataPacket@packetIndex,f,c
  3354  0005C8  2A1D               	incf	createDataPacket@packetIndex+1,f,c
  3355                           
  3356                           ;main.c: 247: ptrPacket[packetIndex++] = 1;
  3357  0005CA  501C               	movf	createDataPacket@packetIndex,w,c
  3358  0005CC  2413               	addwf	createDataPacket@ptrPacket,w,c
  3359  0005CE  6ED9               	movwf	fsr2l,c
  3360  0005D0  501D               	movf	createDataPacket@packetIndex+1,w,c
  3361  0005D2  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3362  0005D4  6EDA               	movwf	fsr2h,c
  3363  0005D6  0E01               	movlw	1
  3364  0005D8  D02B               	goto	L6
  3365  0005DA                     l1960:
  3366                           
  3367                           ;main.c: 249: else{
  3368                           ;main.c: 250: ptrPacket[packetIndex++] = 1;
  3369  0005DA  501C               	movf	createDataPacket@packetIndex,w,c
  3370  0005DC  2413               	addwf	createDataPacket@ptrPacket,w,c
  3371  0005DE  6ED9               	movwf	fsr2l,c
  3372  0005E0  501D               	movf	createDataPacket@packetIndex+1,w,c
  3373  0005E2  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3374  0005E4  6EDA               	movwf	fsr2h,c
  3375  0005E6  0E01               	movlw	1
  3376  0005E8  6EDF               	movwf	indf2,c
  3377  0005EA  4A1C               	infsnz	createDataPacket@packetIndex,f,c
  3378  0005EC  2A1D               	incf	createDataPacket@packetIndex+1,f,c
  3379                           
  3380                           ;main.c: 251: ptrPacket[packetIndex++] = 0;
  3381  0005EE  501C               	movf	createDataPacket@packetIndex,w,c
  3382  0005F0  2413               	addwf	createDataPacket@ptrPacket,w,c
  3383  0005F2  6ED9               	movwf	fsr2l,c
  3384  0005F4  501D               	movf	createDataPacket@packetIndex+1,w,c
  3385  0005F6  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3386  0005F8  6EDA               	movwf	fsr2h,c
  3387  0005FA  0E00               	movlw	0
  3388  0005FC  D019               	goto	L6
  3389  0005FE                     l1966:
  3390                           
  3391                           ;main.c: 256: else {
  3392                           ;main.c: 257: if (state == 1){
  3393  0005FE  041B               	decf	createDataPacket@state,w,c
  3394  000600  A4D8               	btfss	status,2,c
  3395  000602  D00D               	goto	l1974
  3396                           
  3397                           ;main.c: 258: state = 0;
  3398  000604  0E00               	movlw	0
  3399  000606  6E1B               	movwf	createDataPacket@state,c
  3400                           
  3401                           ;main.c: 259: ptrPacket[packetIndex++] = 2;
  3402  000608  501C               	movf	createDataPacket@packetIndex,w,c
  3403  00060A  2413               	addwf	createDataPacket@ptrPacket,w,c
  3404  00060C  6ED9               	movwf	fsr2l,c
  3405  00060E  501D               	movf	createDataPacket@packetIndex+1,w,c
  3406  000610  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3407  000612  6EDA               	movwf	fsr2h,c
  3408  000614  0E02               	movlw	2
  3409  000616  D00C               	goto	L6
  3410  000618                     l1972:
  3411  000618  4A1C               	infsnz	createDataPacket@packetIndex,f,c
  3412  00061A  2A1D               	incf	createDataPacket@packetIndex+1,f,c
  3413                           
  3414                           ;main.c: 260: }
  3415  00061C  D00B               	goto	l1980
  3416  00061E                     l1974:
  3417                           
  3418                           ;main.c: 261: else {
  3419                           ;main.c: 262: state = 1;
  3420  00061E  0E01               	movlw	1
  3421  000620  6E1B               	movwf	createDataPacket@state,c
  3422                           
  3423                           ;main.c: 263: ptrPacket[packetIndex++] = 3;
  3424  000622  501C               	movf	createDataPacket@packetIndex,w,c
  3425  000624  2413               	addwf	createDataPacket@ptrPacket,w,c
  3426  000626  6ED9               	movwf	fsr2l,c
  3427  000628  501D               	movf	createDataPacket@packetIndex+1,w,c
  3428  00062A  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3429  00062C  6EDA               	movwf	fsr2h,c
  3430  00062E  0E03               	movlw	3
  3431  000630                     L6:
  3432  000630  6EDF               	movwf	indf2,c
  3433  000632  D7F2               	goto	l1972
  3434  000634                     l1980:
  3435                           
  3436                           ;main.c: 264: }
  3437                           ;main.c: 265: }
  3438                           ;main.c: 267: previousDataBit = dataBit;
  3439  000634  C018  F015         	movff	createDataPacket@dataBit,createDataPacket@previousDataBit
  3440                           
  3441                           ;main.c: 268: byteMask = byteMask << 1;
  3442  000638  501A               	movf	createDataPacket@byteMask,w,c
  3443  00063A  241A               	addwf	createDataPacket@byteMask,w,c
  3444  00063C  6E1A               	movwf	createDataPacket@byteMask,c
  3445  00063E  2A19               	incf	createDataPacket@i,f,c
  3446  000640  D7A0               	goto	l1940
  3447  000642                     l1988:
  3448                           
  3449                           ;main.c: 269: }
  3450                           ;main.c: 270: dataIndex++;
  3451  000642  4A16               	infsnz	createDataPacket@dataIndex,f,c
  3452  000644  2A17               	incf	createDataPacket@dataIndex+1,f,c
  3453  000646                     l1990:
  3454  000646  5011               	movf	createDataPacket@numDataBytes,w,c
  3455  000648  5C16               	subwf	createDataPacket@dataIndex,w,c
  3456  00064A  5012               	movf	createDataPacket@numDataBytes+1,w,c
  3457  00064C  5817               	subwfb	createDataPacket@dataIndex+1,w,c
  3458  00064E  A0D8               	btfss	status,0,c
  3459  000650  D794               	goto	l1938
  3460                           
  3461                           ;main.c: 271: }
  3462                           ;main.c: 272: if (packetIndex >= 1024) return (0);
  3463  000652  0E04               	movlw	4
  3464  000654  5C1D               	subwf	createDataPacket@packetIndex+1,w,c
  3465  000656  A0D8               	btfss	status,0,c
  3466  000658  D005               	goto	l99
  3467  00065A  0E00               	movlw	0
  3468  00065C  6E10               	movwf	?_createDataPacket+1,c
  3469  00065E  0E00               	movlw	0
  3470  000660  6E0F               	movwf	?_createDataPacket,c
  3471  000662  0012               	return	
  3472  000664                     l99:
  3473                           
  3474                           ;main.c: 273: else return(packetIndex);
  3475  000664  C01C  F00F         	movff	createDataPacket@packetIndex,?_createDataPacket
  3476  000668  C01D  F010         	movff	createDataPacket@packetIndex+1,?_createDataPacket+1
  3477  00066C  0012               	return	
  3478  00066E                     __end_of_createDataPacket:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           intcon	equ	0xFF2
  3484                           intcon2	equ	0xFF1
  3485                           postinc0	equ	0xFEE
  3486                           wreg	equ	0xFE8
  3487                           postdec1	equ	0xFE5
  3488                           fsr1h	equ	0xFE2
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _DelayMs *****************
  3496 ;; Defined at:
  3497 ;;		line 12 in file "../delay.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  count           2   14[COMRAM] unsigned short 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  downCount       1   17[COMRAM] unsigned char 
  3502 ;;  i               1   16[COMRAM] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         2       0       0       0       0       0       0
  3513 ;;      Locals:         2       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0
  3515 ;;      Totals:         4       0       0       0       0       0       0
  3516 ;;Total ram usage:        4 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    1
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_main
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text19
  3527  000A1A                     __ptext19:
  3528                           	opt stack 0
  3529  000A1A                     _DelayMs:
  3530                           	opt stack 29
  3531                           
  3532                           ;delay.c: 13: unsigned char i;
  3533                           ;delay.c: 14: while (count--) {
  3534                           
  3535                           ;incstack = 0
  3536  000A1A  D010               	goto	l2126
  3537  000A1C                     l2118:
  3538                           
  3539                           ;delay.c: 15: i=100;
  3540  000A1C  0E64               	movlw	100
  3541  000A1E  6E11               	movwf	DelayMs@i,c
  3542                           
  3543                           ;delay.c: 16: while(i--) {
  3544  000A20  D009               	goto	l2124
  3545  000A22                     l2120:
  3546                           
  3547                           ;delay.c: 17: { unsigned char downCount; downCount = 4; while(downCount--) {asm("nop");a
      +                          sm("nop");} };
  3548  000A22  0E04               	movlw	4
  3549  000A24  6E12               	movwf	DelayMs@downCount,c
  3550  000A26  D002               	goto	l2122
  3551  000A28                     l108:
  3552  000A28  F000               	nop		;# 
  3553  000A2A  F000               	nop		;# 
  3554  000A2C                     l2122:
  3555  000A2C  0612               	decf	DelayMs@downCount,f,c
  3556  000A2E  2812               	incf	DelayMs@downCount,w,c
  3557  000A30  A4D8               	btfss	status,2,c
  3558  000A32  D7FA               	goto	l108
  3559  000A34                     l2124:
  3560  000A34  0611               	decf	DelayMs@i,f,c
  3561  000A36  2811               	incf	DelayMs@i,w,c
  3562  000A38  A4D8               	btfss	status,2,c
  3563  000A3A  D7F3               	goto	l2120
  3564  000A3C                     l2126:
  3565  000A3C  060F               	decf	DelayMs@count,f,c
  3566  000A3E  A0D8               	btfss	status,0,c
  3567  000A40  0610               	decf	DelayMs@count+1,f,c
  3568  000A42  280F               	incf	DelayMs@count,w,c
  3569  000A44  E1EB               	bnz	l2118
  3570  000A46  2810               	incf	DelayMs@count+1,w,c
  3571  000A48  B4D8               	btfsc	status,2,c
  3572  000A4A  0012               	return	
  3573  000A4C  D7E7               	goto	l2118
  3574  000A4E                     __end_of_DelayMs:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           intcon2	equ	0xFF1
  3581                           postinc0	equ	0xFEE
  3582                           wreg	equ	0xFE8
  3583                           postdec1	equ	0xFE5
  3584                           fsr1h	equ	0xFE2
  3585                           fsr1l	equ	0xFE1
  3586                           indf2	equ	0xFDF
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _CRCcalculate *****************
  3592 ;; Defined at:
  3593 ;;		line 107 in file "../CRC Check.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  message         2   27[COMRAM] PTR unsigned char 
  3596 ;;		 -> commandBuffer(64), 
  3597 ;;  nBytes          1   29[COMRAM] unsigned char 
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;  CRCresult       2   30[COMRAM] unsigned short 
  3600 ;;  i               1   32[COMRAM] unsigned char 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  2   27[COMRAM] unsigned short 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3610 ;;      Params:         3       0       0       0       0       0       0
  3611 ;;      Locals:         3       0       0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0
  3613 ;;      Totals:         6       0       0       0       0       0       0
  3614 ;;Total ram usage:        6 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    2
  3617 ;; This function calls:
  3618 ;;		_update_crc_16
  3619 ;; This function is called by:
  3620 ;;		_main
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text20
  3625  000952                     __ptext20:
  3626                           	opt stack 0
  3627  000952                     _CRCcalculate:
  3628                           	opt stack 28
  3629                           
  3630                           ;CRC Check.c: 108: unsigned short CRCresult=0xFFFF;
  3631                           
  3632                           ;incstack = 0
  3633  000952  681F               	setf	CRCcalculate@CRCresult,c
  3634  000954  6820               	setf	CRCcalculate@CRCresult+1,c
  3635                           
  3636                           ;CRC Check.c: 109: unsigned char i;
  3637                           ;CRC Check.c: 113: CRCresult=0xFFFF;
  3638  000956  681F               	setf	CRCcalculate@CRCresult,c
  3639  000958  6820               	setf	CRCcalculate@CRCresult+1,c
  3640                           
  3641                           ;CRC Check.c: 115: for (i=0; i<nBytes; i++)
  3642  00095A  0E00               	movlw	0
  3643  00095C  6E21               	movwf	CRCcalculate@i,c
  3644  00095E  D015               	goto	l1924
  3645  000960                     l1920:
  3646                           
  3647                           ;CRC Check.c: 116: CRCresult=update_crc_16 (CRCresult, message[i]);
  3648  000960  C01F  F00F         	movff	CRCcalculate@CRCresult,update_crc_16@crc
  3649  000964  C020  F010         	movff	CRCcalculate@CRCresult+1,update_crc_16@crc+1
  3650  000968  5021               	movf	CRCcalculate@i,w,c
  3651  00096A  0D01               	mullw	1
  3652  00096C  50F3               	movf	prodl,w,c
  3653  00096E  241C               	addwf	CRCcalculate@message,w,c
  3654  000970  6ED9               	movwf	fsr2l,c
  3655  000972  50F4               	movf	prodh,w,c
  3656  000974  201D               	addwfc	CRCcalculate@message+1,w,c
  3657  000976  6EDA               	movwf	fsr2h,c
  3658  000978  50DF               	movf	indf2,w,c
  3659  00097A  6E11               	movwf	update_crc_16@nextVal,c
  3660  00097C  EC27  F004         	call	_update_crc_16	;wreg free
  3661  000980  C00F  F01F         	movff	?_update_crc_16,CRCcalculate@CRCresult
  3662  000984  C010  F020         	movff	?_update_crc_16+1,CRCcalculate@CRCresult+1
  3663  000988  2A21               	incf	CRCcalculate@i,f,c
  3664  00098A                     l1924:
  3665  00098A  501E               	movf	CRCcalculate@nBytes,w,c
  3666  00098C  5C21               	subwf	CRCcalculate@i,w,c
  3667  00098E  A0D8               	btfss	status,0,c
  3668  000990  D7E7               	goto	l1920
  3669                           
  3670                           ;CRC Check.c: 118: return(CRCresult);
  3671  000992  C01F  F01C         	movff	CRCcalculate@CRCresult,?_CRCcalculate
  3672  000996  C020  F01D         	movff	CRCcalculate@CRCresult+1,?_CRCcalculate+1
  3673  00099A  0012               	return		;funcret
  3674  00099C                     __end_of_CRCcalculate:
  3675                           	opt stack 0
  3676                           tblptru	equ	0xFF8
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon	equ	0xFF2
  3680                           intcon2	equ	0xFF1
  3681                           postinc0	equ	0xFEE
  3682                           wreg	equ	0xFE8
  3683                           postdec1	equ	0xFE5
  3684                           fsr1h	equ	0xFE2
  3685                           fsr1l	equ	0xFE1
  3686                           indf2	equ	0xFDF
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _update_crc_16 *****************
  3692 ;; Defined at:
  3693 ;;		line 91 in file "../CRC Check.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  crc             2   14[COMRAM] unsigned short 
  3696 ;;  nextVal         1   16[COMRAM] unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  shortVal        2   25[COMRAM] unsigned short 
  3699 ;;  tmp             2   23[COMRAM] unsigned short 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  2   14[COMRAM] unsigned short 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3709 ;;      Params:         3       0       0       0       0       0       0
  3710 ;;      Locals:         4       0       0       0       0       0       0
  3711 ;;      Temps:          6       0       0       0       0       0       0
  3712 ;;      Totals:        13       0       0       0       0       0       0
  3713 ;;Total ram usage:       13 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    1
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		_CRCcalculate
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text21
  3724  00084E                     __ptext21:
  3725                           	opt stack 0
  3726  00084E                     _update_crc_16:
  3727                           	opt stack 28
  3728                           
  3729                           ;CRC Check.c: 92: unsigned short tmp, shortVal;
  3730                           ;CRC Check.c: 94: shortVal = 0x00ff & (unsigned short) nextVal;
  3731                           
  3732                           ;incstack = 0
  3733  00084E  C011  F01A         	movff	update_crc_16@nextVal,update_crc_16@shortVal
  3734  000852  6A1B               	clrf	update_crc_16@shortVal+1,c
  3735                           
  3736                           ;CRC Check.c: 95: tmp = crc^shortVal;
  3737  000854  501A               	movf	update_crc_16@shortVal,w,c
  3738  000856  180F               	xorwf	update_crc_16@crc,w,c
  3739  000858  6E18               	movwf	update_crc_16@tmp,c
  3740  00085A  501B               	movf	update_crc_16@shortVal+1,w,c
  3741  00085C  1810               	xorwf	update_crc_16@crc+1,w,c
  3742  00085E  6E19               	movwf	update_crc_16@tmp+1,c
  3743                           
  3744                           ;CRC Check.c: 96: crc = (crc >> 8) ^ crc_tab16 [tmp&0xff];
  3745  000860  0EFF               	movlw	255
  3746  000862  1418               	andwf	update_crc_16@tmp,w,c
  3747  000864  6E12               	movwf	??_update_crc_16& (0+255),c
  3748  000866  0E00               	movlw	0
  3749  000868  1419               	andwf	update_crc_16@tmp+1,w,c
  3750  00086A  6E13               	movwf	(??_update_crc_16+1)& (0+255),c
  3751  00086C  90D8               	bcf	status,0,c
  3752  00086E  3612               	rlcf	??_update_crc_16,f,c
  3753  000870  3613               	rlcf	??_update_crc_16+1,f,c
  3754  000872  0EFF               	movlw	low _crc_tab16
  3755  000874  2412               	addwf	??_update_crc_16,w,c
  3756  000876  6EF6               	movwf	tblptrl,c
  3757  000878  0E7D               	movlw	high _crc_tab16
  3758  00087A  2013               	addwfc	??_update_crc_16+1,w,c
  3759  00087C  6EF7               	movwf	tblptrh,c
  3760  00087E                     	if	0	;There are less than 3 active tblptr bytes
  3761  00087E                     	endif
  3762  00087E  0009               	tblrd		*+
  3763  000880  CFF5 F014          	movff	tablat,??_update_crc_16+2
  3764  000884  0009               	tblrd		*+
  3765  000886  CFF5 F015          	movff	tablat,??_update_crc_16+3
  3766  00088A  C00F  F016         	movff	update_crc_16@crc,??_update_crc_16+4
  3767  00088E  C010  F017         	movff	update_crc_16@crc+1,??_update_crc_16+5
  3768  000892  C017  F016         	movff	??_update_crc_16+5,??_update_crc_16+4
  3769  000896  6A17               	clrf	??_update_crc_16+5,c
  3770  000898  5014               	movf	??_update_crc_16+2,w,c
  3771  00089A  1816               	xorwf	??_update_crc_16+4,w,c
  3772  00089C  6E0F               	movwf	update_crc_16@crc,c
  3773  00089E  5015               	movf	??_update_crc_16+3,w,c
  3774  0008A0  1817               	xorwf	??_update_crc_16+5,w,c
  3775  0008A2  6E10               	movwf	update_crc_16@crc+1,c
  3776                           
  3777                           ;CRC Check.c: 97: return crc;
  3778  0008A4  C00F  F00F         	movff	update_crc_16@crc,?_update_crc_16
  3779  0008A8  C010  F010         	movff	update_crc_16@crc+1,?_update_crc_16+1
  3780  0008AC  0012               	return	
  3781  0008AE                     __end_of_update_crc_16:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           intcon2	equ	0xFF1
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1h	equ	0xFE2
  3795                           fsr1l	equ	0xFE1
  3796                           indf2	equ	0xFDF
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _isr *****************
  3802 ;; Defined at:
  3803 ;;		line 210 in file "../main.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3817 ;;      Params:         0       0       0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0       0       0
  3819 ;;      Temps:         14       0       0       0       0       0       0
  3820 ;;      Totals:        14       0       0       0       0       0       0
  3821 ;;Total ram usage:       14 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		Interrupt level 2
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	intcode
  3831  000008                     __pintcode:
  3832                           	opt stack 0
  3833  000008                     _isr:
  3834                           	opt stack 25
  3835                           
  3836                           ;incstack = 0
  3837  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3838  00000A  CFFA F001          	movff	pclath,??_isr
  3839  00000E  CFFB F002          	movff	pclatu,??_isr+1
  3840  000012  CFE9 F003          	movff	fsr0l,??_isr+2
  3841  000016  CFEA F004          	movff	fsr0h,??_isr+3
  3842  00001A  CFE1 F005          	movff	fsr1l,??_isr+4
  3843  00001E  CFE2 F006          	movff	fsr1h,??_isr+5
  3844  000022  CFD9 F007          	movff	fsr2l,??_isr+6
  3845  000026  CFDA F008          	movff	fsr2h,??_isr+7
  3846  00002A  CFF3 F009          	movff	prodl,??_isr+8
  3847  00002E  CFF4 F00A          	movff	prodh,??_isr+9
  3848  000032  CFF6 F00B          	movff	tblptrl,??_isr+10
  3849  000036  CFF7 F00C          	movff	tblptrh,??_isr+11
  3850  00003A  CFF8 F00D          	movff	tblptru,??_isr+12
  3851  00003E  CFF5 F00E          	movff	tablat,??_isr+13
  3852                           
  3853                           ;main.c: 211: if (INTCONbits.INT0IF) {
  3854  000042  A2F2               	btfss	intcon,1,c	;volatile
  3855  000044  D003               	goto	i2l1580
  3856                           
  3857                           ;main.c: 212: INTCONbits.INT0IF = 0;
  3858  000046  92F2               	bcf	intcon,1,c	;volatile
  3859                           
  3860                           ;main.c: 213: pushFlag = !0;
  3861  000048  0E01               	movlw	1
  3862  00004A  6E40               	movwf	_pushFlag,c
  3863  00004C                     i2l1580:
  3864                           
  3865                           ;main.c: 214: }
  3866                           ;main.c: 216: if (INTCONbits.RBIF) {
  3867  00004C  A0F2               	btfss	intcon,0,c	;volatile
  3868  00004E  D003               	goto	i2l79
  3869                           
  3870                           ;main.c: 217: PORTBreg = PORTB;
  3871  000050  CF81 F03F          	movff	3969,_PORTBreg	;volatile
  3872                           
  3873                           ;main.c: 218: INTCONbits.RBIF = 0;
  3874  000054  90F2               	bcf	intcon,0,c	;volatile
  3875  000056                     i2l79:
  3876  000056  C00E  FFF5         	movff	??_isr+13,tablat
  3877  00005A  C00D  FFF8         	movff	??_isr+12,tblptru
  3878  00005E  C00C  FFF7         	movff	??_isr+11,tblptrh
  3879  000062  C00B  FFF6         	movff	??_isr+10,tblptrl
  3880  000066  C00A  FFF4         	movff	??_isr+9,prodh
  3881  00006A  C009  FFF3         	movff	??_isr+8,prodl
  3882  00006E  C008  FFDA         	movff	??_isr+7,fsr2h
  3883  000072  C007  FFD9         	movff	??_isr+6,fsr2l
  3884  000076  C006  FFE2         	movff	??_isr+5,fsr1h
  3885  00007A  C005  FFE1         	movff	??_isr+4,fsr1l
  3886  00007E  C004  FFEA         	movff	??_isr+3,fsr0h
  3887  000082  C003  FFE9         	movff	??_isr+2,fsr0l
  3888  000086  C002  FFFB         	movff	??_isr+1,pclatu
  3889  00008A  C001  FFFA         	movff	??_isr,pclath
  3890  00008E  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3891  000090  0011               	retfie		f
  3892  000092                     __end_of_isr:
  3893                           	opt stack 0
  3894                           pclatu	equ	0xFFB
  3895                           pclath	equ	0xFFA
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           intcon	equ	0xFF2
  3903                           intcon2	equ	0xFF1
  3904                           postinc0	equ	0xFEE
  3905                           fsr0h	equ	0xFEA
  3906                           fsr0l	equ	0xFE9
  3907                           wreg	equ	0xFE8
  3908                           postdec1	equ	0xFE5
  3909                           fsr1h	equ	0xFE2
  3910                           fsr1l	equ	0xFE1
  3911                           indf2	equ	0xFDF
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           pclatu	equ	0xFFB
  3916                           pclath	equ	0xFFA
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           intcon2	equ	0xFF1
  3925                           postinc0	equ	0xFEE
  3926                           fsr0h	equ	0xFEA
  3927                           fsr0l	equ	0xFE9
  3928                           wreg	equ	0xFE8
  3929                           postdec1	equ	0xFE5
  3930                           fsr1h	equ	0xFE2
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937                           	psect	rparam
  3938  0000                     pclatu	equ	0xFFB
  3939                           pclath	equ	0xFFA
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           intcon2	equ	0xFF1
  3948                           postinc0	equ	0xFEE
  3949                           fsr0h	equ	0xFEA
  3950                           fsr0l	equ	0xFE9
  3951                           wreg	equ	0xFE8
  3952                           postdec1	equ	0xFE5
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960                           	psect	temp
  3961  000041                     btemp:
  3962                           	opt stack 0
  3963  000041                     	ds	1
  3964  0000                     int$flags	set	btemp
  3965                           pclatu	equ	0xFFB
  3966                           pclath	equ	0xFFA
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           intcon2	equ	0xFF1
  3975                           postinc0	equ	0xFEE
  3976                           fsr0h	equ	0xFEA
  3977                           fsr0l	equ	0xFE9
  3978                           wreg	equ	0xFE8
  3979                           postdec1	equ	0xFE5
  3980                           fsr1h	equ	0xFE2
  3981                           fsr1l	equ	0xFE1
  3982                           indf2	equ	0xFDF
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    512
    Data        0
    BSS         1222
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      64
    BANK0           128      0      64
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    xmitPacket@ptrDelay	PTR unsigned char  size(2) Largest target is 1024
		 -> arrDataPacket(BIGRAM[1024]), 

    readRegisters@registerPtr	PTR unsigned char  size(2) Largest target is 6
		 -> initMMA8452@accelData(COMRAM[4]), main@accelerometerBuffer(COMRAM[6]), main@interruptSource(COMRAM[1]), main@sysModRegister(COMRAM[1]), 
		 -> main@motionDetection(COMRAM[1]), 

    CRCcalculate@message	PTR unsigned char  size(2) Largest target is 64
		 -> commandBuffer(BANK0[64]), 

    createDataPacket@ptrPacket	PTR unsigned char  size(2) Largest target is 1024
		 -> arrDataPacket(BIGRAM[1024]), 

    createDataPacket@ptrData	PTR unsigned char  size(2) Largest target is 64
		 -> commandBuffer(BANK0[64]), 


Critical Paths under _main in COMRAM

    _main->_initMMA8452
    _initMMA8452->_readRegisters
    _writeByteToRegister->_i2c_SendControlByte
    _readRegisters->_setRegister
    _setRegister->_i2c_SendControlByte
    _sendREADcommand->_i2c_SendControlByte
    _i2c_SendControlByte->_i2c_SendByte
    _CRCcalculate->_update_crc_16

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   12288
                                             37 COMRAM    21    21      0
                       _CRCcalculate
                            _DelayMs
                   _createDataPacket
                  _getTwosComplement
                               _init
                        _initMMA8452
                     _initialize_I2C
                      _readRegisters
                          _xmitBreak
                         _xmitPacket
 ---------------------------------------------------------------------------------
 (1) _xmitPacket                                           8     4      4     384
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _xmitBreak                                            3     3      0     264
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialize_I2C                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMMA8452                                          5     5      0    5652
                                             32 COMRAM     5     5      0
                      _readRegisters
                _writeByteToRegister
 ---------------------------------------------------------------------------------
 (2) _writeByteToRegister                                  3     1      2    2056
                                             18 COMRAM     3     1      2
                 _i2c_GetAcknowledge
                       _i2c_SendByte
                _i2c_SendControlByte
                          _i2c_Start
                           _i2c_Stop
 ---------------------------------------------------------------------------------
 (1) _readRegisters                                       12     8      4    3161
                                             20 COMRAM    12     8      4
                       _i2c_ReadByte
                _i2c_SendAcknowledge
                           _i2c_Stop
                    _sendREADcommand
                        _setRegister
 ---------------------------------------------------------------------------------
 (2) _setRegister                                          2     1      1     434
                                             18 COMRAM     2     1      1
                 _i2c_GetAcknowledge
                       _i2c_SendByte
                _i2c_SendControlByte
                          _i2c_Start
 ---------------------------------------------------------------------------------
 (2) _sendREADcommand                                      1     1      0     326
                                             18 COMRAM     1     1      0
                 _i2c_GetAcknowledge
                _i2c_SendControlByte
                          _i2c_Start
 ---------------------------------------------------------------------------------
 (3) _i2c_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_SendControlByte                                  3     2      1     281
                                             15 COMRAM     3     2      1
                       _i2c_SendByte
 ---------------------------------------------------------------------------------
 (4) _i2c_SendByte                                         1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_GetAcknowledge                                   1     1      0      23
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_SendAcknowledge                                  1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c_ReadByte                                         1     1      0      23
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTwosComplement                                    8     6      2     396
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _createDataPacket                                    15     9      6     873
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              4     2      2     196
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CRCcalculate                                         6     3      3     528
                                             27 COMRAM     6     3      3
                      _update_crc_16
 ---------------------------------------------------------------------------------
 (2) _update_crc_16                                       13    10      3     263
                                             14 COMRAM    13    10      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CRCcalculate
     _update_crc_16
   _DelayMs
   _createDataPacket
   _getTwosComplement
   _init
   _initMMA8452
     _readRegisters
       _i2c_ReadByte
       _i2c_SendAcknowledge
       _i2c_Stop
       _sendREADcommand
         _i2c_GetAcknowledge
         _i2c_SendControlByte
           _i2c_SendByte
         _i2c_Start
       _setRegister
         _i2c_GetAcknowledge
         _i2c_SendByte
         _i2c_SendControlByte
           _i2c_SendByte
         _i2c_Start
     _writeByteToRegister
       _i2c_GetAcknowledge
       _i2c_SendByte
       _i2c_SendControlByte
         _i2c_SendByte
       _i2c_Start
       _i2c_Stop
   _initialize_I2C
   _readRegisters
     _i2c_ReadByte
     _i2c_SendAcknowledge
     _i2c_Stop
     _sendREADcommand
       _i2c_GetAcknowledge
       _i2c_SendControlByte
         _i2c_SendByte
       _i2c_Start
     _setRegister
       _i2c_GetAcknowledge
       _i2c_SendByte
       _i2c_SendControlByte
         _i2c_SendByte
       _i2c_Start
   _xmitBreak
   _xmitPacket

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     400      17       66.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      40       5       50.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      40       1       50.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100      15        0.0%
DATA                 0      0     500       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Dec 28 17:18:28 2016

                    _update_crc_16 084E       i2c_SendControlByte@direction 0010  
                               l66 052C                                 l99 0664  
                     __CFG_CP0$OFF 000000                       __CFG_CP1$OFF 000000  
                     __CFG_CP2$OFF 000000                       __CFG_CP3$OFF 000000  
                      __CFG_OSC$HS 000000                   i2c_SendByte@byte 000F  
                              l203 02D2                                l108 0A28  
                              l220 0B0E                                l214 0B18  
                              l226 0AE6                                l244 0AC4  
                              l245 0AC6                                l238 0AF2  
                              l246 0AC8                                l191 0186  
                              l271 0790                                l184 00C6  
                              l272 0792                                l265 076A  
                              l187 0104                                l196 0212  
                              l276 07A6                                l189 0142  
                              l277 07A8                                _isr 0008  
                              prod 000FF3                                wreg 000FE8  
                     ?_initMMA8452 0001                      ?_CRCcalculate 001C  
     __size_of_i2c_SendAcknowledge 0016                       __CFG_LVP$OFF 000000  
                     __CFG_WDT$OFF 000000                               l2010 068A  
                             l2002 0672                               l2020 06A2  
                             l2012 068C                               l2004 067A  
                             l2022 06A8                               l2006 067C  
                             l2102 077C                               l2120 0A22  
                             l2032 06C0                               l2040 06D0  
                             l2024 06AA                               l2112 07AC  
                             l2122 0A2C                               l2034 06C6  
                             l2114 07AE                               l2106 0796  
                             l2124 0A34                               l2060 0704  
                             l2044 06DE                               l2052 06EE  
                             l2036 06C8                               l2028 06B2  
                             l2108 0798                               l2220 0510  
                             l2140 035A                               l2118 0A1C  
                             l2126 0A3C                               l2046 06E4  
                             l2070 071E                               l2056 06FC  
                             l2064 070C                               l2048 06E6  
                             l2072 0720                               l2136 0312  
                             l2058 0702                               l2090 075C  
                             l2084 074E                               l2076 0732  
                             l1614 0A9C                               l1720 094A  
                             l2096 0770                               l1634 0A16  
                             l1714 0936                               l2098 0772  
                             l1628 0A02                               l1708 0922  
                             l1820 01AA                               l1670 07EE  
                             l1662 07D8                               l1806 0166  
                             l1920 0960                               l1912 08F8  
                             l1680 083E                               l1656 07C4  
                             l1832 01DA                               l1826 01C2  
                             l1924 098A                               l1940 0582  
                             l1932 0552                               l1676 0836  
                             l1668 07E8                               l1852 0232  
                             l1678 083C                               l1870 027A  
                             l1838 01F2                               l1960 05DA  
                             l1944 058A                               l1936 055C  
                             l1864 0262                               l1792 0122  
                             l1938 057A                               l1882 02B2  
                             l1858 024A                               l1778 00E4  
                             l1972 0618                               l1980 0634  
                             l1948 05A4                               l1876 0292  
                             l1974 061E                               l1966 05FE  
                             l1990 0646                               l1896 02F0  
                             l1988 0642                               ?_isr 0001  
                      main@convert 0038                               u1205 08D2  
                 ??_initialize_I2C 000F                               i2l79 0056  
                     __CFG_PWRT$ON 000000                     ??_i2c_ReadByte 000F  
                             _main 02F4                               _init 0A4E  
      readRegisters@deviceREGISTER 0015                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             btemp 0041                               pclat 000FFA  
                             prodh 000FF4                               prodl 000FF3  
                   ??_i2c_SendByte 000F                               start 0092  
                    __CFG_IESO$OFF 000000                    __end_of_DelayMs 0A4E  
                    __CFG_MCLRE$ON 000000                     ?_update_crc_16 000F  
                     ___param_bank 000010         i2c_SendControlByte@outByte 0012  
            createDataPacket@state 001B                              ??_isr 0001  
   i2c_SendControlByte@controlByte 0011                              ?_main 0001  
                            ?_init 0001                     __CFG_DEBUG$OFF 000000  
                            _PORTB 000F81                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
     __size_of_writeByteToRegister 0050                     __CFG_FCMEN$OFF 000000  
                   ??_CRCcalculate 001F                       main@rawVectx 002F  
                     main@rawVecty 0031                       main@rawVectz 0033  
                            main@i 003A                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                  __initialization 099C                       __end_of_main 0536  
                     __end_of_init 0A7C                   __end_of_i2c_Stop 0B20  
                           ??_main 0026                             ??_init 000F  
                    __activetblptr 000002                       ?_setRegister 0013  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
           __size_of_readRegisters 0096                 __size_of_i2c_Start 000A  
                           i2l1580 004C                             _INTCON 000FF2  
                        ??_DelayMs 0011                             _SSPADD 000FC8  
                           _SSPBUF 000FC9                  _getTwosComplement 08AE  
                  ??_update_crc_16 0012       __size_of_i2c_SendControlByte 0010  
               ?_getTwosComplement 000F                     __CFG_XINST$OFF 000000  
      writeByteToRegister@dataByte 0014                ??_getTwosComplement 0011  
                           clear_0 09A4                             clear_1 09B6  
                           clear_2 09C2                   update_crc_16@crc 000F  
                 update_crc_16@tmp 0018        writeByteToRegister@deviceID 0015  
             __end_of_i2c_ReadByte 0B00               __end_of_i2c_SendByte 0AF0  
                     __mediumconst 7DFE        createDataPacket@packetIndex 001C  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ?_createDataPacket 000F  
             __size_of_initMMA8452 025E                 ??_createDataPacket 0015  
        __end_of_getTwosComplement 0902                         __accesstop 0080  
          __end_of__initialization 09D4                    __CFG_PBADEN$OFF 000000  
                createDataPacket@i 0019                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001               __end_of_CRCcalculate 099C  
              _i2c_SendAcknowledge 0ABA                      _readRegisters 07B8  
                __end_of_i2c_Start 0B16            createDataPacket@dataBit 0018  
                    CRCcalculate@i 0021            createDataPacket@ptrData 000F  
             ?_i2c_SendAcknowledge 0001                         __pbssBANK0 0080  
                       __pbssBANK1 0100                          ?_i2c_Stop 0001  
            CRCcalculate@CRCresult 001F                 CRCcalculate@nBytes 001E  
writeByteToRegister@deviceREGISTER 0013                _writeByteToRegister 0902  
               xmitPacket@numBytes 000F                   initMMA8452@F2758 003B  
      __size_of_i2c_GetAcknowledge 000C                 xmitPacket@ptrDelay 0011  
         __size_of_sendREADcommand 0024                     ?_readRegisters 0015  
            i2c_GetAcknowledge@ack 000F                            _INTCON2 000FF1  
             ?_writeByteToRegister 0013             getTwosComplement@value 0015  
            ??_i2c_SendAcknowledge 000F                            _SSPCON1 000FC6  
                   main@initResult 0026                            _SSPSTAT 000FC7  
             __size_of_setRegister 0038                 __size_of_xmitBreak 00A8  
                       ??_i2c_Stop 000F         __size_of_getTwosComplement 0054  
                          _DelayMs 0A1A                  __end_of_crc_tab16 7FFF  
         getTwosComplement@LSBbyte 000F           getTwosComplement@MSBbyte 0014  
                          __Hparam 0000                            __Lparam 0000  
         readRegisters@registerPtr 0017              __size_of_i2c_ReadByte 0010  
                  __CFG_STVREN$OFF 000000                            __pcinit 099C  
            __size_of_i2c_SendByte 0010                            __ramtop 0600  
                          __ptext0 02F4                            __ptext1 0716  
                          __ptext2 066E                            __ptext3 0AA0  
                          __ptext4 0096                            __ptext5 0902  
                          __ptext6 07B8                            __ptext7 09E2  
                          __ptext8 0A7C                            __ptext9 0B0C  
               xmitBreak@delayLoop 0011                 xmitBreak@delayTime 0010  
            ??_writeByteToRegister 0015                       __size_of_isr 008A  
              _i2c_SendControlByte 0AD0               end_of_initialization 09D4  
        readRegisters@numRegisters 0016          i2c_SendAcknowledge@status 000F  
                    __Lmediumconst 7DFE                       _i2c_ReadByte 0AF0  
            __size_of_CRCcalculate 004A               ?_i2c_SendControlByte 0010  
                     _i2c_SendByte 0AE0                    ??_readRegisters 0019  
          __size_of_initialize_I2C 001A                setRegister@deviceID 0014  
                          postdec1 000FE5                            postinc0 000FEE  
                       _testBuffer 0100               update_crc_16@nextVal 0011  
                __end_of_xmitBreak 0716                  ??_sendREADcommand 0013  
                        _PORTAbits 000F80                          _PORTBbits 000F81  
                     _CRCcalculate 0952                          _TXSTAbits 000FAC  
            ??_i2c_SendControlByte 0011                         _xmitPacket 0716  
            __end_of_update_crc_16 08AE          __size_of_createDataPacket 0138  
                     DelayMs@count 000F                          _i2c_Start 0B0C  
              start_initialization 099C            sendREADcommand@deviceID 0013  
                    ??_initMMA8452 0021                        __end_of_isr 0092  
         createDataPacket@byteMask 001A                  __size_of_i2c_Stop 000A  
              xmitPacket@delayLoop 0016                xmitPacket@delayTime 0015  
                 __CFG_LPT1OSC$OFF 000000               initMMA8452@accelData 0021  
                      __pbssBIGRAM 0180                         ?_i2c_Start 0001  
                      __pbssCOMRAM 003B                CRCcalculate@message 001C  
                   readRegisters@i 0020                           ?_DelayMs 000F  
            readRegisters@deviceID 001F       createDataPacket@numDataBytes 0011  
              __end_of_initMMA8452 02F4                      _arrDataPacket 0180  
       __end_of_i2c_GetAcknowledge 0B0C                        ?_xmitPacket 000F  
                  xmitPacket@index 0013                  __CFG_CCP2MX$PORTC 000000  
                   _initialize_I2C 0AA0                          __pintcode 0008  
                    __pmediumconst 7DFE             initMMA8452@commandByte 0025  
                        _crc_tab16 7DFF        __end_of_i2c_SendAcknowledge 0AD0  
        setRegister@deviceREGISTER 0013                      ??_setRegister 0014  
        createDataPacket@dataIndex 0016                           _LATAbits 000F89  
                         DelayMs@i 0011             __end_of_initialize_I2C 0ABA  
                  _sendREADcommand 0A7C                           _PIR1bits 000F9E  
                 i2c_ReadByte@byte 000F                   _createDataPacket 0536  
                         _PORTBreg 003F        __end_of_writeByteToRegister 0952  
                      ??_i2c_Start 000F                          _xmitBreak 066E  
              __size_of_xmitPacket 00A2                 main@numBytesToSend 0027  
                      _initMMA8452 0096                        _INTCON2bits 000FF1  
                         _i2c_Stop 0B16                __end_of_setRegister 0A1A  
                 __size_of_DelayMs 0034                    ?_initialize_I2C 0001  
                         __Hrparam 0000                           __Lrparam 0000  
        createDataPacket@ptrPacket 0013              __end_of_readRegisters 084E  
                       ?_xmitBreak 0001                           __ptext10 0AD0  
                         __ptext11 0AE0                           __ptext20 0952  
                         __ptext12 0B00                           __ptext21 084E  
                         __ptext13 0B16                           __ptext14 0ABA  
                         __ptext15 0AF0                           __ptext16 0A4E  
                         __ptext17 08AE                           __ptext18 0536  
                         __ptext19 0A1A    createDataPacket@previousDataBit 0015  
      __end_of_i2c_SendControlByte 0AE0                main@interruptSource 0037  
          __end_of_sendREADcommand 0AA0                      __size_of_main 0242  
                    __size_of_init 002E                           int$flags 0041  
                         _pushFlag 0040                main@motionDetection 0036  
                       _INTCONbits 000FF2            xmitBreak@numStartPulses 000F  
                      _setRegister 09E2             __size_of_update_crc_16 0060  
               main@sysModRegister 0035                           intlevel2 0000  
                     ??_xmitPacket 0013                      _commandBuffer 0080  
                 DelayMs@downCount 0012                 _i2c_GetAcknowledge 0B00  
                      ??_xmitBreak 000F              update_crc_16@shortVal 001A  
               __end_of_xmitPacket 07B8                ?_i2c_GetAcknowledge 0001  
         __end_of_createDataPacket 066E                        _SSPCON1bits 000FC6  
                      _SSPCON2bits 000FC5                   ?_sendREADcommand 0001  
                    ?_i2c_ReadByte 0001            main@accelerometerBuffer 0029  
                    ?_i2c_SendByte 0001               ??_i2c_GetAcknowledge 000F  
