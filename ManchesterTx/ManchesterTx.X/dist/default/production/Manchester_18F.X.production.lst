

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Sep 08 15:29:19 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 1.42
    40                           ; Generated 13/04/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18LF2520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	mediumconst
    75  007DFE                     __pmediumconst:
    76                           	opt stack 0
    77  007DFE  00                 	db	0
    78  007DFF                     _crc_tab16:
    79                           	opt stack 0
    80  007DFF  0000               	dw	0
    81  007E01  C0C1               	dw	49345
    82  007E03  C181               	dw	49537
    83  007E05  0140               	dw	320
    84  007E07  C301               	dw	49921
    85  007E09  03C0               	dw	960
    86  007E0B  0280               	dw	640
    87  007E0D  C241               	dw	49729
    88  007E0F  C601               	dw	50689
    89  007E11  06C0               	dw	1728
    90  007E13  0780               	dw	1920
    91  007E15  C741               	dw	51009
    92  007E17  0500               	dw	1280
    93  007E19  C5C1               	dw	50625
    94  007E1B  C481               	dw	50305
    95  007E1D  0440               	dw	1088
    96  007E1F  CC01               	dw	52225
    97  007E21  0CC0               	dw	3264
    98  007E23  0D80               	dw	3456
    99  007E25  CD41               	dw	52545
   100  007E27  0F00               	dw	3840
   101  007E29  CFC1               	dw	53185
   102  007E2B  CE81               	dw	52865
   103  007E2D  0E40               	dw	3648
   104  007E2F  0A00               	dw	2560
   105  007E31  CAC1               	dw	51905
   106  007E33  CB81               	dw	52097
   107  007E35  0B40               	dw	2880
   108  007E37  C901               	dw	51457
   109  007E39  09C0               	dw	2496
   110  007E3B  0880               	dw	2176
   111  007E3D  C841               	dw	51265
   112  007E3F  D801               	dw	55297
   113  007E41  18C0               	dw	6336
   114  007E43  1980               	dw	6528
   115  007E45  D941               	dw	55617
   116  007E47  1B00               	dw	6912
   117  007E49  DBC1               	dw	56257
   118  007E4B  DA81               	dw	55937
   119  007E4D  1A40               	dw	6720
   120  007E4F  1E00               	dw	7680
   121  007E51  DEC1               	dw	57025
   122  007E53  DF81               	dw	57217
   123  007E55  1F40               	dw	8000
   124  007E57  DD01               	dw	56577
   125  007E59  1DC0               	dw	7616
   126  007E5B  1C80               	dw	7296
   127  007E5D  DC41               	dw	56385
   128  007E5F  1400               	dw	5120
   129  007E61  D4C1               	dw	54465
   130  007E63  D581               	dw	54657
   131  007E65  1540               	dw	5440
   132  007E67  D701               	dw	55041
   133  007E69  17C0               	dw	6080
   134  007E6B  1680               	dw	5760
   135  007E6D  D641               	dw	54849
   136  007E6F  D201               	dw	53761
   137  007E71  12C0               	dw	4800
   138  007E73  1380               	dw	4992
   139  007E75  D341               	dw	54081
   140  007E77  1100               	dw	4352
   141  007E79  D1C1               	dw	53697
   142  007E7B  D081               	dw	53377
   143  007E7D  1040               	dw	4160
   144  007E7F  F001               	dw	61441
   145  007E81  30C0               	dw	12480
   146  007E83  3180               	dw	12672
   147  007E85  F141               	dw	61761
   148  007E87  3300               	dw	13056
   149  007E89  F3C1               	dw	62401
   150  007E8B  F281               	dw	62081
   151  007E8D  3240               	dw	12864
   152  007E8F  3600               	dw	13824
   153  007E91  F6C1               	dw	63169
   154  007E93  F781               	dw	63361
   155  007E95  3740               	dw	14144
   156  007E97  F501               	dw	62721
   157  007E99  35C0               	dw	13760
   158  007E9B  3480               	dw	13440
   159  007E9D  F441               	dw	62529
   160  007E9F  3C00               	dw	15360
   161  007EA1  FCC1               	dw	64705
   162  007EA3  FD81               	dw	64897
   163  007EA5  3D40               	dw	15680
   164  007EA7  FF01               	dw	65281
   165  007EA9  3FC0               	dw	16320
   166  007EAB  3E80               	dw	16000
   167  007EAD  FE41               	dw	65089
   168  007EAF  FA01               	dw	64001
   169  007EB1  3AC0               	dw	15040
   170  007EB3  3B80               	dw	15232
   171  007EB5  FB41               	dw	64321
   172  007EB7  3900               	dw	14592
   173  007EB9  F9C1               	dw	63937
   174  007EBB  F881               	dw	63617
   175  007EBD  3840               	dw	14400
   176  007EBF  2800               	dw	10240
   177  007EC1  E8C1               	dw	59585
   178  007EC3  E981               	dw	59777
   179  007EC5  2940               	dw	10560
   180  007EC7  EB01               	dw	60161
   181  007EC9  2BC0               	dw	11200
   182  007ECB  2A80               	dw	10880
   183  007ECD  EA41               	dw	59969
   184  007ECF  EE01               	dw	60929
   185  007ED1  2EC0               	dw	11968
   186  007ED3  2F80               	dw	12160
   187  007ED5  EF41               	dw	61249
   188  007ED7  2D00               	dw	11520
   189  007ED9  EDC1               	dw	60865
   190  007EDB  EC81               	dw	60545
   191  007EDD  2C40               	dw	11328
   192  007EDF  E401               	dw	58369
   193  007EE1  24C0               	dw	9408
   194  007EE3  2580               	dw	9600
   195  007EE5  E541               	dw	58689
   196  007EE7  2700               	dw	9984
   197  007EE9  E7C1               	dw	59329
   198  007EEB  E681               	dw	59009
   199  007EED  2640               	dw	9792
   200  007EEF  2200               	dw	8704
   201  007EF1  E2C1               	dw	58049
   202  007EF3  E381               	dw	58241
   203  007EF5  2340               	dw	9024
   204  007EF7  E101               	dw	57601
   205  007EF9  21C0               	dw	8640
   206  007EFB  2080               	dw	8320
   207  007EFD  E041               	dw	57409
   208  007EFF  A001               	dw	40961
   209  007F01  60C0               	dw	24768
   210  007F03  6180               	dw	24960
   211  007F05  A141               	dw	41281
   212  007F07  6300               	dw	25344
   213  007F09  A3C1               	dw	41921
   214  007F0B  A281               	dw	41601
   215  007F0D  6240               	dw	25152
   216  007F0F  6600               	dw	26112
   217  007F11  A6C1               	dw	42689
   218  007F13  A781               	dw	42881
   219  007F15  6740               	dw	26432
   220  007F17  A501               	dw	42241
   221  007F19  65C0               	dw	26048
   222  007F1B  6480               	dw	25728
   223  007F1D  A441               	dw	42049
   224  007F1F  6C00               	dw	27648
   225  007F21  ACC1               	dw	44225
   226  007F23  AD81               	dw	44417
   227  007F25  6D40               	dw	27968
   228  007F27  AF01               	dw	44801
   229  007F29  6FC0               	dw	28608
   230  007F2B  6E80               	dw	28288
   231  007F2D  AE41               	dw	44609
   232  007F2F  AA01               	dw	43521
   233  007F31  6AC0               	dw	27328
   234  007F33  6B80               	dw	27520
   235  007F35  AB41               	dw	43841
   236  007F37  6900               	dw	26880
   237  007F39  A9C1               	dw	43457
   238  007F3B  A881               	dw	43137
   239  007F3D  6840               	dw	26688
   240  007F3F  7800               	dw	30720
   241  007F41  B8C1               	dw	47297
   242  007F43  B981               	dw	47489
   243  007F45  7940               	dw	31040
   244  007F47  BB01               	dw	47873
   245  007F49  7BC0               	dw	31680
   246  007F4B  7A80               	dw	31360
   247  007F4D  BA41               	dw	47681
   248  007F4F  BE01               	dw	48641
   249  007F51  7EC0               	dw	32448
   250  007F53  7F80               	dw	32640
   251  007F55  BF41               	dw	48961
   252  007F57  7D00               	dw	32000
   253  007F59  BDC1               	dw	48577
   254  007F5B  BC81               	dw	48257
   255  007F5D  7C40               	dw	31808
   256  007F5F  B401               	dw	46081
   257  007F61  74C0               	dw	29888
   258  007F63  7580               	dw	30080
   259  007F65  B541               	dw	46401
   260  007F67  7700               	dw	30464
   261  007F69  B7C1               	dw	47041
   262  007F6B  B681               	dw	46721
   263  007F6D  7640               	dw	30272
   264  007F6F  7200               	dw	29184
   265  007F71  B2C1               	dw	45761
   266  007F73  B381               	dw	45953
   267  007F75  7340               	dw	29504
   268  007F77  B101               	dw	45313
   269  007F79  71C0               	dw	29120
   270  007F7B  7080               	dw	28800
   271  007F7D  B041               	dw	45121
   272  007F7F  5000               	dw	20480
   273  007F81  90C1               	dw	37057
   274  007F83  9181               	dw	37249
   275  007F85  5140               	dw	20800
   276  007F87  9301               	dw	37633
   277  007F89  53C0               	dw	21440
   278  007F8B  5280               	dw	21120
   279  007F8D  9241               	dw	37441
   280  007F8F  9601               	dw	38401
   281  007F91  56C0               	dw	22208
   282  007F93  5780               	dw	22400
   283  007F95  9741               	dw	38721
   284  007F97  5500               	dw	21760
   285  007F99  95C1               	dw	38337
   286  007F9B  9481               	dw	38017
   287  007F9D  5440               	dw	21568
   288  007F9F  9C01               	dw	39937
   289  007FA1  5CC0               	dw	23744
   290  007FA3  5D80               	dw	23936
   291  007FA5  9D41               	dw	40257
   292  007FA7  5F00               	dw	24320
   293  007FA9  9FC1               	dw	40897
   294  007FAB  9E81               	dw	40577
   295  007FAD  5E40               	dw	24128
   296  007FAF  5A00               	dw	23040
   297  007FB1  9AC1               	dw	39617
   298  007FB3  9B81               	dw	39809
   299  007FB5  5B40               	dw	23360
   300  007FB7  9901               	dw	39169
   301  007FB9  59C0               	dw	22976
   302  007FBB  5880               	dw	22656
   303  007FBD  9841               	dw	38977
   304  007FBF  8801               	dw	34817
   305  007FC1  48C0               	dw	18624
   306  007FC3  4980               	dw	18816
   307  007FC5  8941               	dw	35137
   308  007FC7  4B00               	dw	19200
   309  007FC9  8BC1               	dw	35777
   310  007FCB  8A81               	dw	35457
   311  007FCD  4A40               	dw	19008
   312  007FCF  4E00               	dw	19968
   313  007FD1  8EC1               	dw	36545
   314  007FD3  8F81               	dw	36737
   315  007FD5  4F40               	dw	20288
   316  007FD7  8D01               	dw	36097
   317  007FD9  4DC0               	dw	19904
   318  007FDB  4C80               	dw	19584
   319  007FDD  8C41               	dw	35905
   320  007FDF  4400               	dw	17408
   321  007FE1  84C1               	dw	33985
   322  007FE3  8581               	dw	34177
   323  007FE5  4540               	dw	17728
   324  007FE7  8701               	dw	34561
   325  007FE9  47C0               	dw	18368
   326  007FEB  4680               	dw	18048
   327  007FED  8641               	dw	34369
   328  007FEF  8201               	dw	33281
   329  007FF1  42C0               	dw	17088
   330  007FF3  4380               	dw	17280
   331  007FF5  8341               	dw	33601
   332  007FF7  4100               	dw	16640
   333  007FF9  81C1               	dw	33217
   334  007FFB  8081               	dw	32897
   335  007FFD  4040               	dw	16448
   336  007FFF                     __end_of_crc_tab16:
   337                           	opt stack 0
   338  0000                     _SSPBUF	set	4041
   339  0000                     _PIR1bits	set	3998
   340  0000                     _SSPCON2bits	set	4037
   341  0000                     _SSPSTAT	set	4039
   342  0000                     _SSPADD	set	4040
   343  0000                     _SSPCON1bits	set	4038
   344  0000                     _SSPCON1	set	4038
   345  0000                     _PORTB	set	3969
   346  0000                     _INTCON2	set	4081
   347  0000                     _INTCON	set	4082
   348  0000                     _TRISA	set	3986
   349  0000                     _TXSTAbits	set	4012
   350  0000                     _TRISC	set	3988
   351  0000                     _INTCON2bits	set	4081
   352  0000                     _TRISB	set	3987
   353  0000                     _ADCON1	set	4033
   354  0000                     _ADCON0	set	4034
   355  0000                     _INTCONbits	set	4082
   356  0000                     _PORTBbits	set	3969
   357  0000                     _LATAbits	set	3977
   358  0000                     _PORTAbits	set	3968
   359                           
   360                           ; #config settings
   361  007FFF  00                 	db	0	; dummy byte at the end
   362  0000                     
   363                           	psect	cinit
   364  00099C                     __pcinit:
   365                           	opt stack 0
   366  00099C                     start_initialization:
   367                           	opt stack 0
   368  00099C                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Clear objects allocated to BIGRAM (1024 bytes)
   372  00099C  EE01  F080         	lfsr	0,__pbssBIGRAM
   373  0009A0  EE14 F000          	lfsr	1,1024
   374  0009A4                     clear_0:
   375  0009A4  6AEE               	clrf	postinc0,c
   376  0009A6  50E5               	movf	postdec1,w,c
   377  0009A8  50E1               	movf	fsr1l,w,c
   378  0009AA  E1FC               	bnz	clear_0
   379  0009AC  50E2               	movf	fsr1h,w,c
   380  0009AE  E1FA               	bnz	clear_0
   381                           
   382                           ; Clear objects allocated to BANK1 (128 bytes)
   383  0009B0  EE01  F000         	lfsr	0,__pbssBANK1
   384  0009B4  0E80               	movlw	128
   385  0009B6                     clear_1:
   386  0009B6  6AEE               	clrf	postinc0,c
   387  0009B8  06E8               	decf	wreg,f,c
   388  0009BA  E1FD               	bnz	clear_1
   389                           
   390                           ; Clear objects allocated to BANK0 (64 bytes)
   391  0009BC  EE00  F080         	lfsr	0,__pbssBANK0
   392  0009C0  0E40               	movlw	64
   393  0009C2                     clear_2:
   394  0009C2  6AEE               	clrf	postinc0,c
   395  0009C4  06E8               	decf	wreg,f,c
   396  0009C6  E1FD               	bnz	clear_2
   397                           
   398                           ; Clear objects allocated to COMRAM (6 bytes)
   399  0009C8  6A40               	clrf	(__pbssCOMRAM+5)& (0+255),c
   400  0009CA  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   401  0009CC  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   402  0009CE  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   403  0009D0  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   404  0009D2  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   405  0009D4                     end_of_initialization:
   406                           	opt stack 0
   407  0009D4                     __end_of__initialization:
   408                           	opt stack 0
   409  0009D4  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   410  0009D6  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   411  0009D8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   412  0009DA  6EF8               	movwf	tblptru,c
   413  0009DC  0100               	movlb	0
   414  0009DE  EF7A  F001         	goto	_main	;jump to C main() function
   415                           tblptru	equ	0xFF8
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           postdec1	equ	0xFE5
   419                           fsr1h	equ	0xFE2
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	bssCOMRAM
   423  00003B                     __pbssCOMRAM:
   424                           	opt stack 0
   425  00003B                     initMMA8452@F2615:
   426                           	opt stack 0
   427  00003B                     	ds	4
   428  00003F                     _pushFlag:
   429                           	opt stack 0
   430  00003F                     	ds	1
   431  000040                     _PORTBreg:
   432                           	opt stack 0
   433  000040                     	ds	1
   434                           tblptru	equ	0xFF8
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1h	equ	0xFE2
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	bssBANK0
   442  000080                     __pbssBANK0:
   443                           	opt stack 0
   444  000080                     _commandBuffer:
   445                           	opt stack 0
   446  000080                     	ds	64
   447                           tblptru	equ	0xFF8
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1h	equ	0xFE2
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	bssBANK1
   455  000100                     __pbssBANK1:
   456                           	opt stack 0
   457  000100                     _testBuffer:
   458                           	opt stack 0
   459  000100                     	ds	128
   460                           tblptru	equ	0xFF8
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           fsr1h	equ	0xFE2
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	bssBIGRAM
   468  000180                     __pbssBIGRAM:
   469                           	opt stack 0
   470  000180                     _arrDataPacket:
   471                           	opt stack 0
   472  000180                     	ds	1024
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	cstackCOMRAM
   481  000001                     __pcstackCOMRAM:
   482                           	opt stack 0
   483  000001                     ??_isr:
   484  000001                     
   485                           ; 1 bytes @ 0x0
   486  000001                     	ds	14
   487  00000F                     ?_getTwosComplement:
   488                           	opt stack 0
   489  00000F                     ?_createDataPacket:
   490                           	opt stack 0
   491  00000F                     ?_update_crc_16:
   492                           	opt stack 0
   493  00000F                     getTwosComplement@LSBbyte:
   494                           	opt stack 0
   495  00000F                     i2c_SendByte@byte:
   496                           	opt stack 0
   497  00000F                     i2c_GetAcknowledge@ack:
   498                           	opt stack 0
   499  00000F                     i2c_ReadByte@byte:
   500                           	opt stack 0
   501  00000F                     i2c_SendAcknowledge@status:
   502                           	opt stack 0
   503  00000F                     xmitBreak@numStartPulses:
   504                           	opt stack 0
   505  00000F                     createDataPacket@ptrData:
   506                           	opt stack 0
   507  00000F                     DelayMs@count:
   508                           	opt stack 0
   509  00000F                     update_crc_16@crc:
   510                           	opt stack 0
   511  00000F                     xmitPacket@numBytes:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0xE
   515  00000F                     	ds	1
   516  000010                     i2c_SendControlByte@direction:
   517                           	opt stack 0
   518  000010                     xmitBreak@delayTime:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0xF
   522  000010                     	ds	1
   523  000011                     ??_getTwosComplement:
   524  000011                     DelayMs@i:
   525                           	opt stack 0
   526  000011                     update_crc_16@nextVal:
   527                           	opt stack 0
   528  000011                     i2c_SendControlByte@controlByte:
   529                           	opt stack 0
   530  000011                     xmitBreak@delayLoop:
   531                           	opt stack 0
   532  000011                     createDataPacket@numDataBytes:
   533                           	opt stack 0
   534  000011                     xmitPacket@ptrDelay:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x10
   538  000011                     	ds	1
   539  000012                     ??_update_crc_16:
   540  000012                     DelayMs@downCount:
   541                           	opt stack 0
   542  000012                     i2c_SendControlByte@outByte:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x11
   546  000012                     	ds	1
   547  000013                     sendREADcommand@deviceID:
   548                           	opt stack 0
   549  000013                     setRegister@deviceREGISTER:
   550                           	opt stack 0
   551  000013                     writeByteToRegister@deviceREGISTER:
   552                           	opt stack 0
   553  000013                     createDataPacket@ptrPacket:
   554                           	opt stack 0
   555  000013                     xmitPacket@index:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x12
   559  000013                     	ds	1
   560  000014                     setRegister@deviceID:
   561                           	opt stack 0
   562  000014                     writeByteToRegister@dataByte:
   563                           	opt stack 0
   564  000014                     getTwosComplement@MSBbyte:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x13
   568  000014                     	ds	1
   569  000015                     createDataPacket@previousDataBit:
   570                           	opt stack 0
   571  000015                     writeByteToRegister@deviceID:
   572                           	opt stack 0
   573  000015                     readRegisters@deviceREGISTER:
   574                           	opt stack 0
   575  000015                     xmitPacket@delayTime:
   576                           	opt stack 0
   577  000015                     getTwosComplement@value:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x14
   581  000015                     	ds	1
   582  000016                     readRegisters@numRegisters:
   583                           	opt stack 0
   584  000016                     xmitPacket@delayLoop:
   585                           	opt stack 0
   586  000016                     createDataPacket@dataIndex:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x15
   590  000016                     	ds	1
   591  000017                     readRegisters@registerPtr:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x16
   595  000017                     	ds	1
   596  000018                     createDataPacket@dataBit:
   597                           	opt stack 0
   598  000018                     update_crc_16@tmp:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x17
   602  000018                     	ds	1
   603  000019                     ??_readRegisters:
   604  000019                     createDataPacket@i:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x18
   608  000019                     	ds	1
   609  00001A                     createDataPacket@byteMask:
   610                           	opt stack 0
   611  00001A                     update_crc_16@shortVal:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x19
   615  00001A                     	ds	1
   616  00001B                     createDataPacket@state:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x1A
   620  00001B                     	ds	1
   621  00001C                     ?_CRCcalculate:
   622                           	opt stack 0
   623  00001C                     createDataPacket@packetIndex:
   624                           	opt stack 0
   625  00001C                     CRCcalculate@message:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x1B
   629  00001C                     	ds	2
   630  00001E                     CRCcalculate@nBytes:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x1D
   634  00001E                     	ds	1
   635  00001F                     readRegisters@deviceID:
   636                           	opt stack 0
   637  00001F                     CRCcalculate@CRCresult:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x1E
   641  00001F                     	ds	1
   642  000020                     readRegisters@i:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x1F
   646  000020                     	ds	1
   647  000021                     CRCcalculate@i:
   648                           	opt stack 0
   649  000021                     initMMA8452@accelData:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x20
   653  000021                     	ds	4
   654  000025                     initMMA8452@commandByte:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x24
   658  000025                     	ds	1
   659  000026                     main@initResult:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x25
   663  000026                     	ds	1
   664  000027                     main@numBytesToSend:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x26
   668  000027                     	ds	2
   669  000029                     main@accelerometerBuffer:
   670                           	opt stack 0
   671                           
   672                           ; 6 bytes @ 0x28
   673  000029                     	ds	6
   674  00002F                     main@rawVectx:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2E
   678  00002F                     	ds	2
   679  000031                     main@rawVecty:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x30
   683  000031                     	ds	2
   684  000033                     main@rawVectz:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x32
   688  000033                     	ds	2
   689  000035                     main@sysModRegister:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x34
   693  000035                     	ds	1
   694  000036                     main@motionDetection:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x35
   698  000036                     	ds	1
   699  000037                     main@interruptSource:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x36
   703  000037                     	ds	1
   704  000038                     main@convert:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x37
   708  000038                     	ds	2
   709  00003A                     main@i:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x39
   713  00003A                     	ds	1
   714                           tblptru	equ	0xFF8
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1h	equ	0xFE2
   719                           fsr1l	equ	0xFE1
   720                           
   721 ;;
   722 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   723 ;;
   724 ;; *************** function _main *****************
   725 ;; Defined at:
   726 ;;		line 71 in file "../main.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  acceleromete    6   40[COMRAM] unsigned char [6]
   731 ;;  convert         2   55[COMRAM] struct .
   732 ;;  rawVectz        2   50[COMRAM] short 
   733 ;;  rawVecty        2   48[COMRAM] short 
   734 ;;  rawVectx        2   46[COMRAM] short 
   735 ;;  numBytesToSe    2   38[COMRAM] unsigned short 
   736 ;;  i               1   57[COMRAM] unsigned char 
   737 ;;  interruptSou    1   54[COMRAM] unsigned char 
   738 ;;  motionDetect    1   53[COMRAM] unsigned char 
   739 ;;  sysModRegist    1   52[COMRAM] unsigned char 
   740 ;;  initResult      1   37[COMRAM] unsigned char 
   741 ;;  j               1    0        unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   751 ;;      Params:         0       0       0       0       0       0       0
   752 ;;      Locals:        21       0       0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0
   754 ;;      Totals:        21       0       0       0       0       0       0
   755 ;;Total ram usage:       21 bytes
   756 ;; Hardware stack levels required when called:    6
   757 ;; This function calls:
   758 ;;		_CRCcalculate
   759 ;;		_DelayMs
   760 ;;		_createDataPacket
   761 ;;		_getTwosComplement
   762 ;;		_init
   763 ;;		_initMMA8452
   764 ;;		_initialize_I2C
   765 ;;		_readRegisters
   766 ;;		_xmitBreak
   767 ;;		_xmitPacket
   768 ;; This function is called by:
   769 ;;		Startup code after reset
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text0
   774  0002F4                     __ptext0:
   775                           	opt stack 0
   776  0002F4                     _main:
   777                           	opt stack 25
   778                           
   779                           ;main.c: 72: unsigned short numBytesToSend;
   780                           ;main.c: 73: unsigned char i, j;
   781                           ;main.c: 74: unsigned char accelerometerBuffer[6];
   782                           ;main.c: 76: unsigned char motionDetection = 0;
   783                           
   784                           ;incstack = 0
   785  0002F4  0E00               	movlw	0
   786  0002F6  6E36               	movwf	main@motionDetection,c
   787                           
   788                           ;main.c: 77: unsigned char sysModRegister = 0;
   789  0002F8  0E00               	movlw	0
   790  0002FA  6E35               	movwf	main@sysModRegister,c
   791                           
   792                           ;main.c: 78: unsigned char interruptSource = 0;
   793  0002FC  0E00               	movlw	0
   794  0002FE  6E37               	movwf	main@interruptSource,c
   795                           
   796                           ;main.c: 79: short rawVectx, rawVecty, rawVectz;
   797                           ;main.c: 80: unsigned char initResult = 0;
   798  000300  0E00               	movlw	0
   799  000302  6E26               	movwf	main@initResult,c
   800                           
   801                           ;main.c: 83: union {
   802                           ;main.c: 84: unsigned char byte[2];
   803                           ;main.c: 85: unsigned short integer;
   804                           ;main.c: 86: } convert;
   805                           ;main.c: 88: init();
   806  000304  EC27  F005         	call	_init	;wreg free
   807                           
   808                           ;main.c: 89: initialize_I2C();
   809  000308  EC50  F005         	call	_initialize_I2C	;wreg free
   810                           
   811                           ;main.c: 90: initResult = initMMA8452();
   812  00030C  EC4B  F000         	call	_initMMA8452	;wreg free
   813  000310  6E26               	movwf	main@initResult,c
   814  000312                     l2146:
   815                           
   816                           ;main.c: 94: readRegisters(0x1D, 0x0C, 1, &interruptSource);
   817  000312  0E0C               	movlw	12
   818  000314  6E15               	movwf	readRegisters@deviceREGISTER,c
   819  000316  0E01               	movlw	1
   820  000318  6E16               	movwf	readRegisters@numRegisters,c
   821  00031A  0E37               	movlw	low main@interruptSource
   822  00031C  6E17               	movwf	readRegisters@registerPtr,c
   823  00031E  0E00               	movlw	high main@interruptSource
   824  000320  6E18               	movwf	readRegisters@registerPtr+1,c
   825  000322  0E1D               	movlw	29
   826  000324  ECDC  F003         	call	_readRegisters
   827                           
   828                           ;main.c: 95: if (interruptSource){
   829  000328  5037               	movf	main@interruptSource,w,c
   830  00032A  B4D8               	btfsc	status,2,c
   831  00032C  D016               	goto	l2150
   832                           
   833                           ;main.c: 96: readRegisters(0x1D, 0x0B, 1, &sysModRegister);
   834  00032E  0E0B               	movlw	11
   835  000330  6E15               	movwf	readRegisters@deviceREGISTER,c
   836  000332  0E01               	movlw	1
   837  000334  6E16               	movwf	readRegisters@numRegisters,c
   838  000336  0E35               	movlw	low main@sysModRegister
   839  000338  6E17               	movwf	readRegisters@registerPtr,c
   840  00033A  0E00               	movlw	high main@sysModRegister
   841  00033C  6E18               	movwf	readRegisters@registerPtr+1,c
   842  00033E  0E1D               	movlw	29
   843  000340  ECDC  F003         	call	_readRegisters
   844                           
   845                           ;main.c: 97: readRegisters(0x1D, 0x16, 1, &motionDetection);
   846  000344  0E16               	movlw	22
   847  000346  6E15               	movwf	readRegisters@deviceREGISTER,c
   848  000348  0E01               	movlw	1
   849  00034A  6E16               	movwf	readRegisters@numRegisters,c
   850  00034C  0E36               	movlw	low main@motionDetection
   851  00034E  6E17               	movwf	readRegisters@registerPtr,c
   852  000350  0E00               	movlw	high main@motionDetection
   853  000352  6E18               	movwf	readRegisters@registerPtr+1,c
   854  000354  0E1D               	movlw	29
   855  000356  ECDC  F003         	call	_readRegisters
   856  00035A                     l2150:
   857                           
   858                           ;main.c: 98: }
   859                           ;main.c: 99: } while (interruptSource != 0);
   860  00035A  5037               	movf	main@interruptSource,w,c
   861  00035C  A4D8               	btfss	status,2,c
   862  00035E  D7D9               	goto	l2146
   863                           
   864                           ;main.c: 101: PORTAbits.RA1 = 0;
   865  000360  9280               	bcf	3968,1,c	;volatile
   866                           
   867                           ;main.c: 102: LATAbits.LATA0 = 0;
   868  000362  9089               	bcf	3977,0,c	;volatile
   869  000364  0003               	sleep		;# 
   870                           
   871                           ;main.c: 105: readRegisters(0x1D, 0x01, 6, accelerometerBuffer);
   872  000366  0E01               	movlw	1
   873  000368  6E15               	movwf	readRegisters@deviceREGISTER,c
   874  00036A  0E06               	movlw	6
   875  00036C  6E16               	movwf	readRegisters@numRegisters,c
   876  00036E  0E29               	movlw	low main@accelerometerBuffer
   877  000370  6E17               	movwf	readRegisters@registerPtr,c
   878  000372  0E00               	movlw	high main@accelerometerBuffer
   879  000374  6E18               	movwf	readRegisters@registerPtr+1,c
   880  000376  0E1D               	movlw	29
   881  000378  ECDC  F003         	call	_readRegisters
   882                           
   883                           ;main.c: 106: rawVectx = getTwosComplement(accelerometerBuffer[0], accelerometerBuffer[1
      +                          ]);
   884  00037C  C02A  F00F         	movff	main@accelerometerBuffer+1,getTwosComplement@LSBbyte
   885  000380  5029               	movf	main@accelerometerBuffer,w,c
   886  000382  EC57  F004         	call	_getTwosComplement
   887  000386  C00F  F02F         	movff	?_getTwosComplement,main@rawVectx
   888  00038A  C010  F030         	movff	?_getTwosComplement+1,main@rawVectx+1
   889                           
   890                           ;main.c: 107: rawVectz = getTwosComplement(accelerometerBuffer[2], accelerometerBuffer[3
      +                          ]);
   891  00038E  C02C  F00F         	movff	main@accelerometerBuffer+3,getTwosComplement@LSBbyte
   892  000392  502B               	movf	main@accelerometerBuffer+2,w,c
   893  000394  EC57  F004         	call	_getTwosComplement
   894  000398  C00F  F033         	movff	?_getTwosComplement,main@rawVectz
   895  00039C  C010  F034         	movff	?_getTwosComplement+1,main@rawVectz+1
   896                           
   897                           ;main.c: 108: rawVecty = getTwosComplement(accelerometerBuffer[4], accelerometerBuffer[5
      +                          ]);
   898  0003A0  C02E  F00F         	movff	main@accelerometerBuffer+5,getTwosComplement@LSBbyte
   899  0003A4  502D               	movf	main@accelerometerBuffer+4,w,c
   900  0003A6  EC57  F004         	call	_getTwosComplement
   901  0003AA  C00F  F031         	movff	?_getTwosComplement,main@rawVecty
   902  0003AE  C010  F032         	movff	?_getTwosComplement+1,main@rawVecty+1
   903                           
   904                           ;main.c: 111: i = 0;
   905  0003B2  0E00               	movlw	0
   906  0003B4  6E3A               	movwf	main@i,c
   907                           
   908                           ;main.c: 112: commandBuffer[i++] = 7;
   909  0003B6  503A               	movf	main@i,w,c
   910  0003B8  0D01               	mullw	1
   911  0003BA  0E80               	movlw	low _commandBuffer
   912  0003BC  24F3               	addwf	prodl,w,c
   913  0003BE  6ED9               	movwf	fsr2l,c
   914  0003C0  0E00               	movlw	high _commandBuffer
   915  0003C2  20F4               	addwfc	prodh,w,c
   916  0003C4  6EDA               	movwf	fsr2h,c
   917  0003C6  0E07               	movlw	7
   918  0003C8  6EDF               	movwf	indf2,c
   919  0003CA  2A3A               	incf	main@i,f,c
   920                           
   921                           ;main.c: 114: commandBuffer[i++] = motionDetection;
   922  0003CC  503A               	movf	main@i,w,c
   923  0003CE  0D01               	mullw	1
   924  0003D0  0E80               	movlw	low _commandBuffer
   925  0003D2  24F3               	addwf	prodl,w,c
   926  0003D4  6ED9               	movwf	fsr2l,c
   927  0003D6  0E00               	movlw	high _commandBuffer
   928  0003D8  20F4               	addwfc	prodh,w,c
   929  0003DA  6EDA               	movwf	fsr2h,c
   930  0003DC  C036  FFDF         	movff	main@motionDetection,indf2
   931  0003E0  2A3A               	incf	main@i,f,c
   932                           
   933                           ;main.c: 115: motionDetection = 0x00;
   934  0003E2  0E00               	movlw	0
   935  0003E4  6E36               	movwf	main@motionDetection,c
   936                           
   937                           ;main.c: 117: convert.integer = rawVectx;
   938  0003E6  C02F  F038         	movff	main@rawVectx,main@convert
   939  0003EA  C030  F039         	movff	main@rawVectx+1,main@convert+1
   940                           
   941                           ;main.c: 118: commandBuffer[i++] = convert.byte[0];
   942  0003EE  503A               	movf	main@i,w,c
   943  0003F0  0D01               	mullw	1
   944  0003F2  0E80               	movlw	low _commandBuffer
   945  0003F4  24F3               	addwf	prodl,w,c
   946  0003F6  6ED9               	movwf	fsr2l,c
   947  0003F8  0E00               	movlw	high _commandBuffer
   948  0003FA  20F4               	addwfc	prodh,w,c
   949  0003FC  6EDA               	movwf	fsr2h,c
   950  0003FE  C038  FFDF         	movff	main@convert,indf2
   951  000402  2A3A               	incf	main@i,f,c
   952                           
   953                           ;main.c: 119: commandBuffer[i++] = convert.byte[1];
   954  000404  503A               	movf	main@i,w,c
   955  000406  0D01               	mullw	1
   956  000408  0E80               	movlw	low _commandBuffer
   957  00040A  24F3               	addwf	prodl,w,c
   958  00040C  6ED9               	movwf	fsr2l,c
   959  00040E  0E00               	movlw	high _commandBuffer
   960  000410  20F4               	addwfc	prodh,w,c
   961  000412  6EDA               	movwf	fsr2h,c
   962  000414  C039  FFDF         	movff	main@convert+1,indf2
   963  000418  2A3A               	incf	main@i,f,c
   964                           
   965                           ;main.c: 121: convert.integer = rawVectz;
   966  00041A  C033  F038         	movff	main@rawVectz,main@convert
   967  00041E  C034  F039         	movff	main@rawVectz+1,main@convert+1
   968                           
   969                           ;main.c: 122: commandBuffer[i++] = convert.byte[0];
   970  000422  503A               	movf	main@i,w,c
   971  000424  0D01               	mullw	1
   972  000426  0E80               	movlw	low _commandBuffer
   973  000428  24F3               	addwf	prodl,w,c
   974  00042A  6ED9               	movwf	fsr2l,c
   975  00042C  0E00               	movlw	high _commandBuffer
   976  00042E  20F4               	addwfc	prodh,w,c
   977  000430  6EDA               	movwf	fsr2h,c
   978  000432  C038  FFDF         	movff	main@convert,indf2
   979  000436  2A3A               	incf	main@i,f,c
   980                           
   981                           ;main.c: 123: commandBuffer[i++] = convert.byte[1];
   982  000438  503A               	movf	main@i,w,c
   983  00043A  0D01               	mullw	1
   984  00043C  0E80               	movlw	low _commandBuffer
   985  00043E  24F3               	addwf	prodl,w,c
   986  000440  6ED9               	movwf	fsr2l,c
   987  000442  0E00               	movlw	high _commandBuffer
   988  000444  20F4               	addwfc	prodh,w,c
   989  000446  6EDA               	movwf	fsr2h,c
   990  000448  C039  FFDF         	movff	main@convert+1,indf2
   991  00044C  2A3A               	incf	main@i,f,c
   992                           
   993                           ;main.c: 125: convert.integer = rawVecty;
   994  00044E  C031  F038         	movff	main@rawVecty,main@convert
   995  000452  C032  F039         	movff	main@rawVecty+1,main@convert+1
   996                           
   997                           ;main.c: 126: commandBuffer[i++] = convert.byte[0];
   998  000456  503A               	movf	main@i,w,c
   999  000458  0D01               	mullw	1
  1000  00045A  0E80               	movlw	low _commandBuffer
  1001  00045C  24F3               	addwf	prodl,w,c
  1002  00045E  6ED9               	movwf	fsr2l,c
  1003  000460  0E00               	movlw	high _commandBuffer
  1004  000462  20F4               	addwfc	prodh,w,c
  1005  000464  6EDA               	movwf	fsr2h,c
  1006  000466  C038  FFDF         	movff	main@convert,indf2
  1007  00046A  2A3A               	incf	main@i,f,c
  1008                           
  1009                           ;main.c: 127: commandBuffer[i++] = convert.byte[1];
  1010  00046C  503A               	movf	main@i,w,c
  1011  00046E  0D01               	mullw	1
  1012  000470  0E80               	movlw	low _commandBuffer
  1013  000472  24F3               	addwf	prodl,w,c
  1014  000474  6ED9               	movwf	fsr2l,c
  1015  000476  0E00               	movlw	high _commandBuffer
  1016  000478  20F4               	addwfc	prodh,w,c
  1017  00047A  6EDA               	movwf	fsr2h,c
  1018  00047C  C039  FFDF         	movff	main@convert+1,indf2
  1019  000480  2A3A               	incf	main@i,f,c
  1020                           
  1021                           ;main.c: 129: convert.integer = CRCcalculate(&commandBuffer[1], 7);
  1022  000482  0E81               	movlw	low (_commandBuffer+1)
  1023  000484  6E1C               	movwf	CRCcalculate@message,c
  1024  000486  0E00               	movlw	high (_commandBuffer+1)
  1025  000488  6E1D               	movwf	CRCcalculate@message+1,c
  1026  00048A  0E07               	movlw	7
  1027  00048C  6E1E               	movwf	CRCcalculate@nBytes,c
  1028  00048E  ECA9  F004         	call	_CRCcalculate	;wreg free
  1029  000492  C01C  F038         	movff	?_CRCcalculate,main@convert
  1030  000496  C01D  F039         	movff	?_CRCcalculate+1,main@convert+1
  1031                           
  1032                           ;main.c: 130: commandBuffer[i++] = convert.byte[0];
  1033  00049A  503A               	movf	main@i,w,c
  1034  00049C  0D01               	mullw	1
  1035  00049E  0E80               	movlw	low _commandBuffer
  1036  0004A0  24F3               	addwf	prodl,w,c
  1037  0004A2  6ED9               	movwf	fsr2l,c
  1038  0004A4  0E00               	movlw	high _commandBuffer
  1039  0004A6  20F4               	addwfc	prodh,w,c
  1040  0004A8  6EDA               	movwf	fsr2h,c
  1041  0004AA  C038  FFDF         	movff	main@convert,indf2
  1042  0004AE  2A3A               	incf	main@i,f,c
  1043                           
  1044                           ;main.c: 131: commandBuffer[i++] = convert.byte[1];
  1045  0004B0  503A               	movf	main@i,w,c
  1046  0004B2  0D01               	mullw	1
  1047  0004B4  0E80               	movlw	low _commandBuffer
  1048  0004B6  24F3               	addwf	prodl,w,c
  1049  0004B8  6ED9               	movwf	fsr2l,c
  1050  0004BA  0E00               	movlw	high _commandBuffer
  1051  0004BC  20F4               	addwfc	prodh,w,c
  1052  0004BE  6EDA               	movwf	fsr2h,c
  1053  0004C0  C039  FFDF         	movff	main@convert+1,indf2
  1054  0004C4  2A3A               	incf	main@i,f,c
  1055                           
  1056                           ;main.c: 133: numBytesToSend = createDataPacket(commandBuffer, i, arrDataPacket);
  1057  0004C6  0E80               	movlw	low _commandBuffer
  1058  0004C8  6E0F               	movwf	createDataPacket@ptrData,c
  1059  0004CA  0E00               	movlw	high _commandBuffer
  1060  0004CC  6E10               	movwf	createDataPacket@ptrData+1,c
  1061  0004CE  C03A  F011         	movff	main@i,createDataPacket@numDataBytes
  1062  0004D2  6A12               	clrf	createDataPacket@numDataBytes+1,c
  1063  0004D4  0E80               	movlw	low _arrDataPacket
  1064  0004D6  6E13               	movwf	createDataPacket@ptrPacket,c
  1065  0004D8  0E01               	movlw	high _arrDataPacket
  1066  0004DA  6E14               	movwf	createDataPacket@ptrPacket+1,c
  1067  0004DC  EC9B  F002         	call	_createDataPacket	;wreg free
  1068  0004E0  C00F  F027         	movff	?_createDataPacket,main@numBytesToSend
  1069  0004E4  C010  F028         	movff	?_createDataPacket+1,main@numBytesToSend+1
  1070                           
  1071                           ;main.c: 135: PORTBbits.RB5 = 1;
  1072  0004E8  8A81               	bsf	3969,5,c	;volatile
  1073                           
  1074                           ;main.c: 136: PORTAbits.RA1 = 1;
  1075  0004EA  8280               	bsf	3968,1,c	;volatile
  1076                           
  1077                           ;main.c: 137: xmitBreak();
  1078  0004EC  EC37  F003         	call	_xmitBreak	;wreg free
  1079                           
  1080                           ;main.c: 138: xmitPacket(numBytesToSend, arrDataPacket);
  1081  0004F0  C027  F00F         	movff	main@numBytesToSend,xmitPacket@numBytes
  1082  0004F4  C028  F010         	movff	main@numBytesToSend+1,xmitPacket@numBytes+1
  1083  0004F8  0E80               	movlw	low _arrDataPacket
  1084  0004FA  6E11               	movwf	xmitPacket@ptrDelay,c
  1085  0004FC  0E01               	movlw	high _arrDataPacket
  1086  0004FE  6E12               	movwf	xmitPacket@ptrDelay+1,c
  1087  000500  EC8B  F003         	call	_xmitPacket	;wreg free
  1088                           
  1089                           ;main.c: 139: PORTAbits.RA1 = 0;
  1090  000504  9280               	bcf	3968,1,c	;volatile
  1091                           
  1092                           ;main.c: 140: LATAbits.LATA0 = 0;
  1093  000506  9089               	bcf	3977,0,c	;volatile
  1094                           
  1095                           ;main.c: 141: PORTBbits.RB5 = 0;
  1096  000508  9A81               	bcf	3969,5,c	;volatile
  1097                           
  1098                           ;main.c: 143: if (pushFlag){
  1099  00050A  503F               	movf	_pushFlag,w,c
  1100  00050C  B4D8               	btfsc	status,2,c
  1101  00050E  D701               	goto	l2146
  1102  000510                     l2230:
  1103                           
  1104                           ;main.c: 145: DelayMs(20);
  1105  000510  0E00               	movlw	0
  1106  000512  6E10               	movwf	DelayMs@count+1,c
  1107  000514  0E14               	movlw	20
  1108  000516  6E0F               	movwf	DelayMs@count,c
  1109  000518  EC0D  F005         	call	_DelayMs	;wreg free
  1110                           
  1111                           ;main.c: 146: } while (!PORTBbits.RB0);
  1112  00051C  A081               	btfss	3969,0,c	;volatile
  1113  00051E  D7F8               	goto	l2230
  1114                           
  1115                           ;main.c: 147: DelayMs(20);
  1116  000520  0E00               	movlw	0
  1117  000522  6E10               	movwf	DelayMs@count+1,c
  1118  000524  0E14               	movlw	20
  1119  000526  6E0F               	movwf	DelayMs@count,c
  1120  000528  EC0D  F005         	call	_DelayMs	;wreg free
  1121  00052C                     l68:
  1122  00052C  A081               	btfss	3969,0,c	;volatile
  1123  00052E  D7FE               	goto	l68
  1124                           
  1125                           ;main.c: 149: pushFlag = 0;
  1126  000530  0E00               	movlw	0
  1127  000532  6E3F               	movwf	_pushFlag,c
  1128  000534  D6EE               	goto	l2146
  1129  000536                     __end_of_main:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           prodh	equ	0xFF4
  1133                           prodl	equ	0xFF3
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1h	equ	0xFE2
  1138                           fsr1l	equ	0xFE1
  1139                           indf2	equ	0xFDF
  1140                           fsr2h	equ	0xFDA
  1141                           fsr2l	equ	0xFD9
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _xmitPacket *****************
  1145 ;; Defined at:
  1146 ;;		line 17 in file "../transmitPacket.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  numBytes        2   14[COMRAM] unsigned short 
  1149 ;;  ptrDelay        2   16[COMRAM] PTR unsigned char 
  1150 ;;		 -> arrDataPacket(1024), 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  index           2   18[COMRAM] unsigned short 
  1153 ;;  delayLoop       1   21[COMRAM] unsigned char 
  1154 ;;  delayTime       1   20[COMRAM] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1164 ;;      Params:         4       0       0       0       0       0       0
  1165 ;;      Locals:         4       0       0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0
  1167 ;;      Totals:         8       0       0       0       0       0       0
  1168 ;;Total ram usage:        8 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    1
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text1
  1179  000716                     __ptext1:
  1180                           	opt stack 0
  1181  000716                     _xmitPacket:
  1182                           	opt stack 29
  1183                           
  1184                           ;transmitPacket.c: 18: unsigned char delayTime, delayLoop;
  1185                           ;transmitPacket.c: 19: unsigned short index;
  1186                           ;transmitPacket.c: 21: LATAbits.LATA0 = 1;
  1187                           
  1188                           ;incstack = 0
  1189  000716  8089               	bsf	3977,0,c	;volatile
  1190                           
  1191                           ;transmitPacket.c: 22: delayLoop = 70;
  1192  000718  0E46               	movlw	70
  1193  00071A  6E16               	movwf	xmitPacket@delayLoop,c
  1194                           
  1195                           ;transmitPacket.c: 23: while (delayLoop) delayLoop--;
  1196  00071C  D001               	goto	l2082
  1197  00071E                     l2080:
  1198  00071E  0616               	decf	xmitPacket@delayLoop,f,c
  1199  000720                     l2082:
  1200  000720  5016               	movf	xmitPacket@delayLoop,w,c
  1201  000722  A4D8               	btfss	status,2,c
  1202  000724  D7FC               	goto	l2080
  1203                           
  1204                           ;transmitPacket.c: 24: LATAbits.LATA0 = 0;
  1205  000726  9089               	bcf	3977,0,c	;volatile
  1206                           
  1207                           ;transmitPacket.c: 26: index = 0;
  1208  000728  0E00               	movlw	0
  1209  00072A  6E14               	movwf	xmitPacket@index+1,c
  1210  00072C  0E00               	movlw	0
  1211  00072E  6E13               	movwf	xmitPacket@index,c
  1212                           
  1213                           ;transmitPacket.c: 27: while (index < numBytes) {
  1214  000730  D025               	goto	l2112
  1215  000732                     l2086:
  1216                           
  1217                           ;transmitPacket.c: 28: delayTime = ptrDelay[index];
  1218  000732  5013               	movf	xmitPacket@index,w,c
  1219  000734  2411               	addwf	xmitPacket@ptrDelay,w,c
  1220  000736  6ED9               	movwf	fsr2l,c
  1221  000738  5014               	movf	xmitPacket@index+1,w,c
  1222  00073A  2012               	addwfc	xmitPacket@ptrDelay+1,w,c
  1223  00073C  6EDA               	movwf	fsr2h,c
  1224  00073E  50DF               	movf	indf2,w,c
  1225  000740  6E15               	movwf	xmitPacket@delayTime,c
  1226                           
  1227                           ;transmitPacket.c: 30: if (delayTime == 0) {
  1228  000742  5015               	movf	xmitPacket@delayTime,w,c
  1229  000744  A4D8               	btfss	status,2,c
  1230  000746  D003               	goto	l2094
  1231                           
  1232                           ;transmitPacket.c: 31: LATAbits.LATA0 = 1;
  1233  000748  8089               	bsf	3977,0,c	;volatile
  1234                           
  1235                           ;transmitPacket.c: 32: delayLoop = 70;
  1236  00074A  0E46               	movlw	70
  1237  00074C  D00C               	goto	L2
  1238  00074E                     l2094:
  1239  00074E  0E02               	movlw	2
  1240  000750  1815               	xorwf	xmitPacket@delayTime,w,c
  1241  000752  A4D8               	btfss	status,2,c
  1242  000754  D003               	goto	l2100
  1243                           
  1244                           ;transmitPacket.c: 34: LATAbits.LATA0 = 1;
  1245  000756  8089               	bsf	3977,0,c	;volatile
  1246                           
  1247                           ;transmitPacket.c: 35: delayLoop = 233;
  1248  000758  0EE9               	movlw	233
  1249  00075A  D005               	goto	L2
  1250  00075C                     l2100:
  1251  00075C  0415               	decf	xmitPacket@delayTime,w,c
  1252  00075E  A4D8               	btfss	status,2,c
  1253  000760  D004               	goto	l267
  1254                           
  1255                           ;transmitPacket.c: 37: LATAbits.LATA0 = 0;
  1256  000762  9089               	bcf	3977,0,c	;volatile
  1257                           
  1258                           ;transmitPacket.c: 38: delayLoop = 80;
  1259  000764  0E50               	movlw	80
  1260  000766                     L2:
  1261  000766  6E16               	movwf	xmitPacket@delayLoop,c
  1262                           
  1263                           ;transmitPacket.c: 39: } else {
  1264  000768  D004               	goto	l2108
  1265  00076A                     l267:
  1266                           
  1267                           ;transmitPacket.c: 40: LATAbits.LATA0 = 0;
  1268  00076A  9089               	bcf	3977,0,c	;volatile
  1269                           
  1270                           ;transmitPacket.c: 41: delayLoop = 255;
  1271  00076C  6816               	setf	xmitPacket@delayLoop,c
  1272                           
  1273                           ;transmitPacket.c: 42: }
  1274                           ;transmitPacket.c: 43: while (delayLoop) delayLoop--;
  1275  00076E  D001               	goto	l2108
  1276  000770                     l2106:
  1277  000770  0616               	decf	xmitPacket@delayLoop,f,c
  1278  000772                     l2108:
  1279  000772  5016               	movf	xmitPacket@delayLoop,w,c
  1280  000774  A4D8               	btfss	status,2,c
  1281  000776  D7FC               	goto	l2106
  1282                           
  1283                           ;transmitPacket.c: 44: index++;
  1284  000778  4A13               	infsnz	xmitPacket@index,f,c
  1285  00077A  2A14               	incf	xmitPacket@index+1,f,c
  1286  00077C                     l2112:
  1287  00077C  500F               	movf	xmitPacket@numBytes,w,c
  1288  00077E  5C13               	subwf	xmitPacket@index,w,c
  1289  000780  5010               	movf	xmitPacket@numBytes+1,w,c
  1290  000782  5814               	subwfb	xmitPacket@index+1,w,c
  1291  000784  A0D8               	btfss	status,0,c
  1292  000786  D7D5               	goto	l2086
  1293                           
  1294                           ;transmitPacket.c: 45: }
  1295                           ;transmitPacket.c: 47: if (LATAbits.LATA0) LATAbits.LATA0 = 0;
  1296  000788  A089               	btfss	3977,0,c	;volatile
  1297  00078A  D002               	goto	l273
  1298  00078C  9089               	bcf	3977,0,c	;volatile
  1299  00078E  D001               	goto	l274
  1300  000790                     l273:
  1301                           
  1302                           ;transmitPacket.c: 48: else LATAbits.LATA0 = 1;
  1303  000790  8089               	bsf	3977,0,c	;volatile
  1304  000792                     l274:
  1305                           
  1306                           ;transmitPacket.c: 50: delayLoop = 0xFF;
  1307  000792  6816               	setf	xmitPacket@delayLoop,c
  1308                           
  1309                           ;transmitPacket.c: 51: while (delayLoop) delayLoop--;
  1310  000794  D001               	goto	l2118
  1311  000796                     l2116:
  1312  000796  0616               	decf	xmitPacket@delayLoop,f,c
  1313  000798                     l2118:
  1314  000798  5016               	movf	xmitPacket@delayLoop,w,c
  1315  00079A  A4D8               	btfss	status,2,c
  1316  00079C  D7FC               	goto	l2116
  1317                           
  1318                           ;transmitPacket.c: 53: if (LATAbits.LATA0) LATAbits.LATA0 = 0;
  1319  00079E  A089               	btfss	3977,0,c	;volatile
  1320  0007A0  D002               	goto	l278
  1321  0007A2  9089               	bcf	3977,0,c	;volatile
  1322  0007A4  D001               	goto	l279
  1323  0007A6                     l278:
  1324                           
  1325                           ;transmitPacket.c: 54: else LATAbits.LATA0 = 1;
  1326  0007A6  8089               	bsf	3977,0,c	;volatile
  1327  0007A8                     l279:
  1328                           
  1329                           ;transmitPacket.c: 56: delayLoop = 0xFF;
  1330  0007A8  6816               	setf	xmitPacket@delayLoop,c
  1331                           
  1332                           ;transmitPacket.c: 57: while (delayLoop) delayLoop--;
  1333  0007AA  D001               	goto	l2124
  1334  0007AC                     l2122:
  1335  0007AC  0616               	decf	xmitPacket@delayLoop,f,c
  1336  0007AE                     l2124:
  1337  0007AE  5016               	movf	xmitPacket@delayLoop,w,c
  1338  0007B0  A4D8               	btfss	status,2,c
  1339  0007B2  D7FC               	goto	l2122
  1340                           
  1341                           ;transmitPacket.c: 59: LATAbits.LATA0 = 0;
  1342  0007B4  9089               	bcf	3977,0,c	;volatile
  1343  0007B6  0012               	return		;funcret
  1344  0007B8                     __end_of_xmitPacket:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           prodh	equ	0xFF4
  1348                           prodl	equ	0xFF3
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           postdec1	equ	0xFE5
  1352                           fsr1h	equ	0xFE2
  1353                           fsr1l	equ	0xFE1
  1354                           indf2	equ	0xFDF
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _xmitBreak *****************
  1360 ;; Defined at:
  1361 ;;		line 62 in file "../transmitPacket.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  delayLoop       1   16[COMRAM] unsigned char 
  1366 ;;  delayTime       1   15[COMRAM] unsigned char 
  1367 ;;  numStartPuls    1   14[COMRAM] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, status,2, status,0
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1377 ;;      Params:         0       0       0       0       0       0       0
  1378 ;;      Locals:         3       0       0       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0
  1380 ;;      Totals:         3       0       0       0       0       0       0
  1381 ;;Total ram usage:        3 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; Hardware stack levels required when called:    1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text2
  1392  00066E                     __ptext2:
  1393                           	opt stack 0
  1394  00066E                     _xmitBreak:
  1395                           	opt stack 29
  1396                           
  1397                           ;transmitPacket.c: 63: unsigned char delayTime, delayLoop, numStartPulses;
  1398                           ;transmitPacket.c: 65: numStartPulses = 16;
  1399                           
  1400                           ;incstack = 0
  1401  00066E  0E10               	movlw	16
  1402  000670  6E0F               	movwf	xmitBreak@numStartPulses,c
  1403  000672                     l2012:
  1404                           
  1405                           ;transmitPacket.c: 68: LATAbits.LATA0 = 1;
  1406  000672  8089               	bsf	3977,0,c	;volatile
  1407                           
  1408                           ;transmitPacket.c: 69: delayLoop = 200;
  1409  000674  0EC8               	movlw	200
  1410  000676  6E11               	movwf	xmitBreak@delayLoop,c
  1411                           
  1412                           ;transmitPacket.c: 70: while (delayLoop) delayLoop--;
  1413  000678  D001               	goto	l2016
  1414  00067A                     l2014:
  1415  00067A  0611               	decf	xmitBreak@delayLoop,f,c
  1416  00067C                     l2016:
  1417  00067C  5011               	movf	xmitBreak@delayLoop,w,c
  1418  00067E  A4D8               	btfss	status,2,c
  1419  000680  D7FC               	goto	l2014
  1420                           
  1421                           ;transmitPacket.c: 72: LATAbits.LATA0 = 0;
  1422  000682  9089               	bcf	3977,0,c	;volatile
  1423                           
  1424                           ;transmitPacket.c: 73: delayLoop = 200;
  1425  000684  0EC8               	movlw	200
  1426  000686  6E11               	movwf	xmitBreak@delayLoop,c
  1427                           
  1428                           ;transmitPacket.c: 74: while (delayLoop) delayLoop--;
  1429  000688  D001               	goto	l2022
  1430  00068A                     l2020:
  1431  00068A  0611               	decf	xmitBreak@delayLoop,f,c
  1432  00068C                     l2022:
  1433  00068C  5011               	movf	xmitBreak@delayLoop,w,c
  1434  00068E  A4D8               	btfss	status,2,c
  1435  000690  D7FC               	goto	l2020
  1436                           
  1437                           ;transmitPacket.c: 76: numStartPulses--;
  1438  000692  060F               	decf	xmitBreak@numStartPulses,f,c
  1439                           
  1440                           ;transmitPacket.c: 77: } while (numStartPulses);
  1441  000694  500F               	movf	xmitBreak@numStartPulses,w,c
  1442  000696  A4D8               	btfss	status,2,c
  1443  000698  D7EC               	goto	l2012
  1444                           
  1445                           ;transmitPacket.c: 80: LATAbits.LATA0 = 1;
  1446  00069A  8089               	bsf	3977,0,c	;volatile
  1447                           
  1448                           ;transmitPacket.c: 81: delayTime = 12;
  1449  00069C  0E0C               	movlw	12
  1450  00069E  6E10               	movwf	xmitBreak@delayTime,c
  1451                           
  1452                           ;transmitPacket.c: 82: while (delayTime) {
  1453  0006A0  D008               	goto	l2038
  1454  0006A2                     l2030:
  1455                           
  1456                           ;transmitPacket.c: 83: delayLoop = 74;
  1457  0006A2  0E4A               	movlw	74
  1458  0006A4  6E11               	movwf	xmitBreak@delayLoop,c
  1459                           
  1460                           ;transmitPacket.c: 84: while (delayLoop)delayLoop--;
  1461  0006A6  D001               	goto	l2034
  1462  0006A8                     l2032:
  1463  0006A8  0611               	decf	xmitBreak@delayLoop,f,c
  1464  0006AA                     l2034:
  1465  0006AA  5011               	movf	xmitBreak@delayLoop,w,c
  1466  0006AC  A4D8               	btfss	status,2,c
  1467  0006AE  D7FC               	goto	l2032
  1468                           
  1469                           ;transmitPacket.c: 85: delayTime--;
  1470  0006B0  0610               	decf	xmitBreak@delayTime,f,c
  1471  0006B2                     l2038:
  1472  0006B2  5010               	movf	xmitBreak@delayTime,w,c
  1473  0006B4  A4D8               	btfss	status,2,c
  1474  0006B6  D7F5               	goto	l2030
  1475                           
  1476                           ;transmitPacket.c: 86: }
  1477                           ;transmitPacket.c: 89: LATAbits.LATA0 = 0;
  1478  0006B8  9089               	bcf	3977,0,c	;volatile
  1479                           
  1480                           ;transmitPacket.c: 90: delayTime = 13;
  1481  0006BA  0E0D               	movlw	13
  1482  0006BC  6E10               	movwf	xmitBreak@delayTime,c
  1483                           
  1484                           ;transmitPacket.c: 91: while (delayTime) {
  1485  0006BE  D008               	goto	l2050
  1486  0006C0                     l2042:
  1487                           
  1488                           ;transmitPacket.c: 92: delayLoop = 60;
  1489  0006C0  0E3C               	movlw	60
  1490  0006C2  6E11               	movwf	xmitBreak@delayLoop,c
  1491                           
  1492                           ;transmitPacket.c: 93: while (delayLoop)delayLoop--;
  1493  0006C4  D001               	goto	l2046
  1494  0006C6                     l2044:
  1495  0006C6  0611               	decf	xmitBreak@delayLoop,f,c
  1496  0006C8                     l2046:
  1497  0006C8  5011               	movf	xmitBreak@delayLoop,w,c
  1498  0006CA  A4D8               	btfss	status,2,c
  1499  0006CC  D7FC               	goto	l2044
  1500                           
  1501                           ;transmitPacket.c: 94: delayTime--;
  1502  0006CE  0610               	decf	xmitBreak@delayTime,f,c
  1503  0006D0                     l2050:
  1504  0006D0  5010               	movf	xmitBreak@delayTime,w,c
  1505  0006D2  A4D8               	btfss	status,2,c
  1506  0006D4  D7F5               	goto	l2042
  1507                           
  1508                           ;transmitPacket.c: 95: }
  1509                           ;transmitPacket.c: 98: LATAbits.LATA0 = 1;
  1510  0006D6  8089               	bsf	3977,0,c	;volatile
  1511                           
  1512                           ;transmitPacket.c: 99: delayTime = 5;
  1513  0006D8  0E05               	movlw	5
  1514  0006DA  6E10               	movwf	xmitBreak@delayTime,c
  1515                           
  1516                           ;transmitPacket.c: 100: while (delayTime) {
  1517  0006DC  D008               	goto	l2062
  1518  0006DE                     l2054:
  1519                           
  1520                           ;transmitPacket.c: 101: delayLoop = 74;
  1521  0006DE  0E4A               	movlw	74
  1522  0006E0  6E11               	movwf	xmitBreak@delayLoop,c
  1523                           
  1524                           ;transmitPacket.c: 102: while (delayLoop)delayLoop--;
  1525  0006E2  D001               	goto	l2058
  1526  0006E4                     l2056:
  1527  0006E4  0611               	decf	xmitBreak@delayLoop,f,c
  1528  0006E6                     l2058:
  1529  0006E6  5011               	movf	xmitBreak@delayLoop,w,c
  1530  0006E8  A4D8               	btfss	status,2,c
  1531  0006EA  D7FC               	goto	l2056
  1532                           
  1533                           ;transmitPacket.c: 103: delayTime--;
  1534  0006EC  0610               	decf	xmitBreak@delayTime,f,c
  1535  0006EE                     l2062:
  1536  0006EE  5010               	movf	xmitBreak@delayTime,w,c
  1537  0006F0  A4D8               	btfss	status,2,c
  1538  0006F2  D7F5               	goto	l2054
  1539                           
  1540                           ;transmitPacket.c: 104: }
  1541                           ;transmitPacket.c: 107: LATAbits.LATA0 = 0;
  1542  0006F4  9089               	bcf	3977,0,c	;volatile
  1543                           
  1544                           ;transmitPacket.c: 108: delayTime = 18;
  1545  0006F6  0E12               	movlw	18
  1546  0006F8  6E10               	movwf	xmitBreak@delayTime,c
  1547                           
  1548                           ;transmitPacket.c: 109: while (delayTime) {
  1549  0006FA  D008               	goto	l2074
  1550  0006FC                     l2066:
  1551                           
  1552                           ;transmitPacket.c: 110: delayLoop = 20;
  1553  0006FC  0E14               	movlw	20
  1554  0006FE  6E11               	movwf	xmitBreak@delayLoop,c
  1555                           
  1556                           ;transmitPacket.c: 111: while (delayLoop)delayLoop--;
  1557  000700  D001               	goto	l2070
  1558  000702                     l2068:
  1559  000702  0611               	decf	xmitBreak@delayLoop,f,c
  1560  000704                     l2070:
  1561  000704  5011               	movf	xmitBreak@delayLoop,w,c
  1562  000706  A4D8               	btfss	status,2,c
  1563  000708  D7FC               	goto	l2068
  1564                           
  1565                           ;transmitPacket.c: 112: delayTime--;
  1566  00070A  0610               	decf	xmitBreak@delayTime,f,c
  1567  00070C                     l2074:
  1568  00070C  5010               	movf	xmitBreak@delayTime,w,c
  1569  00070E  A4D8               	btfss	status,2,c
  1570  000710  D7F5               	goto	l2066
  1571                           
  1572                           ;transmitPacket.c: 113: }
  1573                           ;transmitPacket.c: 114: PORTBbits.RB5 = 1;
  1574  000712  8A81               	bsf	3969,5,c	;volatile
  1575  000714  0012               	return		;funcret
  1576  000716                     __end_of_xmitBreak:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           prodh	equ	0xFF4
  1580                           prodl	equ	0xFF3
  1581                           postinc0	equ	0xFEE
  1582                           wreg	equ	0xFE8
  1583                           postdec1	equ	0xFE5
  1584                           fsr1h	equ	0xFE2
  1585                           fsr1l	equ	0xFE1
  1586                           indf2	equ	0xFDF
  1587                           fsr2h	equ	0xFDA
  1588                           fsr2l	equ	0xFD9
  1589                           status	equ	0xFD8
  1590                           
  1591 ;; *************** function _initialize_I2C *****************
  1592 ;; Defined at:
  1593 ;;		line 194 in file "../MMA8452_18F.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, status,2
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1607 ;;      Params:         0       0       0       0       0       0       0
  1608 ;;      Locals:         0       0       0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0       0       0
  1610 ;;      Totals:         0       0       0       0       0       0       0
  1611 ;;Total ram usage:        0 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    1
  1614 ;; This function calls:
  1615 ;;		Nothing
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text3
  1622  000AA0                     __ptext3:
  1623                           	opt stack 0
  1624  000AA0                     _initialize_I2C:
  1625                           	opt stack 29
  1626                           
  1627                           ;MMA8452_18F.c: 195: SSPCON1 = 0x00;
  1628                           
  1629                           ;incstack = 0
  1630  000AA0  0E00               	movlw	0
  1631  000AA2  6EC6               	movwf	4038,c	;volatile
  1632                           
  1633                           ;MMA8452_18F.c: 196: SSPCON1bits.SSPEN = 1;
  1634  000AA4  8AC6               	bsf	4038,5,c	;volatile
  1635                           
  1636                           ;MMA8452_18F.c: 197: SSPCON1bits.SSPM3 = 1;
  1637  000AA6  86C6               	bsf	4038,3,c	;volatile
  1638                           
  1639                           ;MMA8452_18F.c: 198: SSPCON1bits.SSPM2 = 0;
  1640  000AA8  94C6               	bcf	4038,2,c	;volatile
  1641                           
  1642                           ;MMA8452_18F.c: 199: SSPCON1bits.SSPM1 = 0;
  1643  000AAA  92C6               	bcf	4038,1,c	;volatile
  1644                           
  1645                           ;MMA8452_18F.c: 200: SSPCON1bits.SSPM0 = 0;
  1646  000AAC  90C6               	bcf	4038,0,c	;volatile
  1647                           
  1648                           ;MMA8452_18F.c: 201: SSPCON1bits.CKP = 1;
  1649  000AAE  88C6               	bsf	4038,4,c	;volatile
  1650                           
  1651                           ;MMA8452_18F.c: 202: SSPADD = 9;
  1652  000AB0  0E09               	movlw	9
  1653  000AB2  6EC8               	movwf	4040,c	;volatile
  1654                           
  1655                           ;MMA8452_18F.c: 203: SSPSTAT = 0;
  1656  000AB4  0E00               	movlw	0
  1657  000AB6  6EC7               	movwf	4039,c	;volatile
  1658  000AB8  0012               	return		;funcret
  1659  000ABA                     __end_of_initialize_I2C:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           prodh	equ	0xFF4
  1663                           prodl	equ	0xFF3
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           postdec1	equ	0xFE5
  1667                           fsr1h	equ	0xFE2
  1668                           fsr1l	equ	0xFE1
  1669                           indf2	equ	0xFDF
  1670                           fsr2h	equ	0xFDA
  1671                           fsr2l	equ	0xFD9
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function _initMMA8452 *****************
  1675 ;; Defined at:
  1676 ;;		line 102 in file "../MMA8452_18F.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  accelData       4   32[COMRAM] unsigned char [4]
  1681 ;;  commandByte     1   36[COMRAM] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      unsigned char 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1691 ;;      Params:         0       0       0       0       0       0       0
  1692 ;;      Locals:         5       0       0       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0       0       0
  1694 ;;      Totals:         5       0       0       0       0       0       0
  1695 ;;Total ram usage:        5 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    5
  1698 ;; This function calls:
  1699 ;;		_readRegisters
  1700 ;;		_writeByteToRegister
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text4
  1707  000096                     __ptext4:
  1708                           	opt stack 0
  1709  000096                     _initMMA8452:
  1710                           	opt stack 25
  1711                           
  1712                           ;MMA8452_18F.c: 103: unsigned char accelData[4] = {0, 0, 0, 0};
  1713                           
  1714                           ;incstack = 0
  1715  000096  C03B  F021         	movff	initMMA8452@F2615,initMMA8452@accelData
  1716  00009A  C03C  F022         	movff	initMMA8452@F2615+1,initMMA8452@accelData+1
  1717  00009E  C03D  F023         	movff	initMMA8452@F2615+2,initMMA8452@accelData+2
  1718  0000A2  C03E  F024         	movff	initMMA8452@F2615+3,initMMA8452@accelData+3
  1719                           
  1720                           ;MMA8452_18F.c: 104: unsigned char commandByte;
  1721                           ;MMA8452_18F.c: 110: if (!readRegisters(0x1D, 0x2A, 1, accelData)) return (0);
  1722  0000A6  0E2A               	movlw	42
  1723  0000A8  6E15               	movwf	readRegisters@deviceREGISTER,c
  1724  0000AA  0E01               	movlw	1
  1725  0000AC  6E16               	movwf	readRegisters@numRegisters,c
  1726  0000AE  0E21               	movlw	low initMMA8452@accelData
  1727  0000B0  6E17               	movwf	readRegisters@registerPtr,c
  1728  0000B2  0E00               	movlw	high initMMA8452@accelData
  1729  0000B4  6E18               	movwf	readRegisters@registerPtr+1,c
  1730  0000B6  0E1D               	movlw	29
  1731  0000B8  ECDC  F003         	call	_readRegisters
  1732  0000BC  0900               	iorlw	0
  1733  0000BE  A4D8               	btfss	status,2,c
  1734  0000C0  D002               	goto	l186
  1735  0000C2  0E00               	movlw	0
  1736  0000C4  0012               	return	
  1737  0000C6                     l186:
  1738                           
  1739                           ;MMA8452_18F.c: 111: commandByte = accelData[0];
  1740  0000C6  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1741                           
  1742                           ;MMA8452_18F.c: 112: commandByte &= 0xFE;
  1743  0000CA  9025               	bcf	initMMA8452@commandByte,0,c
  1744                           
  1745                           ;MMA8452_18F.c: 113: if (!writeByteToRegister(0x1D, 0x2A, commandByte)) return (0);
  1746  0000CC  0E2A               	movlw	42
  1747  0000CE  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1748  0000D0  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1749  0000D4  0E1D               	movlw	29
  1750  0000D6  EC81  F004         	call	_writeByteToRegister
  1751  0000DA  0900               	iorlw	0
  1752  0000DC  A4D8               	btfss	status,2,c
  1753  0000DE  D002               	goto	l1788
  1754  0000E0  0E00               	movlw	0
  1755  0000E2  0012               	return	
  1756  0000E4                     l1788:
  1757                           
  1758                           ;MMA8452_18F.c: 116: if (!readRegisters(0x1D, 0x2B, 1, accelData)) return (0);
  1759  0000E4  0E2B               	movlw	43
  1760  0000E6  6E15               	movwf	readRegisters@deviceREGISTER,c
  1761  0000E8  0E01               	movlw	1
  1762  0000EA  6E16               	movwf	readRegisters@numRegisters,c
  1763  0000EC  0E21               	movlw	low initMMA8452@accelData
  1764  0000EE  6E17               	movwf	readRegisters@registerPtr,c
  1765  0000F0  0E00               	movlw	high initMMA8452@accelData
  1766  0000F2  6E18               	movwf	readRegisters@registerPtr+1,c
  1767  0000F4  0E1D               	movlw	29
  1768  0000F6  ECDC  F003         	call	_readRegisters
  1769  0000FA  0900               	iorlw	0
  1770  0000FC  A4D8               	btfss	status,2,c
  1771  0000FE  D002               	goto	l189
  1772  000100  0E00               	movlw	0
  1773  000102  0012               	return	
  1774  000104                     l189:
  1775                           
  1776                           ;MMA8452_18F.c: 117: commandByte = accelData[0];
  1777  000104  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1778                           
  1779                           ;MMA8452_18F.c: 118: commandByte | = 0x04;
  1780  000108  8425               	bsf	initMMA8452@commandByte,2,c
  1781                           
  1782                           ;MMA8452_18F.c: 119: if (!writeByteToRegister(0x1D, 0x2B, commandByte)) return (0);
  1783  00010A  0E2B               	movlw	43
  1784  00010C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1785  00010E  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1786  000112  0E1D               	movlw	29
  1787  000114  EC81  F004         	call	_writeByteToRegister
  1788  000118  0900               	iorlw	0
  1789  00011A  A4D8               	btfss	status,2,c
  1790  00011C  D002               	goto	l1802
  1791  00011E  0E00               	movlw	0
  1792  000120  0012               	return	
  1793  000122                     l1802:
  1794                           
  1795                           ;MMA8452_18F.c: 122: if (!readRegisters(0x1D, 0x2A, 1, accelData)) return (0);
  1796  000122  0E2A               	movlw	42
  1797  000124  6E15               	movwf	readRegisters@deviceREGISTER,c
  1798  000126  0E01               	movlw	1
  1799  000128  6E16               	movwf	readRegisters@numRegisters,c
  1800  00012A  0E21               	movlw	low initMMA8452@accelData
  1801  00012C  6E17               	movwf	readRegisters@registerPtr,c
  1802  00012E  0E00               	movlw	high initMMA8452@accelData
  1803  000130  6E18               	movwf	readRegisters@registerPtr+1,c
  1804  000132  0E1D               	movlw	29
  1805  000134  ECDC  F003         	call	_readRegisters
  1806  000138  0900               	iorlw	0
  1807  00013A  A4D8               	btfss	status,2,c
  1808  00013C  D002               	goto	l191
  1809  00013E  0E00               	movlw	0
  1810  000140  0012               	return	
  1811  000142                     l191:
  1812                           
  1813                           ;MMA8452_18F.c: 123: commandByte = accelData[0];
  1814  000142  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1815                           
  1816                           ;MMA8452_18F.c: 124: commandByte &= 0x5E;
  1817  000146  0E5E               	movlw	94
  1818  000148  1625               	andwf	initMMA8452@commandByte,f,c
  1819                           
  1820                           ;MMA8452_18F.c: 126: commandByte |= 0b01011000;
  1821  00014A  0E58               	movlw	88
  1822  00014C  1225               	iorwf	initMMA8452@commandByte,f,c
  1823                           
  1824                           ;MMA8452_18F.c: 127: if (!writeByteToRegister(0x1D, 0x2A, commandByte)) return (0);
  1825  00014E  0E2A               	movlw	42
  1826  000150  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1827  000152  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1828  000156  0E1D               	movlw	29
  1829  000158  EC81  F004         	call	_writeByteToRegister
  1830  00015C  0900               	iorlw	0
  1831  00015E  A4D8               	btfss	status,2,c
  1832  000160  D002               	goto	l1816
  1833  000162  0E00               	movlw	0
  1834  000164  0012               	return	
  1835  000166                     l1816:
  1836                           
  1837                           ;MMA8452_18F.c: 131: if (!readRegisters(0x1D, 0x2B, 1, accelData)) return (0);
  1838  000166  0E2B               	movlw	43
  1839  000168  6E15               	movwf	readRegisters@deviceREGISTER,c
  1840  00016A  0E01               	movlw	1
  1841  00016C  6E16               	movwf	readRegisters@numRegisters,c
  1842  00016E  0E21               	movlw	low initMMA8452@accelData
  1843  000170  6E17               	movwf	readRegisters@registerPtr,c
  1844  000172  0E00               	movlw	high initMMA8452@accelData
  1845  000174  6E18               	movwf	readRegisters@registerPtr+1,c
  1846  000176  0E1D               	movlw	29
  1847  000178  ECDC  F003         	call	_readRegisters
  1848  00017C  0900               	iorlw	0
  1849  00017E  A4D8               	btfss	status,2,c
  1850  000180  D002               	goto	l193
  1851  000182  0E00               	movlw	0
  1852  000184  0012               	return	
  1853  000186                     l193:
  1854                           
  1855                           ;MMA8452_18F.c: 132: commandByte = accelData[0];
  1856  000186  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1857                           
  1858                           ;MMA8452_18F.c: 133: commandByte &= 0xE4;
  1859  00018A  0EE4               	movlw	228
  1860  00018C  1625               	andwf	initMMA8452@commandByte,f,c
  1861                           
  1862                           ;MMA8452_18F.c: 134: commandByte |= 0x1A;
  1863  00018E  0E1A               	movlw	26
  1864  000190  1225               	iorwf	initMMA8452@commandByte,f,c
  1865                           
  1866                           ;MMA8452_18F.c: 135: if (!writeByteToRegister(0x1D, 0x2B, commandByte)) return (0);
  1867  000192  0E2B               	movlw	43
  1868  000194  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1869  000196  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1870  00019A  0E1D               	movlw	29
  1871  00019C  EC81  F004         	call	_writeByteToRegister
  1872  0001A0  0900               	iorlw	0
  1873  0001A2  A4D8               	btfss	status,2,c
  1874  0001A4  D002               	goto	l1830
  1875  0001A6  0E00               	movlw	0
  1876  0001A8  0012               	return	
  1877  0001AA                     l1830:
  1878                           
  1879                           ;MMA8452_18F.c: 138: if (!writeByteToRegister(0x1D, 0x2D, 0x84)) return (0);
  1880  0001AA  0E2D               	movlw	45
  1881  0001AC  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1882  0001AE  0E84               	movlw	132
  1883  0001B0  6E14               	movwf	writeByteToRegister@dataByte,c
  1884  0001B2  0E1D               	movlw	29
  1885  0001B4  EC81  F004         	call	_writeByteToRegister
  1886  0001B8  0900               	iorlw	0
  1887  0001BA  A4D8               	btfss	status,2,c
  1888  0001BC  D002               	goto	l1836
  1889  0001BE  0E00               	movlw	0
  1890  0001C0  0012               	return	
  1891  0001C2                     l1836:
  1892                           
  1893                           ;MMA8452_18F.c: 141: if (!writeByteToRegister(0x1D, 0x2E, 0x04)) return (0);
  1894  0001C2  0E2E               	movlw	46
  1895  0001C4  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1896  0001C6  0E04               	movlw	4
  1897  0001C8  6E14               	movwf	writeByteToRegister@dataByte,c
  1898  0001CA  0E1D               	movlw	29
  1899  0001CC  EC81  F004         	call	_writeByteToRegister
  1900  0001D0  0900               	iorlw	0
  1901  0001D2  A4D8               	btfss	status,2,c
  1902  0001D4  D002               	goto	l1842
  1903  0001D6  0E00               	movlw	0
  1904  0001D8  0012               	return	
  1905  0001DA                     l1842:
  1906                           
  1907                           ;MMA8452_18F.c: 144: if (!writeByteToRegister(0x1D, 0x2C, 0x0A)) return (0);
  1908  0001DA  0E2C               	movlw	44
  1909  0001DC  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1910  0001DE  0E0A               	movlw	10
  1911  0001E0  6E14               	movwf	writeByteToRegister@dataByte,c
  1912  0001E2  0E1D               	movlw	29
  1913  0001E4  EC81  F004         	call	_writeByteToRegister
  1914  0001E8  0900               	iorlw	0
  1915  0001EA  A4D8               	btfss	status,2,c
  1916  0001EC  D002               	goto	l1848
  1917  0001EE  0E00               	movlw	0
  1918  0001F0  0012               	return	
  1919  0001F2                     l1848:
  1920                           
  1921                           ;MMA8452_18F.c: 147: if (!readRegisters(0x1D, 0x0E, 1, accelData)) return (0);
  1922  0001F2  0E0E               	movlw	14
  1923  0001F4  6E15               	movwf	readRegisters@deviceREGISTER,c
  1924  0001F6  0E01               	movlw	1
  1925  0001F8  6E16               	movwf	readRegisters@numRegisters,c
  1926  0001FA  0E21               	movlw	low initMMA8452@accelData
  1927  0001FC  6E17               	movwf	readRegisters@registerPtr,c
  1928  0001FE  0E00               	movlw	high initMMA8452@accelData
  1929  000200  6E18               	movwf	readRegisters@registerPtr+1,c
  1930  000202  0E1D               	movlw	29
  1931  000204  ECDC  F003         	call	_readRegisters
  1932  000208  0900               	iorlw	0
  1933  00020A  A4D8               	btfss	status,2,c
  1934  00020C  D002               	goto	l198
  1935  00020E  0E00               	movlw	0
  1936  000210  0012               	return	
  1937  000212                     l198:
  1938                           
  1939                           ;MMA8452_18F.c: 148: commandByte = accelData[0];
  1940  000212  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  1941                           
  1942                           ;MMA8452_18F.c: 149: commandByte &= 0xFC;
  1943  000216  0EFC               	movlw	252
  1944  000218  1625               	andwf	initMMA8452@commandByte,f,c
  1945                           
  1946                           ;MMA8452_18F.c: 150: if (!writeByteToRegister(0x1D, 0x0E, commandByte)) return (0);
  1947  00021A  0E0E               	movlw	14
  1948  00021C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1949  00021E  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  1950  000222  0E1D               	movlw	29
  1951  000224  EC81  F004         	call	_writeByteToRegister
  1952  000228  0900               	iorlw	0
  1953  00022A  A4D8               	btfss	status,2,c
  1954  00022C  D002               	goto	l1862
  1955  00022E  0E00               	movlw	0
  1956  000230  0012               	return	
  1957  000232                     l1862:
  1958                           
  1959                           ;MMA8452_18F.c: 152: if (!writeByteToRegister(0x1D, 0x29, 64)) return (0);
  1960  000232  0E29               	movlw	41
  1961  000234  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1962  000236  0E40               	movlw	64
  1963  000238  6E14               	movwf	writeByteToRegister@dataByte,c
  1964  00023A  0E1D               	movlw	29
  1965  00023C  EC81  F004         	call	_writeByteToRegister
  1966  000240  0900               	iorlw	0
  1967  000242  A4D8               	btfss	status,2,c
  1968  000244  D002               	goto	l1868
  1969  000246  0E00               	movlw	0
  1970  000248  0012               	return	
  1971  00024A                     l1868:
  1972                           
  1973                           ;MMA8452_18F.c: 154: if (!writeByteToRegister(0x1D, 0x15, 0xF8)) return (0);
  1974  00024A  0E15               	movlw	21
  1975  00024C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1976  00024E  0EF8               	movlw	248
  1977  000250  6E14               	movwf	writeByteToRegister@dataByte,c
  1978  000252  0E1D               	movlw	29
  1979  000254  EC81  F004         	call	_writeByteToRegister
  1980  000258  0900               	iorlw	0
  1981  00025A  A4D8               	btfss	status,2,c
  1982  00025C  D002               	goto	l1874
  1983  00025E  0E00               	movlw	0
  1984  000260  0012               	return	
  1985  000262                     l1874:
  1986                           
  1987                           ;MMA8452_18F.c: 155: if (!writeByteToRegister(0x1D, 0x17, 0x18)) return (0);
  1988  000262  0E17               	movlw	23
  1989  000264  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  1990  000266  0E18               	movlw	24
  1991  000268  6E14               	movwf	writeByteToRegister@dataByte,c
  1992  00026A  0E1D               	movlw	29
  1993  00026C  EC81  F004         	call	_writeByteToRegister
  1994  000270  0900               	iorlw	0
  1995  000272  A4D8               	btfss	status,2,c
  1996  000274  D002               	goto	l1880
  1997  000276  0E00               	movlw	0
  1998  000278  0012               	return	
  1999  00027A                     l1880:
  2000                           
  2001                           ;MMA8452_18F.c: 156: if (!writeByteToRegister(0x1D, 0x18, 0x04)) return (0);
  2002  00027A  0E18               	movlw	24
  2003  00027C  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  2004  00027E  0E04               	movlw	4
  2005  000280  6E14               	movwf	writeByteToRegister@dataByte,c
  2006  000282  0E1D               	movlw	29
  2007  000284  EC81  F004         	call	_writeByteToRegister
  2008  000288  0900               	iorlw	0
  2009  00028A  A4D8               	btfss	status,2,c
  2010  00028C  D002               	goto	l1886
  2011  00028E  0E00               	movlw	0
  2012  000290  0012               	return	
  2013  000292                     l1886:
  2014                           
  2015                           ;MMA8452_18F.c: 158: if (!readRegisters(0x1D, 0x0C, 1, accelData)) return (0);
  2016  000292  0E0C               	movlw	12
  2017  000294  6E15               	movwf	readRegisters@deviceREGISTER,c
  2018  000296  0E01               	movlw	1
  2019  000298  6E16               	movwf	readRegisters@numRegisters,c
  2020  00029A  0E21               	movlw	low initMMA8452@accelData
  2021  00029C  6E17               	movwf	readRegisters@registerPtr,c
  2022  00029E  0E00               	movlw	high initMMA8452@accelData
  2023  0002A0  6E18               	movwf	readRegisters@registerPtr+1,c
  2024  0002A2  0E1D               	movlw	29
  2025  0002A4  ECDC  F003         	call	_readRegisters
  2026  0002A8  0900               	iorlw	0
  2027  0002AA  A4D8               	btfss	status,2,c
  2028  0002AC  D002               	goto	l1892
  2029  0002AE  0E00               	movlw	0
  2030  0002B0  0012               	return	
  2031  0002B2                     l1892:
  2032                           
  2033                           ;MMA8452_18F.c: 160: if (!readRegisters(0x1D, 0x2A, 1, accelData)) return (0);
  2034  0002B2  0E2A               	movlw	42
  2035  0002B4  6E15               	movwf	readRegisters@deviceREGISTER,c
  2036  0002B6  0E01               	movlw	1
  2037  0002B8  6E16               	movwf	readRegisters@numRegisters,c
  2038  0002BA  0E21               	movlw	low initMMA8452@accelData
  2039  0002BC  6E17               	movwf	readRegisters@registerPtr,c
  2040  0002BE  0E00               	movlw	high initMMA8452@accelData
  2041  0002C0  6E18               	movwf	readRegisters@registerPtr+1,c
  2042  0002C2  0E1D               	movlw	29
  2043  0002C4  ECDC  F003         	call	_readRegisters
  2044  0002C8  0900               	iorlw	0
  2045  0002CA  A4D8               	btfss	status,2,c
  2046  0002CC  D002               	goto	l205
  2047  0002CE  0E00               	movlw	0
  2048  0002D0  0012               	return	
  2049  0002D2                     l205:
  2050                           
  2051                           ;MMA8452_18F.c: 161: commandByte = accelData[0];
  2052  0002D2  C021  F025         	movff	initMMA8452@accelData,initMMA8452@commandByte
  2053                           
  2054                           ;MMA8452_18F.c: 162: commandByte |= 0x01;
  2055  0002D6  8025               	bsf	initMMA8452@commandByte,0,c
  2056                           
  2057                           ;MMA8452_18F.c: 163: if (!writeByteToRegister(0x1D, 0x2A, commandByte)) return (0);
  2058  0002D8  0E2A               	movlw	42
  2059  0002DA  6E13               	movwf	writeByteToRegister@deviceREGISTER,c
  2060  0002DC  C025  F014         	movff	initMMA8452@commandByte,writeByteToRegister@dataByte
  2061  0002E0  0E1D               	movlw	29
  2062  0002E2  EC81  F004         	call	_writeByteToRegister
  2063  0002E6  0900               	iorlw	0
  2064  0002E8  A4D8               	btfss	status,2,c
  2065  0002EA  D002               	goto	l1906
  2066  0002EC  0E00               	movlw	0
  2067  0002EE  0012               	return	
  2068  0002F0                     l1906:
  2069                           
  2070                           ;MMA8452_18F.c: 165: return (!0);
  2071  0002F0  0E01               	movlw	1
  2072  0002F2  0012               	return	
  2073  0002F4                     __end_of_initMMA8452:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           prodh	equ	0xFF4
  2077                           prodl	equ	0xFF3
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1h	equ	0xFE2
  2082                           fsr1l	equ	0xFE1
  2083                           indf2	equ	0xFDF
  2084                           fsr2h	equ	0xFDA
  2085                           fsr2l	equ	0xFD9
  2086                           status	equ	0xFD8
  2087                           
  2088 ;; *************** function _writeByteToRegister *****************
  2089 ;; Defined at:
  2090 ;;		line 53 in file "../MMA8452_18F.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  deviceID        1    wreg     unsigned char 
  2093 ;;  deviceREGIST    1   18[COMRAM] unsigned char 
  2094 ;;  dataByte        1   19[COMRAM] unsigned char 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  deviceID        1   20[COMRAM] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      unsigned char 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2106 ;;      Params:         2       0       0       0       0       0       0
  2107 ;;      Locals:         1       0       0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0
  2109 ;;      Totals:         3       0       0       0       0       0       0
  2110 ;;Total ram usage:        3 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    3
  2113 ;; This function calls:
  2114 ;;		_i2c_GetAcknowledge
  2115 ;;		_i2c_SendByte
  2116 ;;		_i2c_SendControlByte
  2117 ;;		_i2c_Start
  2118 ;;		_i2c_Stop
  2119 ;; This function is called by:
  2120 ;;		_initMMA8452
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text5
  2125  000902                     __ptext5:
  2126                           	opt stack 0
  2127  000902                     _writeByteToRegister:
  2128                           	opt stack 26
  2129                           
  2130                           ;incstack = 0
  2131                           ;writeByteToRegister@deviceID stored from wreg
  2132  000902  6E15               	movwf	writeByteToRegister@deviceID,c
  2133                           
  2134                           ;MMA8452_18F.c: 55: i2c_Start();
  2135  000904  EC86  F005         	call	_i2c_Start	;wreg free
  2136                           
  2137                           ;MMA8452_18F.c: 58: i2c_SendControlByte(deviceID << 1, 0x00);
  2138  000908  0E00               	movlw	0
  2139  00090A  6E10               	movwf	i2c_SendControlByte@direction,c
  2140  00090C  5015               	movf	writeByteToRegister@deviceID,w,c
  2141  00090E  2415               	addwf	writeByteToRegister@deviceID,w,c
  2142  000910  EC68  F005         	call	_i2c_SendControlByte
  2143                           
  2144                           ;MMA8452_18F.c: 61: if (i2c_GetAcknowledge() == 1) return (0);
  2145  000914  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2146  000918  06E8               	decf	wreg,f,c
  2147  00091A  A4D8               	btfss	status,2,c
  2148  00091C  D002               	goto	l1718
  2149  00091E  0E00               	movlw	0
  2150  000920  0012               	return	
  2151  000922                     l1718:
  2152                           
  2153                           ;MMA8452_18F.c: 64: i2c_SendByte(deviceREGISTER);
  2154  000922  5013               	movf	writeByteToRegister@deviceREGISTER,w,c
  2155  000924  EC70  F005         	call	_i2c_SendByte
  2156                           
  2157                           ;MMA8452_18F.c: 67: if (i2c_GetAcknowledge() == 1) return (0);
  2158  000928  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2159  00092C  06E8               	decf	wreg,f,c
  2160  00092E  A4D8               	btfss	status,2,c
  2161  000930  D002               	goto	l1724
  2162  000932  0E00               	movlw	0
  2163  000934  0012               	return	
  2164  000936                     l1724:
  2165                           
  2166                           ;MMA8452_18F.c: 70: i2c_SendByte(dataByte);
  2167  000936  5014               	movf	writeByteToRegister@dataByte,w,c
  2168  000938  EC70  F005         	call	_i2c_SendByte
  2169                           
  2170                           ;MMA8452_18F.c: 73: if (i2c_GetAcknowledge() == 1) return (0);
  2171  00093C  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2172  000940  06E8               	decf	wreg,f,c
  2173  000942  A4D8               	btfss	status,2,c
  2174  000944  D002               	goto	l1730
  2175  000946  0E00               	movlw	0
  2176  000948  0012               	return	
  2177  00094A                     l1730:
  2178                           
  2179                           ;MMA8452_18F.c: 76: i2c_Stop();
  2180  00094A  EC8B  F005         	call	_i2c_Stop	;wreg free
  2181                           
  2182                           ;MMA8452_18F.c: 78: return (!0);
  2183  00094E  0E01               	movlw	1
  2184  000950  0012               	return	
  2185  000952                     __end_of_writeByteToRegister:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1h	equ	0xFE2
  2194                           fsr1l	equ	0xFE1
  2195                           indf2	equ	0xFDF
  2196                           fsr2h	equ	0xFDA
  2197                           fsr2l	equ	0xFD9
  2198                           status	equ	0xFD8
  2199                           
  2200 ;; *************** function _readRegisters *****************
  2201 ;; Defined at:
  2202 ;;		line 82 in file "../MMA8452_18F.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  deviceID        1    wreg     unsigned char 
  2205 ;;  deviceREGIST    1   20[COMRAM] unsigned char 
  2206 ;;  numRegisters    1   21[COMRAM] unsigned char 
  2207 ;;  registerPtr     2   22[COMRAM] PTR unsigned char 
  2208 ;;		 -> initMMA8452@accelData(4), main@accelerometerBuffer(6), main@interruptSource(1), main@sysModRegister(1), 
  2209 ;;		 -> main@motionDetection(1), 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  deviceID        1   30[COMRAM] unsigned char 
  2212 ;;  i               1   31[COMRAM] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      unsigned char 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2222 ;;      Params:         4       0       0       0       0       0       0
  2223 ;;      Locals:         2       0       0       0       0       0       0
  2224 ;;      Temps:          6       0       0       0       0       0       0
  2225 ;;      Totals:        12       0       0       0       0       0       0
  2226 ;;Total ram usage:       12 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    4
  2229 ;; This function calls:
  2230 ;;		_i2c_ReadByte
  2231 ;;		_i2c_SendAcknowledge
  2232 ;;		_i2c_Stop
  2233 ;;		_sendREADcommand
  2234 ;;		_setRegister
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;;		_initMMA8452
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text6
  2242  0007B8                     __ptext6:
  2243                           	opt stack 0
  2244  0007B8                     _readRegisters:
  2245                           	opt stack 26
  2246                           
  2247                           ;incstack = 0
  2248                           ;readRegisters@deviceID stored from wreg
  2249  0007B8  6E1F               	movwf	readRegisters@deviceID,c
  2250                           
  2251                           ;MMA8452_18F.c: 83: unsigned char i;
  2252                           ;MMA8452_18F.c: 85: if (numRegisters >= 64)return (0);
  2253  0007BA  0E3F               	movlw	63
  2254  0007BC  6416               	cpfsgt	readRegisters@numRegisters,c
  2255  0007BE  D002               	goto	l1666
  2256  0007C0  0E00               	movlw	0
  2257  0007C2  0012               	return	
  2258  0007C4                     l1666:
  2259                           
  2260                           ;MMA8452_18F.c: 88: if (!setRegister(deviceID, deviceREGISTER)) return (0);
  2261  0007C4  C015  F013         	movff	readRegisters@deviceREGISTER,setRegister@deviceREGISTER
  2262  0007C8  501F               	movf	readRegisters@deviceID,w,c
  2263  0007CA  ECF1  F004         	call	_setRegister
  2264  0007CE  0900               	iorlw	0
  2265  0007D0  A4D8               	btfss	status,2,c
  2266  0007D2  D002               	goto	l1672
  2267  0007D4  0E00               	movlw	0
  2268  0007D6  0012               	return	
  2269  0007D8                     l1672:
  2270                           
  2271                           ;MMA8452_18F.c: 89: if (!sendREADcommand(deviceID)) return (0);
  2272  0007D8  501F               	movf	readRegisters@deviceID,w,c
  2273  0007DA  EC3E  F005         	call	_sendREADcommand
  2274  0007DE  0900               	iorlw	0
  2275  0007E0  A4D8               	btfss	status,2,c
  2276  0007E2  D002               	goto	l1678
  2277  0007E4  0E00               	movlw	0
  2278  0007E6  0012               	return	
  2279  0007E8                     l1678:
  2280                           
  2281                           ;MMA8452_18F.c: 91: for (i = 0; i < numRegisters; i++) {
  2282  0007E8  0E00               	movlw	0
  2283  0007EA  6E20               	movwf	readRegisters@i,c
  2284  0007EC  D028               	goto	l1690
  2285  0007EE                     l1680:
  2286                           
  2287                           ;MMA8452_18F.c: 92: registerPtr[i] = i2c_ReadByte();
  2288  0007EE  5020               	movf	readRegisters@i,w,c
  2289  0007F0  0D01               	mullw	1
  2290  0007F2  50F3               	movf	prodl,w,c
  2291  0007F4  2417               	addwf	readRegisters@registerPtr,w,c
  2292  0007F6  6ED9               	movwf	fsr2l,c
  2293  0007F8  50F4               	movf	prodh,w,c
  2294  0007FA  2018               	addwfc	readRegisters@registerPtr+1,w,c
  2295  0007FC  6EDA               	movwf	fsr2h,c
  2296  0007FE  EC78  F005         	call	_i2c_ReadByte	;wreg free
  2297  000802  6EDF               	movwf	indf2,c
  2298                           
  2299                           ;MMA8452_18F.c: 93: if (i == numRegisters-1) i2c_SendAcknowledge(0);
  2300  000804  5020               	movf	readRegisters@i,w,c
  2301  000806  6E19               	movwf	??_readRegisters& (0+255),c
  2302  000808  6A1A               	clrf	(??_readRegisters+1)& (0+255),c
  2303  00080A  0EFF               	movlw	255
  2304  00080C  6E1B               	movwf	(??_readRegisters+2)& (0+255),c
  2305  00080E  0EFF               	movlw	255
  2306  000810  6E1C               	movwf	(??_readRegisters+3)& (0+255),c
  2307  000812  5016               	movf	readRegisters@numRegisters,w,c
  2308  000814  6E1D               	movwf	(??_readRegisters+4)& (0+255),c
  2309  000816  6A1E               	clrf	(??_readRegisters+5)& (0+255),c
  2310  000818  501B               	movf	??_readRegisters+2,w,c
  2311  00081A  261D               	addwf	??_readRegisters+4,f,c
  2312  00081C  501C               	movf	??_readRegisters+3,w,c
  2313  00081E  221E               	addwfc	??_readRegisters+5,f,c
  2314  000820  5019               	movf	??_readRegisters,w,c
  2315  000822  181D               	xorwf	??_readRegisters+4,w,c
  2316  000824  E108               	bnz	l1686
  2317  000826  501A               	movf	??_readRegisters+1,w,c
  2318  000828  181E               	xorwf	??_readRegisters+5,w,c
  2319  00082A  A4D8               	btfss	status,2,c
  2320  00082C  D004               	goto	l1686
  2321  00082E  0E00               	movlw	0
  2322  000830  EC5D  F005         	call	_i2c_SendAcknowledge
  2323  000834  D003               	goto	l1688
  2324  000836                     l1686:
  2325                           
  2326                           ;MMA8452_18F.c: 94: else i2c_SendAcknowledge(!0);
  2327  000836  0E01               	movlw	1
  2328  000838  EC5D  F005         	call	_i2c_SendAcknowledge
  2329  00083C                     l1688:
  2330  00083C  2A20               	incf	readRegisters@i,f,c
  2331  00083E                     l1690:
  2332  00083E  5016               	movf	readRegisters@numRegisters,w,c
  2333  000840  5C20               	subwf	readRegisters@i,w,c
  2334  000842  A0D8               	btfss	status,0,c
  2335  000844  D7D4               	goto	l1680
  2336                           
  2337                           ;MMA8452_18F.c: 95: }
  2338                           ;MMA8452_18F.c: 97: i2c_Stop();
  2339  000846  EC8B  F005         	call	_i2c_Stop	;wreg free
  2340                           
  2341                           ;MMA8452_18F.c: 99: return (i);
  2342  00084A  5020               	movf	readRegisters@i,w,c
  2343  00084C  0012               	return	
  2344  00084E                     __end_of_readRegisters:
  2345                           	opt stack 0
  2346                           tblptru	equ	0xFF8
  2347                           prodh	equ	0xFF4
  2348                           prodl	equ	0xFF3
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           fsr1h	equ	0xFE2
  2353                           fsr1l	equ	0xFE1
  2354                           indf2	equ	0xFDF
  2355                           fsr2h	equ	0xFDA
  2356                           fsr2l	equ	0xFD9
  2357                           status	equ	0xFD8
  2358                           
  2359 ;; *************** function _setRegister *****************
  2360 ;; Defined at:
  2361 ;;		line 33 in file "../MMA8452_18F.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  deviceID        1    wreg     unsigned char 
  2364 ;;  deviceREGIST    1   18[COMRAM] unsigned char 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  deviceID        1   19[COMRAM] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2376 ;;      Params:         1       0       0       0       0       0       0
  2377 ;;      Locals:         1       0       0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0
  2379 ;;      Totals:         2       0       0       0       0       0       0
  2380 ;;Total ram usage:        2 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    3
  2383 ;; This function calls:
  2384 ;;		_i2c_GetAcknowledge
  2385 ;;		_i2c_SendByte
  2386 ;;		_i2c_SendControlByte
  2387 ;;		_i2c_Start
  2388 ;; This function is called by:
  2389 ;;		_readRegisters
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           	psect	text7
  2394  0009E2                     __ptext7:
  2395                           	opt stack 0
  2396  0009E2                     _setRegister:
  2397                           	opt stack 26
  2398                           
  2399                           ;incstack = 0
  2400                           ;setRegister@deviceID stored from wreg
  2401  0009E2  6E14               	movwf	setRegister@deviceID,c
  2402                           
  2403                           ;MMA8452_18F.c: 35: i2c_Start();
  2404  0009E4  EC86  F005         	call	_i2c_Start	;wreg free
  2405                           
  2406                           ;MMA8452_18F.c: 38: i2c_SendControlByte(deviceID << 1, 0x00);
  2407  0009E8  0E00               	movlw	0
  2408  0009EA  6E10               	movwf	i2c_SendControlByte@direction,c
  2409  0009EC  5014               	movf	setRegister@deviceID,w,c
  2410  0009EE  2414               	addwf	setRegister@deviceID,w,c
  2411  0009F0  EC68  F005         	call	_i2c_SendControlByte
  2412                           
  2413                           ;MMA8452_18F.c: 41: if (i2c_GetAcknowledge() == 1) return (0);
  2414  0009F4  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2415  0009F8  06E8               	decf	wreg,f,c
  2416  0009FA  A4D8               	btfss	status,2,c
  2417  0009FC  D002               	goto	l1638
  2418  0009FE  0E00               	movlw	0
  2419  000A00  0012               	return	
  2420  000A02                     l1638:
  2421                           
  2422                           ;MMA8452_18F.c: 44: i2c_SendByte(deviceREGISTER);
  2423  000A02  5013               	movf	setRegister@deviceREGISTER,w,c
  2424  000A04  EC70  F005         	call	_i2c_SendByte
  2425                           
  2426                           ;MMA8452_18F.c: 47: if (i2c_GetAcknowledge() == 1) return (0);
  2427  000A08  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2428  000A0C  06E8               	decf	wreg,f,c
  2429  000A0E  A4D8               	btfss	status,2,c
  2430  000A10  D002               	goto	l1644
  2431  000A12  0E00               	movlw	0
  2432  000A14  0012               	return	
  2433  000A16                     l1644:
  2434                           
  2435                           ;MMA8452_18F.c: 49: return (!0);
  2436  000A16  0E01               	movlw	1
  2437  000A18  0012               	return	
  2438  000A1A                     __end_of_setRegister:
  2439                           	opt stack 0
  2440                           tblptru	equ	0xFF8
  2441                           prodh	equ	0xFF4
  2442                           prodl	equ	0xFF3
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           postdec1	equ	0xFE5
  2446                           fsr1h	equ	0xFE2
  2447                           fsr1l	equ	0xFE1
  2448                           indf2	equ	0xFDF
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _sendREADcommand *****************
  2454 ;; Defined at:
  2455 ;;		line 19 in file "../MMA8452_18F.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  deviceID        1    wreg     unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  deviceID        1   18[COMRAM] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      unsigned char 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2469 ;;      Params:         0       0       0       0       0       0       0
  2470 ;;      Locals:         1       0       0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0
  2472 ;;      Totals:         1       0       0       0       0       0       0
  2473 ;;Total ram usage:        1 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    3
  2476 ;; This function calls:
  2477 ;;		_i2c_GetAcknowledge
  2478 ;;		_i2c_SendControlByte
  2479 ;;		_i2c_Start
  2480 ;; This function is called by:
  2481 ;;		_readRegisters
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text8
  2486  000A7C                     __ptext8:
  2487                           	opt stack 0
  2488  000A7C                     _sendREADcommand:
  2489                           	opt stack 26
  2490                           
  2491                           ;incstack = 0
  2492                           ;sendREADcommand@deviceID stored from wreg
  2493  000A7C  6E13               	movwf	sendREADcommand@deviceID,c
  2494                           
  2495                           ;MMA8452_18F.c: 21: i2c_Start();
  2496  000A7E  EC86  F005         	call	_i2c_Start	;wreg free
  2497                           
  2498                           ;MMA8452_18F.c: 24: i2c_SendControlByte(deviceID << 1, 0x01);
  2499  000A82  0E01               	movlw	1
  2500  000A84  6E10               	movwf	i2c_SendControlByte@direction,c
  2501  000A86  5013               	movf	sendREADcommand@deviceID,w,c
  2502  000A88  2413               	addwf	sendREADcommand@deviceID,w,c
  2503  000A8A  EC68  F005         	call	_i2c_SendControlByte
  2504                           
  2505                           ;MMA8452_18F.c: 27: if (i2c_GetAcknowledge() == 1) return (0);
  2506  000A8E  EC80  F005         	call	_i2c_GetAcknowledge	;wreg free
  2507  000A92  06E8               	decf	wreg,f,c
  2508  000A94  A4D8               	btfss	status,2,c
  2509  000A96  D002               	goto	l1624
  2510  000A98  0E00               	movlw	0
  2511  000A9A  0012               	return	
  2512  000A9C                     l1624:
  2513                           
  2514                           ;MMA8452_18F.c: 29: return (!0);
  2515  000A9C  0E01               	movlw	1
  2516  000A9E  0012               	return	
  2517  000AA0                     __end_of_sendREADcommand:
  2518                           	opt stack 0
  2519                           tblptru	equ	0xFF8
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           postinc0	equ	0xFEE
  2523                           wreg	equ	0xFE8
  2524                           postdec1	equ	0xFE5
  2525                           fsr1h	equ	0xFE2
  2526                           fsr1l	equ	0xFE1
  2527                           indf2	equ	0xFDF
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _i2c_Start *****************
  2533 ;; Defined at:
  2534 ;;		line 223 in file "../MMA8452_18F.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		None
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2548 ;;      Params:         0       0       0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0
  2551 ;;      Totals:         0       0       0       0       0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_sendREADcommand
  2559 ;;		_setRegister
  2560 ;;		_writeByteToRegister
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text9
  2565  000B0C                     __ptext9:
  2566                           	opt stack 0
  2567  000B0C                     _i2c_Start:
  2568                           	opt stack 27
  2569                           
  2570                           ;MMA8452_18F.c: 224: SSPCON2bits.SEN = 1;
  2571                           
  2572                           ;incstack = 0
  2573  000B0C  80C5               	bsf	4037,0,c	;volatile
  2574  000B0E                     l222:
  2575  000B0E  A69E               	btfss	3998,3,c	;volatile
  2576  000B10  D7FE               	goto	l222
  2577                           
  2578                           ;MMA8452_18F.c: 226: PIR1bits.SSPIF = 0;
  2579  000B12  969E               	bcf	3998,3,c	;volatile
  2580  000B14  0012               	return		;funcret
  2581  000B16                     __end_of_i2c_Start:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           prodh	equ	0xFF4
  2585                           prodl	equ	0xFF3
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           postdec1	equ	0xFE5
  2589                           fsr1h	equ	0xFE2
  2590                           fsr1l	equ	0xFE1
  2591                           indf2	equ	0xFDF
  2592                           fsr2h	equ	0xFDA
  2593                           fsr2l	equ	0xFD9
  2594                           status	equ	0xFD8
  2595                           
  2596 ;; *************** function _i2c_SendControlByte *****************
  2597 ;; Defined at:
  2598 ;;		line 257 in file "../MMA8452_18F.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  controlByte     1    wreg     unsigned char 
  2601 ;;  direction       1   15[COMRAM] unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  controlByte     1   16[COMRAM] unsigned char 
  2604 ;;  outByte         1   17[COMRAM] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      unsigned char 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2, status,0, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2614 ;;      Params:         1       0       0       0       0       0       0
  2615 ;;      Locals:         2       0       0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0
  2617 ;;      Totals:         3       0       0       0       0       0       0
  2618 ;;Total ram usage:        3 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    2
  2621 ;; This function calls:
  2622 ;;		_i2c_SendByte
  2623 ;; This function is called by:
  2624 ;;		_sendREADcommand
  2625 ;;		_setRegister
  2626 ;;		_writeByteToRegister
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text10
  2631  000AD0                     __ptext10:
  2632                           	opt stack 0
  2633  000AD0                     _i2c_SendControlByte:
  2634                           	opt stack 26
  2635                           
  2636                           ;incstack = 0
  2637                           ;i2c_SendControlByte@controlByte stored from wreg
  2638  000AD0  6E11               	movwf	i2c_SendControlByte@controlByte,c
  2639                           
  2640                           ;MMA8452_18F.c: 258: unsigned char outByte;
  2641                           ;MMA8452_18F.c: 260: outByte = controlByte | direction;
  2642  000AD2  5011               	movf	i2c_SendControlByte@controlByte,w,c
  2643  000AD4  1010               	iorwf	i2c_SendControlByte@direction,w,c
  2644  000AD6  6E12               	movwf	i2c_SendControlByte@outByte,c
  2645                           
  2646                           ;MMA8452_18F.c: 261: return i2c_SendByte (outByte);
  2647                           ;	Return value of _i2c_SendControlByte is never used
  2648  000AD8  5012               	movf	i2c_SendControlByte@outByte,w,c
  2649  000ADA  EC70  F005         	call	_i2c_SendByte
  2650  000ADE  0012               	return	
  2651  000AE0                     __end_of_i2c_SendControlByte:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           prodh	equ	0xFF4
  2655                           prodl	equ	0xFF3
  2656                           postinc0	equ	0xFEE
  2657                           wreg	equ	0xFE8
  2658                           postdec1	equ	0xFE5
  2659                           fsr1h	equ	0xFE2
  2660                           fsr1l	equ	0xFE1
  2661                           indf2	equ	0xFDF
  2662                           fsr2h	equ	0xFDA
  2663                           fsr2l	equ	0xFD9
  2664                           status	equ	0xFD8
  2665                           
  2666 ;; *************** function _i2c_SendByte *****************
  2667 ;; Defined at:
  2668 ;;		line 244 in file "../MMA8452_18F.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  byte            1    wreg     unsigned char 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  byte            1   14[COMRAM] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      unsigned char 
  2675 ;; Registers used:
  2676 ;;		wreg
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2682 ;;      Params:         0       0       0       0       0       0       0
  2683 ;;      Locals:         1       0       0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0
  2685 ;;      Totals:         1       0       0       0       0       0       0
  2686 ;;Total ram usage:        1 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    1
  2689 ;; This function calls:
  2690 ;;		Nothing
  2691 ;; This function is called by:
  2692 ;;		_setRegister
  2693 ;;		_writeByteToRegister
  2694 ;;		_i2c_SendControlByte
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text11
  2699  000AE0                     __ptext11:
  2700                           	opt stack 0
  2701  000AE0                     _i2c_SendByte:
  2702                           	opt stack 26
  2703                           
  2704                           ;incstack = 0
  2705                           ;i2c_SendByte@byte stored from wreg
  2706  000AE0  6E0F               	movwf	i2c_SendByte@byte,c
  2707                           
  2708                           ;MMA8452_18F.c: 246: SSPBUF = byte;
  2709  000AE2  C00F  FFC9         	movff	i2c_SendByte@byte,4041	;volatile
  2710  000AE6                     l228:
  2711  000AE6  A69E               	btfss	3998,3,c	;volatile
  2712  000AE8  D7FE               	goto	l228
  2713                           
  2714                           ;MMA8452_18F.c: 248: PIR1bits.SSPIF = 0;
  2715  000AEA  969E               	bcf	3998,3,c	;volatile
  2716                           
  2717                           ;MMA8452_18F.c: 250: return 0;
  2718  000AEC  0E00               	movlw	0
  2719  000AEE  0012               	return	
  2720  000AF0                     __end_of_i2c_SendByte:
  2721                           	opt stack 0
  2722                           tblptru	equ	0xFF8
  2723                           prodh	equ	0xFF4
  2724                           prodl	equ	0xFF3
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           postdec1	equ	0xFE5
  2728                           fsr1h	equ	0xFE2
  2729                           fsr1l	equ	0xFE1
  2730                           indf2	equ	0xFDF
  2731                           fsr2h	equ	0xFDA
  2732                           fsr2l	equ	0xFD9
  2733                           status	equ	0xFD8
  2734                           
  2735 ;; *************** function _i2c_GetAcknowledge *****************
  2736 ;; Defined at:
  2737 ;;		line 266 in file "../MMA8452_18F.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  ack             1   14[COMRAM] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      unsigned char 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2751 ;;      Params:         0       0       0       0       0       0       0
  2752 ;;      Locals:         1       0       0       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0       0       0
  2754 ;;      Totals:         1       0       0       0       0       0       0
  2755 ;;Total ram usage:        1 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    1
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_sendREADcommand
  2762 ;;		_setRegister
  2763 ;;		_writeByteToRegister
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text12
  2768  000B00                     __ptext12:
  2769                           	opt stack 0
  2770  000B00                     _i2c_GetAcknowledge:
  2771                           	opt stack 27
  2772                           
  2773                           ;MMA8452_18F.c: 267: unsigned char ack;
  2774                           ;MMA8452_18F.c: 269: ack = SSPCON2bits.ACKSTAT;
  2775                           
  2776                           ;incstack = 0
  2777  000B00  0E00               	movlw	0
  2778  000B02  BCC5               	btfsc	4037,6,c	;volatile
  2779  000B04  0E01               	movlw	1
  2780  000B06  6E0F               	movwf	i2c_GetAcknowledge@ack,c
  2781                           
  2782                           ;MMA8452_18F.c: 271: return ack;
  2783  000B08  500F               	movf	i2c_GetAcknowledge@ack,w,c
  2784  000B0A  0012               	return	
  2785  000B0C                     __end_of_i2c_GetAcknowledge:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           fsr2h	equ	0xFDA
  2797                           fsr2l	equ	0xFD9
  2798                           status	equ	0xFD8
  2799                           
  2800 ;; *************** function _i2c_Stop *****************
  2801 ;; Defined at:
  2802 ;;		line 214 in file "../MMA8452_18F.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		None
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2816 ;;      Params:         0       0       0       0       0       0       0
  2817 ;;      Locals:         0       0       0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0
  2819 ;;      Totals:         0       0       0       0       0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels used:    1
  2822 ;; Hardware stack levels required when called:    1
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_writeByteToRegister
  2827 ;;		_readRegisters
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text13
  2832  000B16                     __ptext13:
  2833                           	opt stack 0
  2834  000B16                     _i2c_Stop:
  2835                           	opt stack 28
  2836                           
  2837                           ;MMA8452_18F.c: 215: SSPCON2bits.PEN = 1;
  2838                           
  2839                           ;incstack = 0
  2840  000B16  84C5               	bsf	4037,2,c	;volatile
  2841  000B18                     l216:
  2842  000B18  A69E               	btfss	3998,3,c	;volatile
  2843  000B1A  D7FE               	goto	l216
  2844                           
  2845                           ;MMA8452_18F.c: 217: PIR1bits.SSPIF = 0;
  2846  000B1C  969E               	bcf	3998,3,c	;volatile
  2847  000B1E  0012               	return		;funcret
  2848  000B20                     __end_of_i2c_Stop:
  2849                           	opt stack 0
  2850                           tblptru	equ	0xFF8
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1h	equ	0xFE2
  2857                           fsr1l	equ	0xFE1
  2858                           indf2	equ	0xFDF
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _i2c_SendAcknowledge *****************
  2864 ;; Defined at:
  2865 ;;		line 293 in file "../MMA8452_18F.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  status          1    wreg     unsigned char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  status          1   14[COMRAM] unsigned char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         0       0       0       0       0       0       0
  2880 ;;      Locals:         1       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0
  2882 ;;      Totals:         1       0       0       0       0       0       0
  2883 ;;Total ram usage:        1 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    1
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_readRegisters
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text14
  2894  000ABA                     __ptext14:
  2895                           	opt stack 0
  2896  000ABA                     _i2c_SendAcknowledge:
  2897                           	opt stack 28
  2898                           
  2899                           ;incstack = 0
  2900                           ;i2c_SendAcknowledge@status stored from wreg
  2901  000ABA  6E0F               	movwf	i2c_SendAcknowledge@status,c
  2902                           
  2903                           ;MMA8452_18F.c: 294: if ( status & 0x01) {
  2904  000ABC  A00F               	btfss	i2c_SendAcknowledge@status,0,c
  2905  000ABE  D002               	goto	l246
  2906                           
  2907                           ;MMA8452_18F.c: 295: SSPCON2bits.ACKDT = 0;
  2908  000AC0  9AC5               	bcf	4037,5,c	;volatile
  2909                           
  2910                           ;MMA8452_18F.c: 296: }
  2911  000AC2  D001               	goto	l247
  2912  000AC4                     l246:
  2913                           
  2914                           ;MMA8452_18F.c: 297: else {
  2915                           ;MMA8452_18F.c: 298: SSPCON2bits.ACKDT = 1;
  2916  000AC4  8AC5               	bsf	4037,5,c	;volatile
  2917  000AC6                     l247:
  2918                           
  2919                           ;MMA8452_18F.c: 299: }
  2920                           ;MMA8452_18F.c: 300: SSPCON2bits.ACKEN = 1;
  2921  000AC6  88C5               	bsf	4037,4,c	;volatile
  2922  000AC8                     l248:
  2923  000AC8  A69E               	btfss	3998,3,c	;volatile
  2924  000ACA  D7FE               	goto	l248
  2925                           
  2926                           ;MMA8452_18F.c: 302: PIR1bits.SSPIF = 0;
  2927  000ACC  969E               	bcf	3998,3,c	;volatile
  2928  000ACE  0012               	return		;funcret
  2929  000AD0                     __end_of_i2c_SendAcknowledge:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           prodh	equ	0xFF4
  2933                           prodl	equ	0xFF3
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           indf2	equ	0xFDF
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _i2c_ReadByte *****************
  2945 ;; Defined at:
  2946 ;;		line 276 in file "../MMA8452_18F.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  byte            1   14[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      unsigned char 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2960 ;;      Params:         0       0       0       0       0       0       0
  2961 ;;      Locals:         1       0       0       0       0       0       0
  2962 ;;      Temps:          0       0       0       0       0       0       0
  2963 ;;      Totals:         1       0       0       0       0       0       0
  2964 ;;Total ram usage:        1 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_readRegisters
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text15
  2975  000AF0                     __ptext15:
  2976                           	opt stack 0
  2977  000AF0                     _i2c_ReadByte:
  2978                           	opt stack 28
  2979                           
  2980                           ;MMA8452_18F.c: 277: unsigned char byte;
  2981                           ;MMA8452_18F.c: 279: SSPCON2bits.RCEN = 1;
  2982                           
  2983                           ;incstack = 0
  2984  000AF0  86C5               	bsf	4037,3,c	;volatile
  2985  000AF2                     l240:
  2986  000AF2  A69E               	btfss	3998,3,c	;volatile
  2987  000AF4  D7FE               	goto	l240
  2988                           
  2989                           ;MMA8452_18F.c: 281: PIR1bits.SSPIF = 0;
  2990  000AF6  969E               	bcf	3998,3,c	;volatile
  2991                           
  2992                           ;MMA8452_18F.c: 282: byte = SSPBUF;
  2993  000AF8  CFC9 F00F          	movff	4041,i2c_ReadByte@byte	;volatile
  2994                           
  2995                           ;MMA8452_18F.c: 283: return (int)byte;
  2996  000AFC  500F               	movf	i2c_ReadByte@byte,w,c
  2997  000AFE  0012               	return	
  2998  000B00                     __end_of_i2c_ReadByte:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _init *****************
  3014 ;; Defined at:
  3015 ;;		line 154 in file "../main.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;		None
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;		None
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3029 ;;      Params:         0       0       0       0       0       0       0
  3030 ;;      Locals:         0       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0
  3032 ;;      Totals:         0       0       0       0       0       0       0
  3033 ;;Total ram usage:        0 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_main
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text16
  3044  000A4E                     __ptext16:
  3045                           	opt stack 0
  3046  000A4E                     _init:
  3047                           	opt stack 29
  3048                           
  3049                           ;main.c: 155: INTCONbits.GIE = 0;
  3050                           
  3051                           ;incstack = 0
  3052  000A4E  9EF2               	bcf	intcon,7,c	;volatile
  3053                           
  3054                           ;main.c: 157: ADCON0 = 0;
  3055  000A50  0E00               	movlw	0
  3056  000A52  6EC2               	movwf	4034,c	;volatile
  3057                           
  3058                           ;main.c: 158: ADCON1 = 0b00001111;
  3059  000A54  0E0F               	movlw	15
  3060  000A56  6EC1               	movwf	4033,c	;volatile
  3061                           
  3062                           ;main.c: 160: TRISB = 0b11011111;
  3063  000A58  0EDF               	movlw	223
  3064  000A5A  6E93               	movwf	3987,c	;volatile
  3065                           
  3066                           ;main.c: 161: INTCON2bits.RBPU = 0;
  3067  000A5C  9EF1               	bcf	intcon2,7,c	;volatile
  3068                           
  3069                           ;main.c: 162: TRISC = 0b11111111;
  3070  000A5E  6894               	setf	3988,c	;volatile
  3071                           
  3072                           ;main.c: 165: TXSTAbits.TXEN = 0;
  3073  000A60  9AAC               	bcf	4012,5,c	;volatile
  3074                           
  3075                           ;main.c: 166: TRISC = 0b11111111;
  3076  000A62  6894               	setf	3988,c	;volatile
  3077                           
  3078                           ;main.c: 167: TRISA = 0b11111100;
  3079  000A64  0EFC               	movlw	252
  3080  000A66  6E92               	movwf	3986,c	;volatile
  3081                           
  3082                           ;main.c: 199: INTCON = 0x00;
  3083  000A68  0E00               	movlw	0
  3084  000A6A  6EF2               	movwf	intcon,c	;volatile
  3085                           
  3086                           ;main.c: 200: INTCONbits.INT0IE = 1;
  3087  000A6C  88F2               	bsf	intcon,4,c	;volatile
  3088                           
  3089                           ;main.c: 201: INTCONbits.RBIE = 1;
  3090  000A6E  86F2               	bsf	intcon,3,c	;volatile
  3091                           
  3092                           ;main.c: 203: INTCON2 = 0x00;
  3093  000A70  0E00               	movlw	0
  3094  000A72  6EF1               	movwf	intcon2,c	;volatile
  3095                           
  3096                           ;main.c: 204: INTCON2bits.RBPU = 0;
  3097  000A74  9EF1               	bcf	intcon2,7,c	;volatile
  3098                           
  3099                           ;main.c: 205: INTCON2bits.INTEDG0 = 0;
  3100  000A76  9CF1               	bcf	intcon2,6,c	;volatile
  3101                           
  3102                           ;main.c: 206: INTCONbits.GIE = 1;
  3103  000A78  8EF2               	bsf	intcon,7,c	;volatile
  3104  000A7A  0012               	return		;funcret
  3105  000A7C                     __end_of_init:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           intcon	equ	0xFF2
  3111                           intcon2	equ	0xFF1
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1h	equ	0xFE2
  3116                           fsr1l	equ	0xFE1
  3117                           indf2	equ	0xFDF
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _getTwosComplement *****************
  3123 ;; Defined at:
  3124 ;;		line 172 in file "../MMA8452_18F.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  MSBbyte         1    wreg     unsigned char 
  3127 ;;  LSBbyte         1   14[COMRAM] unsigned char 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  MSBbyte         1   19[COMRAM] unsigned char 
  3130 ;;  value           2   20[COMRAM] short 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  2   14[COMRAM] short 
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3140 ;;      Params:         2       0       0       0       0       0       0
  3141 ;;      Locals:         3       0       0       0       0       0       0
  3142 ;;      Temps:          3       0       0       0       0       0       0
  3143 ;;      Totals:         8       0       0       0       0       0       0
  3144 ;;Total ram usage:        8 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    1
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_main
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text17
  3155  0008AE                     __ptext17:
  3156                           	opt stack 0
  3157  0008AE                     _getTwosComplement:
  3158                           	opt stack 29
  3159                           
  3160                           ;incstack = 0
  3161                           ;getTwosComplement@MSBbyte stored from wreg
  3162  0008AE  6E14               	movwf	getTwosComplement@MSBbyte,c
  3163                           
  3164                           ;MMA8452_18F.c: 173: short value;
  3165                           ;MMA8452_18F.c: 176: value = MSBbyte;
  3166  0008B0  C014  F015         	movff	getTwosComplement@MSBbyte,getTwosComplement@value
  3167  0008B4  6A16               	clrf	getTwosComplement@value+1,c
  3168                           
  3169                           ;MMA8452_18F.c: 177: value = value << 8;
  3170  0008B6  5015               	movf	getTwosComplement@value,w,c
  3171  0008B8  6E16               	movwf	getTwosComplement@value+1,c
  3172  0008BA  6A15               	clrf	getTwosComplement@value,c
  3173                           
  3174                           ;MMA8452_18F.c: 178: value = value | LSBbyte;
  3175  0008BC  5015               	movf	getTwosComplement@value,w,c
  3176  0008BE  100F               	iorwf	getTwosComplement@LSBbyte,w,c
  3177  0008C0  6E15               	movwf	getTwosComplement@value,c
  3178  0008C2  5016               	movf	getTwosComplement@value+1,w,c
  3179  0008C4  6E16               	movwf	getTwosComplement@value+1,c
  3180                           
  3181                           ;MMA8452_18F.c: 181: value = value >> 4;
  3182  0008C6  C015  F011         	movff	getTwosComplement@value,??_getTwosComplement
  3183  0008CA  C016  F012         	movff	getTwosComplement@value+1,??_getTwosComplement+1
  3184  0008CE  0E04               	movlw	4
  3185  0008D0  6E13               	movwf	(??_getTwosComplement+2)& (0+255),c
  3186  0008D2                     u1205:
  3187  0008D2  3412               	rlcf	??_getTwosComplement+1,w,c
  3188  0008D4  3212               	rrcf	??_getTwosComplement+1,f,c
  3189  0008D6  3211               	rrcf	??_getTwosComplement,f,c
  3190  0008D8  2E13               	decfsz	(??_getTwosComplement+2)& (0+255),f,c
  3191  0008DA  D7FB               	goto	u1205
  3192  0008DC  C011  F015         	movff	??_getTwosComplement,getTwosComplement@value
  3193  0008E0  C012  F016         	movff	??_getTwosComplement+1,getTwosComplement@value+1
  3194                           
  3195                           ;MMA8452_18F.c: 184: if ((MSBbyte & 0x80) != 0) {
  3196  0008E4  AE14               	btfss	getTwosComplement@MSBbyte,7,c
  3197  0008E6  D008               	goto	l1922
  3198                           
  3199                           ;MMA8452_18F.c: 185: value = ~value + 1;
  3200  0008E8  6C15               	negf	getTwosComplement@value,c
  3201  0008EA  1E16               	comf	getTwosComplement@value+1,f,c
  3202  0008EC  B0D8               	btfsc	status,0,c
  3203  0008EE  2A16               	incf	getTwosComplement@value+1,f,c
  3204                           
  3205                           ;MMA8452_18F.c: 186: value = value * -1;
  3206  0008F0  6C15               	negf	getTwosComplement@value,c
  3207  0008F2  1E16               	comf	getTwosComplement@value+1,f,c
  3208  0008F4  B0D8               	btfsc	status,0,c
  3209  0008F6  2A16               	incf	getTwosComplement@value+1,f,c
  3210  0008F8                     l1922:
  3211                           
  3212                           ;MMA8452_18F.c: 187: }
  3213                           ;MMA8452_18F.c: 188: return (value);
  3214  0008F8  C015  F00F         	movff	getTwosComplement@value,?_getTwosComplement
  3215  0008FC  C016  F010         	movff	getTwosComplement@value+1,?_getTwosComplement+1
  3216  000900  0012               	return	
  3217  000902                     __end_of_getTwosComplement:
  3218                           	opt stack 0
  3219                           tblptru	equ	0xFF8
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           intcon2	equ	0xFF1
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           postdec1	equ	0xFE5
  3227                           fsr1h	equ	0xFE2
  3228                           fsr1l	equ	0xFE1
  3229                           indf2	equ	0xFDF
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _createDataPacket *****************
  3235 ;; Defined at:
  3236 ;;		line 224 in file "../main.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  ptrData         2   14[COMRAM] PTR unsigned char 
  3239 ;;		 -> commandBuffer(64), 
  3240 ;;  numDataBytes    2   16[COMRAM] unsigned short 
  3241 ;;  ptrPacket       2   18[COMRAM] PTR unsigned char 
  3242 ;;		 -> arrDataPacket(1024), 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  packetIndex     2   27[COMRAM] unsigned short 
  3245 ;;  dataIndex       2   21[COMRAM] unsigned short 
  3246 ;;  state           1   26[COMRAM] unsigned char 
  3247 ;;  byteMask        1   25[COMRAM] unsigned char 
  3248 ;;  i               1   24[COMRAM] unsigned char 
  3249 ;;  dataBit         1   23[COMRAM] unsigned char 
  3250 ;;  previousData    1   20[COMRAM] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  2   14[COMRAM] unsigned short 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3260 ;;      Params:         6       0       0       0       0       0       0
  3261 ;;      Locals:         9       0       0       0       0       0       0
  3262 ;;      Temps:          0       0       0       0       0       0       0
  3263 ;;      Totals:        15       0       0       0       0       0       0
  3264 ;;Total ram usage:       15 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    1
  3267 ;; This function calls:
  3268 ;;		Nothing
  3269 ;; This function is called by:
  3270 ;;		_main
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text18
  3275  000536                     __ptext18:
  3276                           	opt stack 0
  3277  000536                     _createDataPacket:
  3278                           	opt stack 29
  3279                           
  3280                           ;main.c: 225: unsigned char byteMask, dataBit, previousDataBit, i, state;
  3281                           ;main.c: 226: unsigned short dataIndex, packetIndex;
  3282                           ;main.c: 228: if ( (numDataBytes > 64) || (ptrData == (0)) || (ptrPacket == (0)) )
  3283                           
  3284                           ;incstack = 0
  3285  000536  5012               	movf	createDataPacket@numDataBytes+1,w,c
  3286  000538  E10C               	bnz	l1942
  3287  00053A  0E41               	movlw	65
  3288  00053C  5C11               	subwf	createDataPacket@numDataBytes,w,c
  3289  00053E  B0D8               	btfsc	status,0,c
  3290  000540  D008               	goto	l1942
  3291  000542  500F               	movf	createDataPacket@ptrData,w,c
  3292  000544  1010               	iorwf	createDataPacket@ptrData+1,w,c
  3293  000546  B4D8               	btfsc	status,2,c
  3294  000548  D004               	goto	l1942
  3295  00054A  5013               	movf	createDataPacket@ptrPacket,w,c
  3296  00054C  1014               	iorwf	createDataPacket@ptrPacket+1,w,c
  3297  00054E  A4D8               	btfss	status,2,c
  3298  000550  D005               	goto	l1946
  3299  000552                     l1942:
  3300                           
  3301                           ;main.c: 229: return(0);
  3302  000552  0E00               	movlw	0
  3303  000554  6E10               	movwf	?_createDataPacket+1,c
  3304  000556  0E00               	movlw	0
  3305  000558  6E0F               	movwf	?_createDataPacket,c
  3306  00055A  0012               	return	
  3307  00055C                     l1946:
  3308                           
  3309                           ;main.c: 231: previousDataBit = 0;
  3310  00055C  0E00               	movlw	0
  3311  00055E  6E15               	movwf	createDataPacket@previousDataBit,c
  3312                           
  3313                           ;main.c: 232: state = 0;
  3314  000560  0E00               	movlw	0
  3315  000562  6E1B               	movwf	createDataPacket@state,c
  3316                           
  3317                           ;main.c: 234: packetIndex = dataIndex = 0;
  3318  000564  0E00               	movlw	0
  3319  000566  6E17               	movwf	createDataPacket@dataIndex+1,c
  3320  000568  0E00               	movlw	0
  3321  00056A  6E16               	movwf	createDataPacket@dataIndex,c
  3322  00056C  C016  F01C         	movff	createDataPacket@dataIndex,createDataPacket@packetIndex
  3323  000570  C017  F01D         	movff	createDataPacket@dataIndex+1,createDataPacket@packetIndex+1
  3324                           
  3325                           ;main.c: 235: byteMask = 0x01;
  3326  000574  0E01               	movlw	1
  3327  000576  6E1A               	movwf	createDataPacket@byteMask,c
  3328                           
  3329                           ;main.c: 237: while (dataIndex < numDataBytes){
  3330  000578  D066               	goto	l2000
  3331  00057A                     l1948:
  3332                           
  3333                           ;main.c: 238: byteMask = 0x01;
  3334  00057A  0E01               	movlw	1
  3335  00057C  6E1A               	movwf	createDataPacket@byteMask,c
  3336                           
  3337                           ;main.c: 239: for (i = 0; i < 8; i++) {
  3338  00057E  0E00               	movlw	0
  3339  000580  6E19               	movwf	createDataPacket@i,c
  3340  000582                     l1950:
  3341  000582  0E07               	movlw	7
  3342  000584  6419               	cpfsgt	createDataPacket@i,c
  3343  000586  D001               	goto	l1954
  3344  000588  D05C               	goto	l1998
  3345  00058A                     l1954:
  3346                           
  3347                           ;main.c: 240: if (byteMask & ptrData[dataIndex]) dataBit = 1;
  3348  00058A  5016               	movf	createDataPacket@dataIndex,w,c
  3349  00058C  240F               	addwf	createDataPacket@ptrData,w,c
  3350  00058E  6ED9               	movwf	fsr2l,c
  3351  000590  5017               	movf	createDataPacket@dataIndex+1,w,c
  3352  000592  2010               	addwfc	createDataPacket@ptrData+1,w,c
  3353  000594  6EDA               	movwf	fsr2h,c
  3354  000596  50DF               	movf	indf2,w,c
  3355  000598  141A               	andwf	createDataPacket@byteMask,w,c
  3356  00059A  0900               	iorlw	0
  3357  00059C  B4D8               	btfsc	status,2,c
  3358  00059E  D002               	goto	l1958
  3359  0005A0  0E01               	movlw	1
  3360  0005A2  D001               	goto	L3
  3361  0005A4                     l1958:
  3362                           
  3363                           ;main.c: 241: else dataBit = 0;
  3364  0005A4  0E00               	movlw	0
  3365  0005A6                     L3:
  3366  0005A6  6E18               	movwf	createDataPacket@dataBit,c
  3367                           
  3368                           ;main.c: 245: if (dataBit == previousDataBit){
  3369  0005A8  5015               	movf	createDataPacket@previousDataBit,w,c
  3370  0005AA  1818               	xorwf	createDataPacket@dataBit,w,c
  3371  0005AC  A4D8               	btfss	status,2,c
  3372  0005AE  D027               	goto	l1976
  3373                           
  3374                           ;main.c: 246: if (state == 1){
  3375  0005B0  041B               	decf	createDataPacket@state,w,c
  3376  0005B2  A4D8               	btfss	status,2,c
  3377  0005B4  D012               	goto	l1970
  3378                           
  3379                           ;main.c: 247: ptrPacket[packetIndex++] = 0;
  3380  0005B6  501C               	movf	createDataPacket@packetIndex,w,c
  3381  0005B8  2413               	addwf	createDataPacket@ptrPacket,w,c
  3382  0005BA  6ED9               	movwf	fsr2l,c
  3383  0005BC  501D               	movf	createDataPacket@packetIndex+1,w,c
  3384  0005BE  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3385  0005C0  6EDA               	movwf	fsr2h,c
  3386  0005C2  0E00               	movlw	0
  3387  0005C4  6EDF               	movwf	indf2,c
  3388  0005C6  4A1C               	infsnz	createDataPacket@packetIndex,f,c
  3389  0005C8  2A1D               	incf	createDataPacket@packetIndex+1,f,c
  3390                           
  3391                           ;main.c: 248: ptrPacket[packetIndex++] = 1;
  3392  0005CA  501C               	movf	createDataPacket@packetIndex,w,c
  3393  0005CC  2413               	addwf	createDataPacket@ptrPacket,w,c
  3394  0005CE  6ED9               	movwf	fsr2l,c
  3395  0005D0  501D               	movf	createDataPacket@packetIndex+1,w,c
  3396  0005D2  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3397  0005D4  6EDA               	movwf	fsr2h,c
  3398  0005D6  0E01               	movlw	1
  3399  0005D8  D02B               	goto	L6
  3400  0005DA                     l1970:
  3401                           
  3402                           ;main.c: 250: else{
  3403                           ;main.c: 251: ptrPacket[packetIndex++] = 1;
  3404  0005DA  501C               	movf	createDataPacket@packetIndex,w,c
  3405  0005DC  2413               	addwf	createDataPacket@ptrPacket,w,c
  3406  0005DE  6ED9               	movwf	fsr2l,c
  3407  0005E0  501D               	movf	createDataPacket@packetIndex+1,w,c
  3408  0005E2  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3409  0005E4  6EDA               	movwf	fsr2h,c
  3410  0005E6  0E01               	movlw	1
  3411  0005E8  6EDF               	movwf	indf2,c
  3412  0005EA  4A1C               	infsnz	createDataPacket@packetIndex,f,c
  3413  0005EC  2A1D               	incf	createDataPacket@packetIndex+1,f,c
  3414                           
  3415                           ;main.c: 252: ptrPacket[packetIndex++] = 0;
  3416  0005EE  501C               	movf	createDataPacket@packetIndex,w,c
  3417  0005F0  2413               	addwf	createDataPacket@ptrPacket,w,c
  3418  0005F2  6ED9               	movwf	fsr2l,c
  3419  0005F4  501D               	movf	createDataPacket@packetIndex+1,w,c
  3420  0005F6  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3421  0005F8  6EDA               	movwf	fsr2h,c
  3422  0005FA  0E00               	movlw	0
  3423  0005FC  D019               	goto	L6
  3424  0005FE                     l1976:
  3425                           
  3426                           ;main.c: 257: else {
  3427                           ;main.c: 258: if (state == 1){
  3428  0005FE  041B               	decf	createDataPacket@state,w,c
  3429  000600  A4D8               	btfss	status,2,c
  3430  000602  D00D               	goto	l1984
  3431                           
  3432                           ;main.c: 259: state = 0;
  3433  000604  0E00               	movlw	0
  3434  000606  6E1B               	movwf	createDataPacket@state,c
  3435                           
  3436                           ;main.c: 260: ptrPacket[packetIndex++] = 2;
  3437  000608  501C               	movf	createDataPacket@packetIndex,w,c
  3438  00060A  2413               	addwf	createDataPacket@ptrPacket,w,c
  3439  00060C  6ED9               	movwf	fsr2l,c
  3440  00060E  501D               	movf	createDataPacket@packetIndex+1,w,c
  3441  000610  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3442  000612  6EDA               	movwf	fsr2h,c
  3443  000614  0E02               	movlw	2
  3444  000616  D00C               	goto	L6
  3445  000618                     l1982:
  3446  000618  4A1C               	infsnz	createDataPacket@packetIndex,f,c
  3447  00061A  2A1D               	incf	createDataPacket@packetIndex+1,f,c
  3448                           
  3449                           ;main.c: 261: }
  3450  00061C  D00B               	goto	l1990
  3451  00061E                     l1984:
  3452                           
  3453                           ;main.c: 262: else {
  3454                           ;main.c: 263: state = 1;
  3455  00061E  0E01               	movlw	1
  3456  000620  6E1B               	movwf	createDataPacket@state,c
  3457                           
  3458                           ;main.c: 264: ptrPacket[packetIndex++] = 3;
  3459  000622  501C               	movf	createDataPacket@packetIndex,w,c
  3460  000624  2413               	addwf	createDataPacket@ptrPacket,w,c
  3461  000626  6ED9               	movwf	fsr2l,c
  3462  000628  501D               	movf	createDataPacket@packetIndex+1,w,c
  3463  00062A  2014               	addwfc	createDataPacket@ptrPacket+1,w,c
  3464  00062C  6EDA               	movwf	fsr2h,c
  3465  00062E  0E03               	movlw	3
  3466  000630                     L6:
  3467  000630  6EDF               	movwf	indf2,c
  3468  000632  D7F2               	goto	l1982
  3469  000634                     l1990:
  3470                           
  3471                           ;main.c: 265: }
  3472                           ;main.c: 266: }
  3473                           ;main.c: 268: previousDataBit = dataBit;
  3474  000634  C018  F015         	movff	createDataPacket@dataBit,createDataPacket@previousDataBit
  3475                           
  3476                           ;main.c: 269: byteMask = byteMask << 1;
  3477  000638  501A               	movf	createDataPacket@byteMask,w,c
  3478  00063A  241A               	addwf	createDataPacket@byteMask,w,c
  3479  00063C  6E1A               	movwf	createDataPacket@byteMask,c
  3480  00063E  2A19               	incf	createDataPacket@i,f,c
  3481  000640  D7A0               	goto	l1950
  3482  000642                     l1998:
  3483                           
  3484                           ;main.c: 270: }
  3485                           ;main.c: 271: dataIndex++;
  3486  000642  4A16               	infsnz	createDataPacket@dataIndex,f,c
  3487  000644  2A17               	incf	createDataPacket@dataIndex+1,f,c
  3488  000646                     l2000:
  3489  000646  5011               	movf	createDataPacket@numDataBytes,w,c
  3490  000648  5C16               	subwf	createDataPacket@dataIndex,w,c
  3491  00064A  5012               	movf	createDataPacket@numDataBytes+1,w,c
  3492  00064C  5817               	subwfb	createDataPacket@dataIndex+1,w,c
  3493  00064E  A0D8               	btfss	status,0,c
  3494  000650  D794               	goto	l1948
  3495                           
  3496                           ;main.c: 272: }
  3497                           ;main.c: 273: if (packetIndex >= 1024) return (0);
  3498  000652  0E04               	movlw	4
  3499  000654  5C1D               	subwf	createDataPacket@packetIndex+1,w,c
  3500  000656  A0D8               	btfss	status,0,c
  3501  000658  D005               	goto	l101
  3502  00065A  0E00               	movlw	0
  3503  00065C  6E10               	movwf	?_createDataPacket+1,c
  3504  00065E  0E00               	movlw	0
  3505  000660  6E0F               	movwf	?_createDataPacket,c
  3506  000662  0012               	return	
  3507  000664                     l101:
  3508                           
  3509                           ;main.c: 274: else return(packetIndex);
  3510  000664  C01C  F00F         	movff	createDataPacket@packetIndex,?_createDataPacket
  3511  000668  C01D  F010         	movff	createDataPacket@packetIndex+1,?_createDataPacket+1
  3512  00066C  0012               	return	
  3513  00066E                     __end_of_createDataPacket:
  3514                           	opt stack 0
  3515                           tblptru	equ	0xFF8
  3516                           prodh	equ	0xFF4
  3517                           prodl	equ	0xFF3
  3518                           intcon	equ	0xFF2
  3519                           intcon2	equ	0xFF1
  3520                           postinc0	equ	0xFEE
  3521                           wreg	equ	0xFE8
  3522                           postdec1	equ	0xFE5
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _DelayMs *****************
  3531 ;; Defined at:
  3532 ;;		line 12 in file "../delay.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  count           2   14[COMRAM] unsigned short 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  downCount       1   17[COMRAM] unsigned char 
  3537 ;;  i               1   16[COMRAM] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      void 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2, status,0
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3547 ;;      Params:         2       0       0       0       0       0       0
  3548 ;;      Locals:         2       0       0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0
  3550 ;;      Totals:         4       0       0       0       0       0       0
  3551 ;;Total ram usage:        4 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    1
  3554 ;; This function calls:
  3555 ;;		Nothing
  3556 ;; This function is called by:
  3557 ;;		_main
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text19
  3562  000A1A                     __ptext19:
  3563                           	opt stack 0
  3564  000A1A                     _DelayMs:
  3565                           	opt stack 29
  3566                           
  3567                           ;delay.c: 13: unsigned char i;
  3568                           ;delay.c: 14: while (count--) {
  3569                           
  3570                           ;incstack = 0
  3571  000A1A  D010               	goto	l2136
  3572  000A1C                     l2128:
  3573                           
  3574                           ;delay.c: 15: i=100;
  3575  000A1C  0E64               	movlw	100
  3576  000A1E  6E11               	movwf	DelayMs@i,c
  3577                           
  3578                           ;delay.c: 16: while(i--) {
  3579  000A20  D009               	goto	l2134
  3580  000A22                     l2130:
  3581                           
  3582                           ;delay.c: 17: { unsigned char downCount; downCount = 4; while(downCount--) {asm("nop");a
      +                          sm("nop");} };
  3583  000A22  0E04               	movlw	4
  3584  000A24  6E12               	movwf	DelayMs@downCount,c
  3585  000A26  D002               	goto	l2132
  3586  000A28                     l110:
  3587  000A28  F000               	nop		;# 
  3588  000A2A  F000               	nop		;# 
  3589  000A2C                     l2132:
  3590  000A2C  0612               	decf	DelayMs@downCount,f,c
  3591  000A2E  2812               	incf	DelayMs@downCount,w,c
  3592  000A30  A4D8               	btfss	status,2,c
  3593  000A32  D7FA               	goto	l110
  3594  000A34                     l2134:
  3595  000A34  0611               	decf	DelayMs@i,f,c
  3596  000A36  2811               	incf	DelayMs@i,w,c
  3597  000A38  A4D8               	btfss	status,2,c
  3598  000A3A  D7F3               	goto	l2130
  3599  000A3C                     l2136:
  3600  000A3C  060F               	decf	DelayMs@count,f,c
  3601  000A3E  A0D8               	btfss	status,0,c
  3602  000A40  0610               	decf	DelayMs@count+1,f,c
  3603  000A42  280F               	incf	DelayMs@count,w,c
  3604  000A44  E1EB               	bnz	l2128
  3605  000A46  2810               	incf	DelayMs@count+1,w,c
  3606  000A48  B4D8               	btfsc	status,2,c
  3607  000A4A  0012               	return	
  3608  000A4C  D7E7               	goto	l2128
  3609  000A4E                     __end_of_DelayMs:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           prodh	equ	0xFF4
  3613                           prodl	equ	0xFF3
  3614                           intcon	equ	0xFF2
  3615                           intcon2	equ	0xFF1
  3616                           postinc0	equ	0xFEE
  3617                           wreg	equ	0xFE8
  3618                           postdec1	equ	0xFE5
  3619                           fsr1h	equ	0xFE2
  3620                           fsr1l	equ	0xFE1
  3621                           indf2	equ	0xFDF
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _CRCcalculate *****************
  3627 ;; Defined at:
  3628 ;;		line 107 in file "../CRC Check.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  message         2   27[COMRAM] PTR unsigned char 
  3631 ;;		 -> commandBuffer(64), 
  3632 ;;  nBytes          1   29[COMRAM] unsigned char 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  CRCresult       2   30[COMRAM] unsigned short 
  3635 ;;  i               1   32[COMRAM] unsigned char 
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  2   27[COMRAM] unsigned short 
  3638 ;; Registers used:
  3639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3645 ;;      Params:         3       0       0       0       0       0       0
  3646 ;;      Locals:         3       0       0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0
  3648 ;;      Totals:         6       0       0       0       0       0       0
  3649 ;;Total ram usage:        6 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    2
  3652 ;; This function calls:
  3653 ;;		_update_crc_16
  3654 ;; This function is called by:
  3655 ;;		_main
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text20
  3660  000952                     __ptext20:
  3661                           	opt stack 0
  3662  000952                     _CRCcalculate:
  3663                           	opt stack 28
  3664                           
  3665                           ;CRC Check.c: 108: unsigned short CRCresult=0xFFFF;
  3666                           
  3667                           ;incstack = 0
  3668  000952  681F               	setf	CRCcalculate@CRCresult,c
  3669  000954  6820               	setf	CRCcalculate@CRCresult+1,c
  3670                           
  3671                           ;CRC Check.c: 109: unsigned char i;
  3672                           ;CRC Check.c: 113: CRCresult=0xFFFF;
  3673  000956  681F               	setf	CRCcalculate@CRCresult,c
  3674  000958  6820               	setf	CRCcalculate@CRCresult+1,c
  3675                           
  3676                           ;CRC Check.c: 115: for (i=0; i<nBytes; i++)
  3677  00095A  0E00               	movlw	0
  3678  00095C  6E21               	movwf	CRCcalculate@i,c
  3679  00095E  D015               	goto	l1934
  3680  000960                     l1930:
  3681                           
  3682                           ;CRC Check.c: 116: CRCresult=update_crc_16 (CRCresult, message[i]);
  3683  000960  C01F  F00F         	movff	CRCcalculate@CRCresult,update_crc_16@crc
  3684  000964  C020  F010         	movff	CRCcalculate@CRCresult+1,update_crc_16@crc+1
  3685  000968  5021               	movf	CRCcalculate@i,w,c
  3686  00096A  0D01               	mullw	1
  3687  00096C  50F3               	movf	prodl,w,c
  3688  00096E  241C               	addwf	CRCcalculate@message,w,c
  3689  000970  6ED9               	movwf	fsr2l,c
  3690  000972  50F4               	movf	prodh,w,c
  3691  000974  201D               	addwfc	CRCcalculate@message+1,w,c
  3692  000976  6EDA               	movwf	fsr2h,c
  3693  000978  50DF               	movf	indf2,w,c
  3694  00097A  6E11               	movwf	update_crc_16@nextVal,c
  3695  00097C  EC27  F004         	call	_update_crc_16	;wreg free
  3696  000980  C00F  F01F         	movff	?_update_crc_16,CRCcalculate@CRCresult
  3697  000984  C010  F020         	movff	?_update_crc_16+1,CRCcalculate@CRCresult+1
  3698  000988  2A21               	incf	CRCcalculate@i,f,c
  3699  00098A                     l1934:
  3700  00098A  501E               	movf	CRCcalculate@nBytes,w,c
  3701  00098C  5C21               	subwf	CRCcalculate@i,w,c
  3702  00098E  A0D8               	btfss	status,0,c
  3703  000990  D7E7               	goto	l1930
  3704                           
  3705                           ;CRC Check.c: 118: return(CRCresult);
  3706  000992  C01F  F01C         	movff	CRCcalculate@CRCresult,?_CRCcalculate
  3707  000996  C020  F01D         	movff	CRCcalculate@CRCresult+1,?_CRCcalculate+1
  3708  00099A  0012               	return		;funcret
  3709  00099C                     __end_of_CRCcalculate:
  3710                           	opt stack 0
  3711                           tblptru	equ	0xFF8
  3712                           prodh	equ	0xFF4
  3713                           prodl	equ	0xFF3
  3714                           intcon	equ	0xFF2
  3715                           intcon2	equ	0xFF1
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           postdec1	equ	0xFE5
  3719                           fsr1h	equ	0xFE2
  3720                           fsr1l	equ	0xFE1
  3721                           indf2	equ	0xFDF
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _update_crc_16 *****************
  3727 ;; Defined at:
  3728 ;;		line 91 in file "../CRC Check.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  crc             2   14[COMRAM] unsigned short 
  3731 ;;  nextVal         1   16[COMRAM] unsigned char 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  shortVal        2   25[COMRAM] unsigned short 
  3734 ;;  tmp             2   23[COMRAM] unsigned short 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  2   14[COMRAM] unsigned short 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3744 ;;      Params:         3       0       0       0       0       0       0
  3745 ;;      Locals:         4       0       0       0       0       0       0
  3746 ;;      Temps:          6       0       0       0       0       0       0
  3747 ;;      Totals:        13       0       0       0       0       0       0
  3748 ;;Total ram usage:       13 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    1
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_CRCcalculate
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text21
  3759  00084E                     __ptext21:
  3760                           	opt stack 0
  3761  00084E                     _update_crc_16:
  3762                           	opt stack 28
  3763                           
  3764                           ;CRC Check.c: 92: unsigned short tmp, shortVal;
  3765                           ;CRC Check.c: 94: shortVal = 0x00ff & (unsigned short) nextVal;
  3766                           
  3767                           ;incstack = 0
  3768  00084E  C011  F01A         	movff	update_crc_16@nextVal,update_crc_16@shortVal
  3769  000852  6A1B               	clrf	update_crc_16@shortVal+1,c
  3770                           
  3771                           ;CRC Check.c: 95: tmp = crc^shortVal;
  3772  000854  501A               	movf	update_crc_16@shortVal,w,c
  3773  000856  180F               	xorwf	update_crc_16@crc,w,c
  3774  000858  6E18               	movwf	update_crc_16@tmp,c
  3775  00085A  501B               	movf	update_crc_16@shortVal+1,w,c
  3776  00085C  1810               	xorwf	update_crc_16@crc+1,w,c
  3777  00085E  6E19               	movwf	update_crc_16@tmp+1,c
  3778                           
  3779                           ;CRC Check.c: 96: crc = (crc >> 8) ^ crc_tab16 [tmp&0xff];
  3780  000860  0EFF               	movlw	255
  3781  000862  1418               	andwf	update_crc_16@tmp,w,c
  3782  000864  6E12               	movwf	??_update_crc_16& (0+255),c
  3783  000866  0E00               	movlw	0
  3784  000868  1419               	andwf	update_crc_16@tmp+1,w,c
  3785  00086A  6E13               	movwf	(??_update_crc_16+1)& (0+255),c
  3786  00086C  90D8               	bcf	status,0,c
  3787  00086E  3612               	rlcf	??_update_crc_16,f,c
  3788  000870  3613               	rlcf	??_update_crc_16+1,f,c
  3789  000872  0EFF               	movlw	low _crc_tab16
  3790  000874  2412               	addwf	??_update_crc_16,w,c
  3791  000876  6EF6               	movwf	tblptrl,c
  3792  000878  0E7D               	movlw	high _crc_tab16
  3793  00087A  2013               	addwfc	??_update_crc_16+1,w,c
  3794  00087C  6EF7               	movwf	tblptrh,c
  3795  00087E                     	if	0	;There are less than 3 active tblptr bytes
  3796  00087E                     	endif
  3797  00087E  0009               	tblrd		*+
  3798  000880  CFF5 F014          	movff	tablat,??_update_crc_16+2
  3799  000884  0009               	tblrd		*+
  3800  000886  CFF5 F015          	movff	tablat,??_update_crc_16+3
  3801  00088A  C00F  F016         	movff	update_crc_16@crc,??_update_crc_16+4
  3802  00088E  C010  F017         	movff	update_crc_16@crc+1,??_update_crc_16+5
  3803  000892  C017  F016         	movff	??_update_crc_16+5,??_update_crc_16+4
  3804  000896  6A17               	clrf	??_update_crc_16+5,c
  3805  000898  5014               	movf	??_update_crc_16+2,w,c
  3806  00089A  1816               	xorwf	??_update_crc_16+4,w,c
  3807  00089C  6E0F               	movwf	update_crc_16@crc,c
  3808  00089E  5015               	movf	??_update_crc_16+3,w,c
  3809  0008A0  1817               	xorwf	??_update_crc_16+5,w,c
  3810  0008A2  6E10               	movwf	update_crc_16@crc+1,c
  3811                           
  3812                           ;CRC Check.c: 97: return crc;
  3813  0008A4  C00F  F00F         	movff	update_crc_16@crc,?_update_crc_16
  3814  0008A8  C010  F010         	movff	update_crc_16@crc+1,?_update_crc_16+1
  3815  0008AC  0012               	return	
  3816  0008AE                     __end_of_update_crc_16:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           intcon2	equ	0xFF1
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _isr *****************
  3837 ;; Defined at:
  3838 ;;		line 211 in file "../main.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3852 ;;      Params:         0       0       0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0
  3854 ;;      Temps:         14       0       0       0       0       0       0
  3855 ;;      Totals:        14       0       0       0       0       0       0
  3856 ;;Total ram usage:       14 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		Interrupt level 2
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	intcode
  3866  000008                     __pintcode:
  3867                           	opt stack 0
  3868  000008                     _isr:
  3869                           	opt stack 25
  3870                           
  3871                           ;incstack = 0
  3872  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3873  00000A  CFFA F001          	movff	pclath,??_isr
  3874  00000E  CFFB F002          	movff	pclatu,??_isr+1
  3875  000012  CFE9 F003          	movff	fsr0l,??_isr+2
  3876  000016  CFEA F004          	movff	fsr0h,??_isr+3
  3877  00001A  CFE1 F005          	movff	fsr1l,??_isr+4
  3878  00001E  CFE2 F006          	movff	fsr1h,??_isr+5
  3879  000022  CFD9 F007          	movff	fsr2l,??_isr+6
  3880  000026  CFDA F008          	movff	fsr2h,??_isr+7
  3881  00002A  CFF3 F009          	movff	prodl,??_isr+8
  3882  00002E  CFF4 F00A          	movff	prodh,??_isr+9
  3883  000032  CFF6 F00B          	movff	tblptrl,??_isr+10
  3884  000036  CFF7 F00C          	movff	tblptrh,??_isr+11
  3885  00003A  CFF8 F00D          	movff	tblptru,??_isr+12
  3886  00003E  CFF5 F00E          	movff	tablat,??_isr+13
  3887                           
  3888                           ;main.c: 212: if (INTCONbits.INT0IF) {
  3889  000042  A2F2               	btfss	intcon,1,c	;volatile
  3890  000044  D003               	goto	i2l1590
  3891                           
  3892                           ;main.c: 213: INTCONbits.INT0IF = 0;
  3893  000046  92F2               	bcf	intcon,1,c	;volatile
  3894                           
  3895                           ;main.c: 214: pushFlag = !0;
  3896  000048  0E01               	movlw	1
  3897  00004A  6E3F               	movwf	_pushFlag,c
  3898  00004C                     i2l1590:
  3899                           
  3900                           ;main.c: 215: }
  3901                           ;main.c: 217: if (INTCONbits.RBIF) {
  3902  00004C  A0F2               	btfss	intcon,0,c	;volatile
  3903  00004E  D003               	goto	i2l81
  3904                           
  3905                           ;main.c: 218: PORTBreg = PORTB;
  3906  000050  CF81 F040          	movff	3969,_PORTBreg	;volatile
  3907                           
  3908                           ;main.c: 219: INTCONbits.RBIF = 0;
  3909  000054  90F2               	bcf	intcon,0,c	;volatile
  3910  000056                     i2l81:
  3911  000056  C00E  FFF5         	movff	??_isr+13,tablat
  3912  00005A  C00D  FFF8         	movff	??_isr+12,tblptru
  3913  00005E  C00C  FFF7         	movff	??_isr+11,tblptrh
  3914  000062  C00B  FFF6         	movff	??_isr+10,tblptrl
  3915  000066  C00A  FFF4         	movff	??_isr+9,prodh
  3916  00006A  C009  FFF3         	movff	??_isr+8,prodl
  3917  00006E  C008  FFDA         	movff	??_isr+7,fsr2h
  3918  000072  C007  FFD9         	movff	??_isr+6,fsr2l
  3919  000076  C006  FFE2         	movff	??_isr+5,fsr1h
  3920  00007A  C005  FFE1         	movff	??_isr+4,fsr1l
  3921  00007E  C004  FFEA         	movff	??_isr+3,fsr0h
  3922  000082  C003  FFE9         	movff	??_isr+2,fsr0l
  3923  000086  C002  FFFB         	movff	??_isr+1,pclatu
  3924  00008A  C001  FFFA         	movff	??_isr,pclath
  3925  00008E  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3926  000090  0011               	retfie		f
  3927  000092                     __end_of_isr:
  3928                           	opt stack 0
  3929                           pclatu	equ	0xFFB
  3930                           pclath	equ	0xFFA
  3931                           tblptru	equ	0xFF8
  3932                           tblptrh	equ	0xFF7
  3933                           tblptrl	equ	0xFF6
  3934                           tablat	equ	0xFF5
  3935                           prodh	equ	0xFF4
  3936                           prodl	equ	0xFF3
  3937                           intcon	equ	0xFF2
  3938                           intcon2	equ	0xFF1
  3939                           postinc0	equ	0xFEE
  3940                           fsr0h	equ	0xFEA
  3941                           fsr0l	equ	0xFE9
  3942                           wreg	equ	0xFE8
  3943                           postdec1	equ	0xFE5
  3944                           fsr1h	equ	0xFE2
  3945                           fsr1l	equ	0xFE1
  3946                           indf2	equ	0xFDF
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           pclatu	equ	0xFFB
  3951                           pclath	equ	0xFFA
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           postinc0	equ	0xFEE
  3961                           fsr0h	equ	0xFEA
  3962                           fsr0l	equ	0xFE9
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           fsr1h	equ	0xFE2
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972                           	psect	rparam
  3973  0000                     pclatu	equ	0xFFB
  3974                           pclath	equ	0xFFA
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           intcon	equ	0xFF2
  3982                           intcon2	equ	0xFF1
  3983                           postinc0	equ	0xFEE
  3984                           fsr0h	equ	0xFEA
  3985                           fsr0l	equ	0xFE9
  3986                           wreg	equ	0xFE8
  3987                           postdec1	equ	0xFE5
  3988                           fsr1h	equ	0xFE2
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995                           	psect	temp
  3996  000041                     btemp:
  3997                           	opt stack 0
  3998  000041                     	ds	1
  3999  0000                     int$flags	set	btemp
  4000                           pclatu	equ	0xFFB
  4001                           pclath	equ	0xFFA
  4002                           tblptru	equ	0xFF8
  4003                           tblptrh	equ	0xFF7
  4004                           tblptrl	equ	0xFF6
  4005                           tablat	equ	0xFF5
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           intcon2	equ	0xFF1
  4010                           postinc0	equ	0xFEE
  4011                           fsr0h	equ	0xFEA
  4012                           fsr0l	equ	0xFE9
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1h	equ	0xFE2
  4016                           fsr1l	equ	0xFE1
  4017                           indf2	equ	0xFDF
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    512
    Data        0
    BSS         1222
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      64
    BANK0           128      0      64
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    xmitPacket@ptrDelay	PTR unsigned char  size(2) Largest target is 1024
		 -> arrDataPacket(BIGRAM[1024]), 

    readRegisters@registerPtr	PTR unsigned char  size(2) Largest target is 6
		 -> initMMA8452@accelData(COMRAM[4]), main@accelerometerBuffer(COMRAM[6]), main@interruptSource(COMRAM[1]), main@sysModRegister(COMRAM[1]), 
		 -> main@motionDetection(COMRAM[1]), 

    CRCcalculate@message	PTR unsigned char  size(2) Largest target is 64
		 -> commandBuffer(BANK0[64]), 

    createDataPacket@ptrPacket	PTR unsigned char  size(2) Largest target is 1024
		 -> arrDataPacket(BIGRAM[1024]), 

    createDataPacket@ptrData	PTR unsigned char  size(2) Largest target is 64
		 -> commandBuffer(BANK0[64]), 


Critical Paths under _main in COMRAM

    _main->_initMMA8452
    _initMMA8452->_readRegisters
    _writeByteToRegister->_i2c_SendControlByte
    _readRegisters->_setRegister
    _setRegister->_i2c_SendControlByte
    _sendREADcommand->_i2c_SendControlByte
    _i2c_SendControlByte->_i2c_SendByte
    _CRCcalculate->_update_crc_16

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   13764
                                             37 COMRAM    21    21      0
                       _CRCcalculate
                            _DelayMs
                   _createDataPacket
                  _getTwosComplement
                               _init
                        _initMMA8452
                     _initialize_I2C
                      _readRegisters
                          _xmitBreak
                         _xmitPacket
 ---------------------------------------------------------------------------------
 (1) _xmitPacket                                           8     4      4     408
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _xmitBreak                                            3     3      0     264
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialize_I2C                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMMA8452                                          5     5      0    6480
                                             32 COMRAM     5     5      0
                      _readRegisters
                _writeByteToRegister
 ---------------------------------------------------------------------------------
 (2) _writeByteToRegister                                  3     1      2    2404
                                             18 COMRAM     3     1      2
                 _i2c_GetAcknowledge
                       _i2c_SendByte
                _i2c_SendControlByte
                          _i2c_Start
                           _i2c_Stop
 ---------------------------------------------------------------------------------
 (1) _readRegisters                                       12     8      4    3641
                                             20 COMRAM    12     8      4
                       _i2c_ReadByte
                _i2c_SendAcknowledge
                           _i2c_Stop
                    _sendREADcommand
                        _setRegister
 ---------------------------------------------------------------------------------
 (2) _setRegister                                          2     1      1     482
                                             18 COMRAM     2     1      1
                 _i2c_GetAcknowledge
                       _i2c_SendByte
                _i2c_SendControlByte
                          _i2c_Start
 ---------------------------------------------------------------------------------
 (2) _sendREADcommand                                      1     1      0     362
                                             18 COMRAM     1     1      0
                 _i2c_GetAcknowledge
                _i2c_SendControlByte
                          _i2c_Start
 ---------------------------------------------------------------------------------
 (3) _i2c_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_SendControlByte                                  3     2      1     317
                                             15 COMRAM     3     2      1
                       _i2c_SendByte
 ---------------------------------------------------------------------------------
 (4) _i2c_SendByte                                         1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_GetAcknowledge                                   1     1      0      23
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_SendAcknowledge                                  1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _i2c_ReadByte                                         1     1      0      23
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTwosComplement                                    8     6      2     432
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _createDataPacket                                    15     9      6     909
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              4     2      2     220
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CRCcalculate                                         6     3      3     576
                                             27 COMRAM     6     3      3
                      _update_crc_16
 ---------------------------------------------------------------------------------
 (2) _update_crc_16                                       13    10      3     287
                                             14 COMRAM    13    10      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CRCcalculate
     _update_crc_16
   _DelayMs
   _createDataPacket
   _getTwosComplement
   _init
   _initMMA8452
     _readRegisters
       _i2c_ReadByte
       _i2c_SendAcknowledge
       _i2c_Stop
       _sendREADcommand
         _i2c_GetAcknowledge
         _i2c_SendControlByte
           _i2c_SendByte
         _i2c_Start
       _setRegister
         _i2c_GetAcknowledge
         _i2c_SendByte
         _i2c_SendControlByte
           _i2c_SendByte
         _i2c_Start
     _writeByteToRegister
       _i2c_GetAcknowledge
       _i2c_SendByte
       _i2c_SendControlByte
         _i2c_SendByte
       _i2c_Start
       _i2c_Stop
   _initialize_I2C
   _readRegisters
     _i2c_ReadByte
     _i2c_SendAcknowledge
     _i2c_Stop
     _sendREADcommand
       _i2c_GetAcknowledge
       _i2c_SendControlByte
         _i2c_SendByte
       _i2c_Start
     _setRegister
       _i2c_GetAcknowledge
       _i2c_SendByte
       _i2c_SendControlByte
         _i2c_SendByte
       _i2c_Start
   _xmitBreak
   _xmitPacket

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     400      17       66.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      40       5       50.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      40       1       50.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100      15        0.0%
DATA                 0      0     500       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Sep 08 15:29:19 2017

                    _update_crc_16 084E       i2c_SendControlByte@direction 0010  
                               l68 052C                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                        __CFG_OSC$HS 000000  
                 i2c_SendByte@byte 000F                                l101 0664  
                              l110 0A28                                l205 02D2  
                              l222 0B0E                                l240 0AF2  
                              l216 0B18                                l228 0AE6  
                              l246 0AC4                                l247 0AC6  
                              l191 0142                                l248 0AC8  
                              l193 0186                                l273 0790  
                              l186 00C6                                l274 0792  
                              l267 076A                                l189 0104  
                              l198 0212                                l278 07A6  
                              l279 07A8                                _isr 0008  
                              prod 000FF3                                wreg 000FE8  
                     ?_initMMA8452 0001                      ?_CRCcalculate 001C  
     __size_of_i2c_SendAcknowledge 0016                       __CFG_LVP$OFF 000000  
                     __CFG_WDT$OFF 000000                               l2000 0646  
                             l2020 068A                               l2012 0672  
                             l2100 075C                               l2030 06A2  
                             l2022 068C                               l2014 067A  
                             l2032 06A8                               l2016 067C  
                             l2112 077C                               l2130 0A22  
                             l2042 06C0                               l2050 06D0  
                             l2034 06AA                               l2122 07AC  
                             l2106 0770                               l2132 0A2C  
                             l2044 06C6                               l2124 07AE  
                             l2116 0796                               l2108 0772  
                             l2134 0A34                               l2070 0704  
                             l2054 06DE                               l2062 06EE  
                             l2046 06C8                               l2038 06B2  
                             l2118 0798                               l2230 0510  
                             l2150 035A                               l2128 0A1C  
                             l2136 0A3C                               l2056 06E4  
                             l2080 071E                               l2066 06FC  
                             l2074 070C                               l2058 06E6  
                             l2082 0720                               l2146 0312  
                             l2068 0702                               l2094 074E  
                             l2086 0732                               l1624 0A9C  
                             l1730 094A                               l1802 0122  
                             l1644 0A16                               l1724 0936  
                             l1638 0A02                               l1718 0922  
                             l1830 01AA                               l1680 07EE  
                             l1672 07D8                               l1816 0166  
                             l1930 0960                               l1922 08F8  
                             l1690 083E                               l1666 07C4  
                             l1906 02F0                               l1842 01DA  
                             l1836 01C2                               l1934 098A  
                             l1950 0582                               l1942 0552  
                             l1686 0836                               l1678 07E8  
                             l1862 0232                               l1688 083C  
                             l1880 027A                               l1848 01F2  
                             l1970 05DA                               l1954 058A  
                             l1946 055C                               l1874 0262  
                             l1948 057A                               l1892 02B2  
                             l1868 024A                               l1788 00E4  
                             l1982 0618                               l1990 0634  
                             l1958 05A4                               l1886 0292  
                             l1984 061E                               l1976 05FE  
                             l1998 0642                               ?_isr 0001  
                      main@convert 0038                               u1205 08D2  
                 ??_initialize_I2C 000F                               i2l81 0056  
                     __CFG_PWRT$ON 000000                     ??_i2c_ReadByte 000F  
                             _main 02F4                               _init 0A4E  
      readRegisters@deviceREGISTER 0015                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 0041                               prodh 000FF4  
                             prodl 000FF3                     ??_i2c_SendByte 000F  
                             start 0092                      __CFG_IESO$OFF 000000  
                  __end_of_DelayMs 0A4E                      __CFG_MCLRE$ON 000000  
                   ?_update_crc_16 000F                       ___param_bank 000000  
       i2c_SendControlByte@outByte 0012              createDataPacket@state 001B  
                            ??_isr 0001     i2c_SendControlByte@controlByte 0011  
                            ?_main 0001                              ?_init 0001  
                   __CFG_DEBUG$OFF 000000                              _PORTB 000F81  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94       __size_of_writeByteToRegister 0050  
                   __CFG_FCMEN$OFF 000000                     ??_CRCcalculate 001F  
                     main@rawVectx 002F                       main@rawVecty 0031  
                     main@rawVectz 0033                              main@i 003A  
                   __CFG_BOREN$OFF 000000                              pclath 000FFA  
                            tablat 000FF5                              status 000FD8  
                  __initialization 099C                       __end_of_main 0536  
                     __end_of_init 0A7C                   __end_of_i2c_Stop 0B20  
                           ??_main 0026                             ??_init 000F  
                    __activetblptr 000002                       ?_setRegister 0013  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
           __size_of_readRegisters 0096                 __size_of_i2c_Start 000A  
                           i2l1590 004C                             _INTCON 000FF2  
                        ??_DelayMs 0011                             _SSPADD 000FC8  
                           _SSPBUF 000FC9                  _getTwosComplement 08AE  
                  ??_update_crc_16 0012       __size_of_i2c_SendControlByte 0010  
               ?_getTwosComplement 000F                     __CFG_XINST$OFF 000000  
      writeByteToRegister@dataByte 0014                ??_getTwosComplement 0011  
                           clear_0 09A4                             clear_1 09B6  
                           clear_2 09C2                   update_crc_16@crc 000F  
                 update_crc_16@tmp 0018        writeByteToRegister@deviceID 0015  
             __end_of_i2c_ReadByte 0B00               __end_of_i2c_SendByte 0AF0  
                     __mediumconst 7DFE        createDataPacket@packetIndex 001C  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ?_createDataPacket 000F  
             __size_of_initMMA8452 025E                 ??_createDataPacket 0015  
        __end_of_getTwosComplement 0902                         __accesstop 0080  
          __end_of__initialization 09D4                    __CFG_PBADEN$OFF 000000  
                createDataPacket@i 0019                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001               __end_of_CRCcalculate 099C  
              _i2c_SendAcknowledge 0ABA                      _readRegisters 07B8  
                __end_of_i2c_Start 0B16            createDataPacket@dataBit 0018  
                    CRCcalculate@i 0021            createDataPacket@ptrData 000F  
             ?_i2c_SendAcknowledge 0001                         __pbssBANK0 0080  
                       __pbssBANK1 0100                          ?_i2c_Stop 0001  
            CRCcalculate@CRCresult 001F                 CRCcalculate@nBytes 001E  
writeByteToRegister@deviceREGISTER 0013                _writeByteToRegister 0902  
               xmitPacket@numBytes 000F                   initMMA8452@F2615 003B  
      __size_of_i2c_GetAcknowledge 000C                 xmitPacket@ptrDelay 0011  
         __size_of_sendREADcommand 0024                     ?_readRegisters 0015  
            i2c_GetAcknowledge@ack 000F                            _INTCON2 000FF1  
             ?_writeByteToRegister 0013             getTwosComplement@value 0015  
            ??_i2c_SendAcknowledge 000F                            _SSPCON1 000FC6  
                   main@initResult 0026                            _SSPSTAT 000FC7  
             __size_of_setRegister 0038                 __size_of_xmitBreak 00A8  
                       ??_i2c_Stop 000F         __size_of_getTwosComplement 0054  
                          _DelayMs 0A1A                  __end_of_crc_tab16 7FFF  
         getTwosComplement@LSBbyte 000F           getTwosComplement@MSBbyte 0014  
                          __Hparam 0000                            __Lparam 0000  
         readRegisters@registerPtr 0017              __size_of_i2c_ReadByte 0010  
                  __CFG_STVREN$OFF 000000                            __pcinit 099C  
            __size_of_i2c_SendByte 0010                            __ramtop 0600  
                          __ptext0 02F4                            __ptext1 0716  
                          __ptext2 066E                            __ptext3 0AA0  
                          __ptext4 0096                            __ptext5 0902  
                          __ptext6 07B8                            __ptext7 09E2  
                          __ptext8 0A7C                            __ptext9 0B0C  
               xmitBreak@delayLoop 0011                 xmitBreak@delayTime 0010  
            ??_writeByteToRegister 0015                       __size_of_isr 008A  
              _i2c_SendControlByte 0AD0               end_of_initialization 09D4  
        readRegisters@numRegisters 0016          i2c_SendAcknowledge@status 000F  
                    __Lmediumconst 7DFE                       _i2c_ReadByte 0AF0  
            __size_of_CRCcalculate 004A               ?_i2c_SendControlByte 0010  
                     _i2c_SendByte 0AE0                    ??_readRegisters 0019  
          __size_of_initialize_I2C 001A                setRegister@deviceID 0014  
                          postdec1 000FE5                            postinc0 000FEE  
                       _testBuffer 0100               update_crc_16@nextVal 0011  
                __end_of_xmitBreak 0716                  ??_sendREADcommand 0013  
                        _PORTAbits 000F80                          _PORTBbits 000F81  
                     _CRCcalculate 0952                          _TXSTAbits 000FAC  
            ??_i2c_SendControlByte 0011                         _xmitPacket 0716  
            __end_of_update_crc_16 08AE          __size_of_createDataPacket 0138  
                     DelayMs@count 000F                          _i2c_Start 0B0C  
              start_initialization 099C            sendREADcommand@deviceID 0013  
                    ??_initMMA8452 0021                        __end_of_isr 0092  
         createDataPacket@byteMask 001A                  __size_of_i2c_Stop 000A  
              xmitPacket@delayLoop 0016                xmitPacket@delayTime 0015  
                 __CFG_LPT1OSC$OFF 000000               initMMA8452@accelData 0021  
                      __pbssBIGRAM 0180                         ?_i2c_Start 0001  
                      __pbssCOMRAM 003B                CRCcalculate@message 001C  
                   readRegisters@i 0020                           ?_DelayMs 000F  
            readRegisters@deviceID 001F       createDataPacket@numDataBytes 0011  
              __end_of_initMMA8452 02F4                      _arrDataPacket 0180  
       __end_of_i2c_GetAcknowledge 0B0C                        ?_xmitPacket 000F  
                  xmitPacket@index 0013                  __CFG_CCP2MX$PORTC 000000  
                   _initialize_I2C 0AA0                          __pintcode 0008  
                    __pmediumconst 7DFE             initMMA8452@commandByte 0025  
                        _crc_tab16 7DFF        __end_of_i2c_SendAcknowledge 0AD0  
        setRegister@deviceREGISTER 0013                      ??_setRegister 0014  
        createDataPacket@dataIndex 0016                           _LATAbits 000F89  
                         DelayMs@i 0011             __end_of_initialize_I2C 0ABA  
                  _sendREADcommand 0A7C                           _PIR1bits 000F9E  
                 i2c_ReadByte@byte 000F                   _createDataPacket 0536  
                         _PORTBreg 0040        __end_of_writeByteToRegister 0952  
                      ??_i2c_Start 000F                          _xmitBreak 066E  
              __size_of_xmitPacket 00A2                 main@numBytesToSend 0027  
                      _initMMA8452 0096                        _INTCON2bits 000FF1  
                         _i2c_Stop 0B16                __end_of_setRegister 0A1A  
                 __size_of_DelayMs 0034                    ?_initialize_I2C 0001  
                         __Hrparam 0000                           __Lrparam 0000  
        createDataPacket@ptrPacket 0013              __end_of_readRegisters 084E  
                       ?_xmitBreak 0001                           __ptext10 0AD0  
                         __ptext11 0AE0                           __ptext20 0952  
                         __ptext12 0B00                           __ptext21 084E  
                         __ptext13 0B16                           __ptext14 0ABA  
                         __ptext15 0AF0                           __ptext16 0A4E  
                         __ptext17 08AE                           __ptext18 0536  
                         __ptext19 0A1A    createDataPacket@previousDataBit 0015  
      __end_of_i2c_SendControlByte 0AE0                main@interruptSource 0037  
          __end_of_sendREADcommand 0AA0                      __size_of_main 0242  
                    __size_of_init 002E                           int$flags 0041  
                         _pushFlag 003F                main@motionDetection 0036  
                       _INTCONbits 000FF2            xmitBreak@numStartPulses 000F  
                      _setRegister 09E2             __size_of_update_crc_16 0060  
               main@sysModRegister 0035                           intlevel2 0000  
                     ??_xmitPacket 0013                      _commandBuffer 0080  
                 DelayMs@downCount 0012                 _i2c_GetAcknowledge 0B00  
                      ??_xmitBreak 000F              update_crc_16@shortVal 001A  
               __end_of_xmitPacket 07B8                ?_i2c_GetAcknowledge 0001  
         __end_of_createDataPacket 066E                        _SSPCON1bits 000FC6  
                      _SSPCON2bits 000FC5                   ?_sendREADcommand 0001  
                    ?_i2c_ReadByte 0001            main@accelerometerBuffer 0029  
                    ?_i2c_SendByte 0001               ??_i2c_GetAcknowledge 000F  
